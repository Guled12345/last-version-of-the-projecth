
### FILE: app.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date, timedelta
import json
import os
import pickle
import random

# Import utilities
from utils.language_utils import get_text, load_app_settings, save_app_settings
from utils.data_utils import load_student_data
from utils.auth_utils import is_authenticated, render_login_page, logout_user, get_user_role
from utils.image_base64 import get_base64_images # Import get_base64_images for its dictionary

# Corrected: All UI functions now imported from utils.exact_ui
from utils.exact_ui import (
    add_exact_ui_styles, # Apply overall app styles
    render_exact_sidebar, # Sidebar structure and fixed content, including settings
    render_exact_page_header, # Global header rendering function (without settings button)
    create_exact_metric_card, # Helper for individual stat cards (used on Dashboard)
    create_exact_chart_container, # Helper for chart containers
    get_b64_image_html # Helper for rendering base64 images within HTML
)
from utils.icon_utils import ( # Icons are used within metric cards
    get_total_students_icon, get_on_track_icon,
    get_at_risk_icon, get_intervention_icon,
    get_material_icon_html # NEW: Import for specific Material Icons in header
)

# IMPORTANT: Page config MUST be the first Streamlit command
st.set_page_config(
    page_title="EduScan Somalia - Modern Dashboard", # Updated title for consistency
    page_icon="📚", # Keep a single emoji for page_icon as Material Icons don't render here directly
    layout="wide",
    initial_sidebar_state="expanded" # Default state (can be 'collapsed' for production)
)

# Apply modern UI styles - CRITICAL to be at the top
add_exact_ui_styles()

# Initialize session state for settings
if 'app_language' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_language'] = settings.get('language', 'English')
if 'offline_mode' not in st.session_state:
    settings = load_app_settings()
    st.session_state['offline_mode'] = settings.get('offline_mode', False)
if 'app_theme' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_theme'] = settings.get('theme', 'Light') # Default theme

# Get current language
language = st.session_state.get('app_language', 'English')

# Apply theme-specific body attribute via JavaScript to allow CSS targeting
current_theme = st.session_state.get('app_theme', 'Light')
st.markdown(f"""
    <script>
        document.body.setAttribute('data-theme', '{current_theme}');
    </script>
""", unsafe_allow_html=True)


# --- Dashboard Content Rendering Function ---
def render_dashboard_page_content():
    """Renders the main content of the Dashboard page."""
    
    # Top Header Section (EduScan Somalia title + Online Mode/Settings buttons)
    # Replaced emoji with Material Icon HTML
    render_exact_page_header(get_material_icon_html("dashboard"), 'dashboard', 'app_subtitle', language)

    st.markdown("<h3 style='font-size:1.5rem; font-weight:600; color:var(--gray-900); margin-bottom:1.5rem;'>System Overview</h3>", unsafe_allow_html=True) # Header for stats
    
    # --- Fetch actual data for dashboard stats ---
    all_student_data = load_student_data()
    df_students = pd.DataFrame(all_student_data)

    total_students = len(df_students)
    
    # Calculate new students this month (example: last 30 days)
    new_this_month = 0
    if not df_students.empty:
        df_students['timestamp'] = pd.to_datetime(df_students['timestamp'])
        one_month_ago = datetime.now() - timedelta(days=30)
        new_this_month = df_students[df_students['timestamp'] >= one_month_ago].shape[0]

    on_track_count = 0
    at_risk_count = 0
    intervention_count = 0
    
    if not df_students.empty:
        # Assuming 'risk_level' is stored as 'Low Risk', 'Medium Risk', 'High Risk'
        on_track_count = df_students[df_students['risk_level'] == 'Low Risk'].shape[0]
        at_risk_count = df_students[df_students['risk_level'] == 'Medium Risk'].shape[0]
        intervention_count = df_students[df_students['risk_level'] == 'High Risk'].shape[0]

    on_track_percentage = (on_track_count / total_students * 100) if total_students > 0 else 0
    at_risk_percentage = (at_risk_count / total_students * 100) if total_students > 0 else 0
    
    # Render Stat Cards using st.columns and the new helper function
    # Enhanced asymmetric layout for stat cards
    col1, col2, col3, col4 = st.columns(4) # Equal columns for metrics, easier to manage responsiveness
    with col1:
        st.markdown(create_exact_metric_card('total_students_label', total_students, f"↑ {new_this_month} new this month", get_total_students_icon(), 'total'), unsafe_allow_html=True)
    with col2:
        st.markdown(create_exact_metric_card('on_track_label', on_track_count, f"↑ {on_track_percentage:.0f}% performing well", get_on_track_icon(), 'on-track'), unsafe_allow_html=True)
    with col3:
        st.markdown(create_exact_metric_card('at_risk_label', at_risk_count, f"↑ {at_risk_percentage:.0f}% need support", get_at_risk_icon(), 'at-risk', change_type="negative"), unsafe_allow_html=True)
    with col4:
        st.markdown(create_exact_metric_card('intervention_label', intervention_count, f"↑ {(intervention_count / total_students * 100):.0f}% urgent attention" if total_students > 0 else "↑ 0% urgent attention", get_intervention_icon(), 'intervention', change_type="negative"), unsafe_allow_html=True)
    
    # --- Performance Charts (asymmetric layout) ---
    st.markdown("<h3 style='font-size:1.5rem; font-weight:600; color:var(--gray-900); margin-top:2.5rem; margin-bottom:1.5rem;'>Performance Insights</h3>", unsafe_allow_html=True)
    chart_col1, chart_col2 = st.columns([1, 1.2]) # Asymmetric ratio

    with chart_col1:
        # Subject performance chart
        # Placeholder for dynamic content: Pass actual plot as a string if using create_exact_chart_container
        # For plotly, it's often better to create the plot and then render it directly, outside the HTML string.
        # So create_exact_chart_container will wrap the Plotly chart rendering.
        
        subjects = ['Mathematics', 'Reading', 'Writing', 'Science', 'Social Studies']
        
        # Aggregate real data for subject scores if available, otherwise use dummy data
        if not df_students.empty and all(col in df_students.columns for col in ['math_score', 'reading_score', 'writing_score']):
            # Dynamically calculate Science and Social Studies average if not directly present
            df_students_copy = df_students.copy()
            if 'science_score' not in df_students_copy.columns:
                df_students_copy['science_score'] = df_students_copy[['math_score', 'reading_score', 'writing_score']].mean(axis=1) * 1.05
            if 'social_studies_score' not in df_students_copy.columns:
                df_students_copy['social_studies_score'] = df_students_copy[['math_score', 'reading_score', 'writing_score']].mean(axis=1) * 1.02

            avg_scores = df_students_copy[['math_score', 'reading_score', 'writing_score', 'science_score', 'social_studies_score']].mean().to_dict()
            
            # Map to display names and ensure consistency
            scores_display = [
                avg_scores.get('math_score', 0),
                avg_scores.get('reading_score', 0),
                avg_scores.get('writing_score', 0),
                avg_scores.get('science_score', 0),
                avg_scores.get('social_studies_score', 0)
            ]
        else: # Fallback to original dummy data if no valid student data for subjects
            scores_display = [75, 82, 70, 78, 80] # Adjusted to align with dummy data from utils/data_utils

        fig_bar = px.bar(
            x=subjects, y=scores_display,
            title="", # Title moved to create_exact_chart_container
            labels={'x': 'Subjects', 'y': 'Average Score (%)'},
            color_discrete_sequence=['var(--primary-purple)'] # Using CSS variable for consistency
        )
        
        fig_bar.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family='Inter', color='var(--gray-700)'), # Use CSS variable
            showlegend=False,
            margin=dict(l=0, r=0, t=20, b=0),
            height=350,
            xaxis=dict(gridcolor='var(--gray-200)', showgrid=True),
            yaxis=dict(gridcolor='var(--gray-200)', showgrid=True, range=[0,100])
        )
        
        st.markdown(create_exact_chart_container(
            f"{get_material_icon_html('trending_up', 'outlined')} Academic Performance by Subject", # Material Icon here
            "Average scores across all subjects",
            f'<div id="chart-subject-performance"></div>' # Placeholder for Plotly
        ), unsafe_allow_html=True)
        st.plotly_chart(fig_bar, use_container_width=True) # Render after markdown for positioning

    with chart_col2:
        # Risk distribution pie chart
        
        risk_labels = [get_text('on_track_label', language), get_text('at_risk_label', language), get_text('intervention_label', language)] # Use language keys
        risk_values = [on_track_count, at_risk_count, intervention_count]
        risk_colors = ['var(--success-green)', 'var(--warning-orange)', 'var(--danger-red)'] # Use CSS variables
        
        # Filter out zero values for cleaner pie chart rendering
        filtered_labels = [label for i, label in enumerate(risk_labels) if risk_values[i] > 0]
        filtered_values = [value for value in risk_values if value > 0]
        filtered_colors = [risk_colors[i] for i, value in enumerate(risk_values) if value > 0]

        if not filtered_values: # Handle case where all counts are zero (e.g., empty data)
            fig_pie = go.Figure(data=[go.Pie(labels=['No Data'], values=[1], marker_colors=['var(--gray-400)'], hole=.4, textinfo='label')])
        else:
            fig_pie = go.Figure(data=[go.Pie(
                labels=filtered_labels,
                values=filtered_values,
                marker_colors=filtered_colors,
                hole=.4,
                textinfo='percent+label',
                insidetextorientation='radial',
                # Pull the 'Intervention' slice slightly for emphasis
                pull=[0.1 if label == get_text('intervention_label', language) else 0 for label in filtered_labels]
            )])
        
        fig_pie.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family='Inter', color='var(--gray-700)'),
            showlegend=True,
            margin=dict(l=0, r=0, t=20, b=0),
            height=350,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2, # Position below chart
                xanchor="center",
                x=0.5,
                font=dict(size=10)
            )
        )
        fig_pie.update_traces(
            textfont_color="white",
            textfont_size=14,
            marker=dict(line=dict(color='var(--white)', width=1)) # Border for slices
        )
        
        st.markdown(create_exact_chart_container(
            f"{get_material_icon_html('pie_chart')} Student Risk Distribution", # Material Icon here
            "Student risk assessment overview",
            f'<div id="chart-risk-distribution"></div>' # Placeholder for Plotly
        ), unsafe_allow_html=True)
        st.plotly_chart(fig_pie, use_container_width=True) # Render after markdown

    # Recent assessments table
    st.markdown(create_exact_chart_container(
        f"{get_material_icon_html('grading')} Recent Assessment Results", # Material Icon here
        "Latest student assessment data"
    ), unsafe_allow_html=True)
    
    if not df_students.empty:
        df_recent = df_students.sort_values(by='timestamp', ascending=False).head(5)
        display_columns = ['student_name', 'grade_level', 'math_score', 'reading_score', 'risk_level']
        
        # Ensure these columns exist, provide defaults if not.
        for col in display_columns:
            if col not in df_recent.columns:
                df_recent[col] = np.nan # Add column with NaNs if missing
        
        df_display = df_recent[display_columns].copy()
        df_display.columns = ['Student Name', 'Grade', 'Math Score (%)', 'Reading Score (%)', 'Risk Level']
        st.dataframe(df_display, use_container_width=True, hide_index=True)
    else:
        # Sample data if dataframe is empty
        sample_data = {
            'Student Name': ['No Data Yet'],
            'Grade': ['N/A'],
            'Math Score (%)': [0],
            'Reading Score (%)': [0],
            'Risk Level': ['N/A']
        }
        st.dataframe(pd.DataFrame(sample_data), use_container_width=True, hide_index=True)

    # Performance trends chart
    st.markdown(create_exact_chart_container(
        f"{get_material_icon_html('analytics')} Monthly Performance Trends", # Material Icon here
        "Average subject performance over time"
    ), unsafe_allow_html=True)
    
    # Use real data if available, otherwise use dummy data for trends
    if not df_students.empty:
        df_students['month_year'] = df_students['timestamp'].dt.to_period('M').astype(str)
        monthly_avg = df_students.groupby('month_year')[['math_score', 'reading_score']].mean().reset_index()
        monthly_avg.columns = ['Month-Year', 'Mathematics', 'Reading'] # Rename for plotting
        monthly_avg = monthly_avg.sort_values(by='Month-Year')

        fig_line = go.Figure()
        fig_line.add_trace(go.Scatter(
            x=monthly_avg['Month-Year'], y=monthly_avg['Mathematics'],
            mode='lines+markers',
            name='Mathematics',
            line=dict(color='var(--primary-purple)', width=3), # Use CSS variable
            marker=dict(size=8)
        ))
        fig_line.add_trace(go.Scatter(
            x=monthly_avg['Month-Year'], y=monthly_avg['Reading'],
            mode='lines+markers',
            name='Reading',
            line=dict(color='var(--success-green)', width=3), # Use CSS variable
            marker=dict(size=8)
        ))
    else:
        # Dummy data for trends
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul']
        math_trend = [72, 74, 76, 79, 78, 81, 85]
        reading_trend = [75, 76, 78, 80, 82, 80, 78]
        
        fig_line = go.Figure()
        fig_line.add_trace(go.Scatter(
            x=months, y=math_trend,
            mode='lines+markers',
            name='Mathematics',
            line=dict(color='var(--primary-purple)', width=3),
            marker=dict(size=8)
        ))
        fig_line.add_trace(go.Scatter(
            x=months, y=reading_trend,
            mode='lines+markers',
            name='Reading',
            line=dict(color='var(--success-green)', width=3),
            marker=dict(size=8)
        ))
    
    fig_line.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family='Inter', color='var(--gray-700)'),
        showlegend=True,
        margin=dict(l=0, r=0, t=20, b=0),
        height=400,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        xaxis=dict(gridcolor='var(--gray-200)', showgrid=True),
        yaxis=dict(gridcolor='var(--gray-200)', showgrid=True, range=[65,90])
    )
    
    st.plotly_chart(fig_line, use_container_width=True)

def main():
    """Main application function"""
    # Render sidebar
    render_exact_sidebar() # Using render_exact_sidebar from utils.exact_ui

    # Check authentication
    if not is_authenticated():
        render_login_page() # Using render_login_page from utils.auth_utils
        return
    
    # Render dashboard
    render_dashboard_page_content() # Using the new function name

if __name__ == "__main__":
    main()
### FILE: pages/__init__.py

# Pages module for EduScan Somalia
### FILE: pages/01_Prediction.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date
import json
import os
import sys

# Append parent directory to sys.path to enable importing from utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.model_utils import load_model, make_prediction
from utils.data_utils import save_prediction_data, load_student_data
from utils.image_base64 import get_base64_images # Only need this for the image dict
from utils.language_utils import get_text, load_app_settings, save_app_settings

# Corrected: All UI functions now imported from utils.exact_ui
from utils.exact_ui import (
    add_exact_ui_styles, # Apply overall app styles
    render_exact_sidebar, # Sidebar structure and fixed content, including settings
    render_exact_page_header, # Global header rendering function (without settings button)
    create_exact_metric_card, # Helper for individual stat cards (used on Dashboard)
    create_exact_chart_container, # Helper for chart containers
    get_b64_image_html # Helper for rendering base64 images within HTML
)
from utils.auth_utils import is_authenticated, render_login_page, logout_user, get_user_role # Import auth utilities
from utils.icon_utils import get_material_icon_html # NEW: Import for specific Material Icons in content


# IMPORTANT: Page config MUST be the first Streamlit command for this page
st.set_page_config(
    page_title="EduScan Prediction - Learning Risk Assessment",
    page_icon="🔍", # Keep emoji for browser tab icon
    layout="wide",
    initial_sidebar_state="expanded"
)

# Apply modern UI styles - CRITICAL to be at the top of the script
add_exact_ui_styles()

# Initialize language and theme in session state (these are usually inherited from app.py)
if 'app_language' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_language'] = settings.get('language', 'English')
if 'app_theme' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_theme'] = settings.get('theme', 'Light')
if 'offline_mode' not in st.session_state:
    settings = load_app_settings()
    st.session_state['offline_mode'] = settings.get('offline_mode', False)

# Get current language
language = st.session_state.get('app_language', 'English')
current_theme = st.session_state.get('app_theme', 'Light')

# Apply theme-specific body attribute via JavaScript (important for dynamic theme changes)
st.markdown(f"""
    <script>
        document.body.setAttribute('data-theme', '{current_theme}');
    </script>
""", unsafe_allow_html=True)

# Render the sidebar for this page (from utils.exact_ui). This is called only once per rerun.
render_exact_sidebar()

def validate_inputs(math_score, reading_score, writing_score, attendance, behavior, literacy):
    """Validate all input parameters"""
    errors = []
    
    if not (0 <= math_score <= 100):
        errors.append("Math score must be between 0 and 100")
    if not (0 <= reading_score <= 100):
        errors.append("Reading score must be between 0 and 100")
    if not (0 <= writing_score <= 100):
        errors.append("Writing score must be between 0 and 100")
    if not (0 <= attendance <= 100):
        errors.append("Attendance must be between 0 and 100%")
    if not (1 <= behavior <= 5):
        errors.append("Behavior rating must be between 1 and 5")
    if not (1 <= literacy <= 10):
        errors.append("Literacy level must be between 1 and 10")
    
    return errors

def create_risk_visualization(prediction_prob, student_data):
    """Create visualization for risk assessment"""
    
    # Risk gauge chart
    fig_gauge = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = prediction_prob * 100,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Learning Difficulty Risk Level (%)"},
        delta = {'reference': 30},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 30], 'color': "lightgreen"},
                {'range': [30, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "red"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 70
            }
        }
    ))
    
    fig_gauge.update_layout(height=300)
    
    # Performance radar chart
    categories = ['Math Score', 'Reading Score', 'Writing Score', 'Attendance', 'Behavior*20', 'Literacy*10']
    values = [
        student_data['math_score'],
        student_data['reading_score'], 
        student_data['writing_score'],
        student_data['attendance'],
        student_data['behavior'] * 20,
        student_data['literacy'] * 10
    ]
    
    fig_radar = go.Figure()
    
    fig_radar.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Student Performance'
    ))
    
    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title="Student Performance Profile",
        height=400
    )
    
    return fig_gauge, fig_radar

def display_recommendations(risk_level, student_data):
    """Display personalized recommendations based on risk level"""
    
    if risk_level == get_text('low_risk', language):
        st.markdown(f" {get_material_icon_html('check_circle', style='fill')} **Low Risk** - {get_text('maintain_academic_support', language)}", unsafe_allow_html=True) # Changed from st.success
        recommendations = [
            "Maintain current learning pace and methods",
            "Continue regular progress monitoring",
            "Encourage continued engagement in all subjects",
            "Consider enrichment activities to challenge the student"
        ]
        color = "green"
    elif risk_level == get_text('medium_risk', language):
        st.markdown(f" {get_material_icon_html('warning', style='fill')} **Medium Risk** - {get_text('provide_targeted_interventions', language)} recommended", unsafe_allow_html=True) # Changed from st.warning
        recommendations = [
            "Implement targeted interventions in lower-performing areas",
            "Increase frequency of progress monitoring",
            "Consider additional support in specific subjects",
            "Engage parents in home-based learning activities",
            "Explore different teaching methods and materials"
        ]
        color = "orange"
    else:
        st.markdown(f" {get_material_icon_html('error', style='fill')} **High Risk** - {get_text('implement_intensive_program', language)} required", unsafe_allow_html=True) # Changed from st.error
        recommendations = [
            "Initiate comprehensive assessment by learning specialists",
            "Implement intensive intervention strategies",
            "Consider individualized education plan (IEP)",
            "Increase collaboration between teachers and parents",
            "Explore assistive technologies and adaptive methods",
            "Regular monitoring and adjustment of intervention strategies"
        ]
        color = "red"
    
    st.markdown(f"### {get_text('recommendations', language)}")
    for i, rec in enumerate(recommendations, 1):
        st.write(f"• {rec}")


def main():
    # Authentication check for the page
    if not is_authenticated():
        st.warning("Please log in to access the Prediction page.")
        st.switch_page("app.py") # Redirect to login page
        return # Stop further execution
    
    # Render main app header with dynamic content (from utils.exact_ui)
    render_exact_page_header(get_material_icon_html('search'), 'assessment_form', 'empowering_student_success', language)
    
    # Add authentic student images for the hero section
    b64_images = get_base64_images() # Load all base64 images

    col_img1, col_img2, col_img3 = st.columns([1, 2, 1])
    with col_img2:
        # Using 'teacher_with_students' which is a good fit from your pictures
        st.markdown(f'<div class="hero-image-container">{get_b64_image_html(b64_images.get("teacher_with_students", ""), "Students learning together", cover_mode=True, aspect_ratio="2.5/1")}</div>', unsafe_allow_html=True) # Explicit aspect ratio for hero

    
    # Student showcase section
    st.markdown(f"""
    <div class="input-section">
        <h2 class="highlight-text">{get_text('empowering_student_success', language)}</h2>
        <div class="student-showcase">
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add student image gallery (using diverse images from pictures folder)
    st.markdown("### Student Assessment Success")
    
    # Use image-gallery-grid for these and individual image-aspect-ratio-container
    st.markdown(f"""
    <div class="image-gallery-grid">
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("smiling_girl", ""), "Learning success", aspect_ratio="4/3")}</div>
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("girls_in_class", ""), "Classroom activity", aspect_ratio="4/3")}</div>
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("three_somali_girls", ""), "Focused learners", aspect_ratio="4/3")}</div>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar for prediction options (this is specific to the Prediction page, so it stays here)
    with st.sidebar:
        st.markdown("### Prediction Options")
        
        # Define prediction types based on user role
        available_prediction_types = ["Single Student", "Historical Analysis"]
        user_role = get_user_role()
        if user_role in ['teacher', 'admin']:
            available_prediction_types.insert(1, "Batch Upload") # Insert after "Single Student"
            
        prediction_type = st.selectbox(
            "Choose prediction type:",
            available_prediction_types,
            key="prediction_type_selector" # Added key for stability
        )
        
        # Model information panel
        st.markdown("### Model Information")
        st.info("""
        **Your Trained Model Active**
        
        - **Type**: RandomForest Classifier
        - **Features**: 6 key metrics
        - **Normalization**: StandardScaler
        - **Training**: GridSearchCV optimized
        - **Status**: Ready for predictions
        """)
        
        # Show model features
        st.markdown("**Input Features:**")
        features = [
            "Math Score (0-100)",
            "Reading Score (0-100)", 
            "Writing Score (0-100)",
            "Attendance Rate (%)",
            "Behavior Score (1-5)",
            "Literacy Level (1-10)"
        ]
        for feature in features:
            st.markdown(f"• {feature}")
            
        # Performance note
        st.success("Model loaded successfully from your notebook specifications")
        
        # Moved batch file uploader inside the condition, so it only shows when selected
        uploaded_file = None # Initialize uploaded_file outside if-block
        if prediction_type == "Batch Upload":
            st.markdown("#### Upload CSV File")
            uploaded_file = st.file_uploader(
                "Upload student data (CSV)",
                type=['csv'],
                help="CSV should contain columns: math_score, reading_score, writing_score, attendance, behavior, literacy",
                key="prediction_batch_uploader" # Added unique key for stability
            )
        # No need for an else here, uploaded_file remains None if Batch Upload is not selected or file not uploaded


    # --- Content for Prediction Page based on prediction_type ---
    if prediction_type == "Single Student":
        # Single student prediction form
        # Get reset counter for unique widget keys
        reset_counter = st.session_state.get('reset_counter', 0)
        
        st.markdown(f"""
        <div class="input-section">
            <h2 class="highlight-text">{get_text('assessment_form', language)}</h2>
            <p style="font-size: 1.1em; margin-bottom: 2rem; color: var(--gray-700);">
                {get_text('comprehensive_assessment', language)}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Load base64 images for section headers
        b64_images = get_base64_images() # Re-load here if needed, or pass b64_images from outside main() if they are static

        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class="input-section">
                <h3 class="highlight-text">{get_text('academic_performance', language)}</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images['academic_performance'], get_text('academic_performance', language))}</div>
            </div>
            """, unsafe_allow_html=True)
            # Academic inputs as number boxes (matching PyQt5 design)  
            math_score = st.number_input(get_text('math_score', language), min_value=0, max_value=100, value=75, step=1, key=f"math_score_input_{reset_counter}")
            reading_score = st.number_input(get_text('reading_score', language), min_value=0, max_value=100, value=80, step=1, key=f"reading_score_input_{reset_counter}")
            writing_score = st.number_input(get_text('writing_score', language), min_value=0, max_value=100, value=70, step=1, key=f"writing_score_input_{reset_counter}")
            
        with col2:
            st.markdown(f"""
            <div class="input-section">
                <h3 class="highlight-text">{get_text('behavioral_social_indicators', language)}</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images['behavioral_social'], get_text('behavioral_social_indicators', language))}</div>
            </div>
            """, unsafe_allow_html=True)
            attendance = st.slider(get_text('attendance', language), 0, 100, 85, help="Percentage of school days attended", key=f"attendance_slider_{reset_counter}")
            behavior_options = [f"1 - {get_text('poor', language)}", f"2 - {get_text('below_average', language)}", f"3 - {get_text('average', language)}", f"4 - {get_text('good', language)}", f"5 - {get_text('excellent', language)}"]
            behavior_selection = st.select_slider(get_text('behavior_rating', language), options=behavior_options, value=f"3 - {get_text('average', language)}", 
                                                 help="Select the student's typical classroom behavior", key=f"behavior_slider_{reset_counter}")
            behavior = int(behavior_selection.split(' ')[0])  # Extract the number
            literacy_options = [f'{i} - {"Beginner" if i <= 3 else "Developing" if i <= 6 else "Advanced"}' for i in range(1, 11)]
            literacy_selection = st.select_slider(get_text('literacy_level', language), options=literacy_options, value="6 - Developing",
                                                help="Select the student's reading and literacy level", key=f"literacy_slider_{reset_counter}")
            literacy = int(literacy_selection.split(' ')[0])  # Extract the number
        
        # Enhanced student information section
        
        st.markdown(f"""
        <div class="input-section">
            <h3 class="highlight-text">Student Information</h3>
            <div class="image-gallery-grid">
                <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('smiling_girl', ''), "Somali Student Portrait", aspect_ratio="4/3")}</div>
                <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('girl_reading_book', ''), "Student Learning", aspect_ratio="4/3")}</div>
                <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('academic_performance', ''), "Exam Students", aspect_ratio="4/3")}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        col3, col4 = st.columns(2)
        
        with col3:
            student_name = st.text_input(get_text('student_name', language), help="For record keeping and tracking purposes", key=f"student_name_input_{reset_counter}")
            grade_level = st.selectbox(get_text('grade_level', language), ["Pre-K", "K", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], key=f"grade_level_select_{reset_counter}")
        
        with col4:
            notes = st.text_area("Teacher notes", placeholder="Teacher notes…", help="Any relevant observations", height=100, key=f"teacher_notes_input_{reset_counter}")
        
        # Action buttons
        col1, col2, col3 = st.columns(3)
        
        with col1:
            predict_button = st.button(get_text('analyze_learning_risk', language), type="primary", use_container_width=True)
        
        with col2:
            reset_button = st.button(get_text('clear_form', language), use_container_width=True)
        
        with col3:
            save_button = st.button("Save Data", use_container_width=True)
        
        if reset_button:
            # Clear ALL session state completely for a fresh start
            all_keys = list(st.session_state.keys())
            
            # Keep only essential app settings
            keys_to_keep = ['app_language', 'app_theme', 'offline_mode', 'authenticated', 'username', 'role'] # Keep auth status
            
            for key in all_keys:
                if key not in keys_to_keep:
                    del st.session_state[key]
            
            # Increment reset counter to force widget recreation with new keys
            if 'reset_counter' not in st.session_state:
                st.session_state['reset_counter'] = 0
            st.session_state['reset_counter'] += 1
            
            st.success("✅ Form completely reset! Ready for new student assessment.")
            st.rerun()
        
        # Only show results if analysis has been run and form hasn't been reset
        show_results = st.session_state.get('show_prediction_results', False)
        
        if predict_button:
            # Validate inputs
            errors = validate_inputs(math_score, reading_score, writing_score, attendance, behavior, literacy)
            
            if errors:
                st.error(f"{get_material_icon_html('error', style='fill')} {get_text('please_correct_errors', language)}", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                for error in errors:
                    st.write(f"• {error}") # st.write for plain text errors
            else:
                # Make prediction
                student_data = {
                    'math_score': math_score,
                    'reading_score': reading_score,
                    'writing_score': writing_score,
                    'attendance': attendance,
                    'behavior': behavior,
                    'literacy': literacy
                }
                
                try:
                    prediction, prediction_prob = make_prediction(student_data) 
                    
                    # Store results and set flag to show them
                    st.session_state['show_prediction_results'] = True
                    st.session_state['current_prediction_data'] = {
                        'prediction': prediction,
                        'prediction_prob': prediction_prob,
                        'student_data': student_data,
                        'student_name': student_name,
                        'grade_level': grade_level,
                        'notes': notes
                    }
                    
                    # Enhanced results display
                    st.markdown(f"""
                    <div class="results-section">
                        <h2 class="highlight-text">{get_text('assessment_results', language)}</h2>
                        <div class="image-gallery-grid">
                            <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('exam_students', ''), "Exam Students", aspect_ratio="4/3")}</div>
                            <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('student_writing', ''), "Student Writing", aspect_ratio="4/3")}</div>
                            <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('student_portrait', ''), "Student Portrait", aspect_ratio="4/3")}</div>
                        </div>
                        <p style="font-size: 1.2em; text-align: center; color: var(--gray-700); margin-bottom: 2rem;">
                            <strong>{get_text('comprehensive_assessment', language)} {student_name if student_name else "the student"}</strong>
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Determine risk level
                    if prediction_prob < 0.3:
                        risk_level = get_text('low_risk', language)
                        risk_color = "var(--success-green)" # Use CSS variable
                        risk_icon_html = get_material_icon_html('check_circle', style='fill') # Material Icon
                    elif prediction_prob < 0.7:
                        risk_level = get_text('medium_risk', language)
                        risk_color = "var(--warning-orange)" # Use CSS variable
                        risk_icon_html = get_material_icon_html('warning', style='fill') # Material Icon
                    else:
                        risk_level = get_text('high_risk', language)
                        risk_color = "var(--danger-red)" # Use CSS variable
                        risk_icon_html = get_material_icon_html('error', style='fill') # Material Icon
                    
                    # Risk level display (uses st.markdown for HTML control)
                    st.markdown(f"""
                    <div style="text-align: center; background: linear-gradient(135deg, {risk_color}20, {risk_color}30); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; color: {risk_color};">
                        <h3>{risk_icon_html} {get_text('risk_level', language)}: {risk_level}</h3>
                        <p>{get_text('confidence', language)}: {prediction_prob:.1%}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Create visualizations
                    fig_gauge, fig_radar = create_risk_visualization(prediction_prob, student_data)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.plotly_chart(fig_gauge, use_container_width=True)
                    with col2:
                        st.plotly_chart(fig_radar, use_container_width=True)
                    
                    # Display recommendations
                    st.markdown(f"""
                    <div class="results-section">
                        <h3 class="highlight-text">{get_text('personalized_intervention_recommendations', language)}</h3>
                        <div class="hero-image-container object-fit-cover-mode">
                            {get_b64_image_html(b64_images.get('somali_children_in_class', ''), "Somali children in class", cover_mode=True)}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    display_recommendations(risk_level, student_data)
                    
                    # Enhanced summary table
                    st.markdown(f"""
                    <div class="results-section">
                        <h3 class="highlight-text">{get_text('assessment_summary', language)}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                    summary_data = {
                        "Assessment Area": ["Mathematics", "Reading", "Writing", "Attendance", "Behavior", "Literacy", "Overall Risk", "AI Confidence"],
                        "Score/Rating": [f"{math_score}%", f"{reading_score}%", f"{writing_score}%", f"{attendance}%", f"{behavior}/5", f"{literacy}/10", risk_level, f"{prediction_prob:.1%}"]
                    }
                    st.table(pd.DataFrame(summary_data))
                    
                    # Save prediction option
                    if save_button or st.button(" Save This Prediction", key=f"save_button_after_predict_{reset_counter}"):
                        prediction_record = {
                            "timestamp": datetime.now().isoformat(),
                            "student_name": student_name,
                            "grade_level": grade_level,
                            "prediction": prediction,
                            "probability": prediction_prob,
                            "risk_level": risk_level,
                            "notes": notes,
                            **student_data
                        }
                        save_prediction_data(prediction_record)
                        st.success(" Prediction saved successfully!") # st.success for plain text
                
                except Exception as e:
                    st.error(f"{get_material_icon_html('error', style='fill')} Error making prediction: {str(e)}", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                    st.info("Note: Using sample prediction model. Replace with your trained model file.")
        
        # Display results only if they exist and haven't been cleared
        if show_results and 'current_prediction_data' in st.session_state and not predict_button: # Only show if not a new prediction trigger
            pred_data = st.session_state['current_prediction_data']
            prediction = pred_data['prediction']
            prediction_prob = pred_data['prediction_prob']
            student_data = pred_data['student_data']
            student_name = pred_data['student_name']
            grade_level = pred_data['grade_level']
            notes = pred_data['notes']
            
            # Get base64 images
            b64_images = get_base64_images()
            
            # Enhanced results display
            st.markdown(f"""
            <div class="results-section">
                <h2 class="highlight-text">{get_text('assessment_results', language)}</h2>
                <div class="image-gallery-grid">
                    <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('exam_students', ''), "Exam Students", aspect_ratio="4/3")}</div>
                    <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('student_writing', ''), "Student Writing", aspect_ratio="4/3")}</div>
                    <div class="image-aspect-ratio-container">{get_b64_image_html(b64_images.get('student_portrait', ''), "Student Portrait", aspect_ratio="4/3")}</div>
                </div>
                <p style="font-size: 1.2em; text-align: center; color: var(--gray-700); margin-bottom: 2rem;">
                    <strong>{get_text('comprehensive_assessment', language)} {student_name if student_name else "the student"}</strong>
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            # Determine risk level
            if prediction_prob < 0.3:
                risk_level = get_text('low_risk', language)
                risk_color = "var(--success-green)"
                risk_icon_html = get_material_icon_html('check_circle', style='fill') # Material Icon
            elif prediction_prob < 0.7:
                risk_level = get_text('medium_risk', language)
                risk_color = "var(--warning-orange)"
                risk_icon_html = get_material_icon_html('warning', style='fill') # Material Icon
            else:
                risk_level = get_text('high_risk', language)
                risk_color = "var(--danger-red)"
                risk_icon_html = get_material_icon_html('error', style='fill') # Material Icon
            
            # Risk level display (uses st.markdown for HTML control)
            st.markdown(f"""
            <div style="text-align: center; background: linear-gradient(135deg, {risk_color}20, {risk_color}30); padding: 1rem; border-radius: 8px; margin-bottom: 1rem; color: {risk_color};">
                <h3>{risk_icon_html} {get_text('risk_level', language)}: {risk_level}</h3>
                <p>{get_text('confidence', language)}: {prediction_prob:.1%}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Create visualizations
            fig_gauge, fig_radar = create_risk_visualization(prediction_prob, student_data)
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_gauge, use_container_width=True)
            with col2:
                st.plotly_chart(fig_radar, use_container_width=True)
            
            # Display recommendations
            st.markdown(f"""
            <div class="results-section">
                <h3 class="highlight-text">{get_text('personalized_intervention_recommendations', language)}</h3>
                <div class="hero-image-container object-fit-cover-mode">
                    {get_b64_image_html(b64_images.get('somali_children_in_class', ''), "Somali children in class", cover_mode=True)}
                </div>
            </div>
            """, unsafe_allow_html=True)
            display_recommendations(risk_level, student_data)
            
            # Enhanced summary table
            st.markdown(f"""
            <div class="results-section">
                <h3 class="highlight-text">{get_text('assessment_summary', language)}</h3>
            </div>
            """, unsafe_allow_html=True)
            summary_data = {
                "Assessment Area": ["Mathematics", "Reading", "Writing", "Attendance", "Behavior", "Literacy", "Overall Risk", "AI Confidence"],
                "Score/Rating": [f"{student_data['math_score']}%", f"{student_data['reading_score']}%", f"{student_data['writing_score']}%", 
                               f"{student_data['attendance']}%", f"{student_data['behavior']}/5", f"{student_data['literacy']}/10", 
                               risk_level, f"{prediction_prob:.1%}"]
            }
            st.table(pd.DataFrame(summary_data))
            
            # Save prediction option
            if save_button or st.button(" Save This Prediction", key=f"save_button_after_predict_rerun_{reset_counter}"):
                prediction_record = {
                    "timestamp": datetime.now().isoformat(),
                    "student_name": student_name,
                    "grade_level": grade_level,
                    "prediction": prediction,
                    "probability": prediction_prob,
                    "risk_level": risk_level,
                    "notes": notes,
                    **student_data
                }
                save_prediction_data(prediction_record)
                st.success(" Prediction saved successfully!") # st.success for plain text
    
    # --- Batch Upload Section ---
    elif prediction_type == "Batch Upload":
        # The uploaded_file variable from sidebar is used here
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                st.success(f" Uploaded file with {len(df)} students") # st.success for plain text
                
                # Validate required columns
                required_columns = ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy']
                missing_columns = [col for col in required_columns if col not in df.columns]
                
                if missing_columns:
                    st.error(f"{get_material_icon_html('error', style='fill')} Missing required columns: {', '.join(missing_columns)}", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                else:
                    # Show preview
                    st.markdown("### Data Preview")
                    st.dataframe(df.head())
                    
                    if st.button("Process Batch Predictions", key="process_batch_predictions_button"): # Added unique key
                        progress_bar = st.progress(0)
                        results = []
                        
                        for idx, row in df.iterrows():
                            try:
                                prediction, prediction_prob = make_prediction(row.to_dict()) # Pass row as dict
                                
                                if prediction_prob < 0.3:
                                    risk_level = "Low Risk"
                                elif prediction_prob < 0.7:
                                    risk_level = "Medium Risk"
                                else:
                                    risk_level = "High Risk"
                                
                                results.append({
                                    'Student_ID': idx + 1,
                                    'Risk_Level': risk_level,
                                    'Risk_Probability': f"{prediction_prob:.1%}",
                                    **row.to_dict() # Include all original row data
                                })
                                
                                progress_bar.progress((idx + 1) / len(df))
                            
                            except Exception as e:
                                st.error(f"Error processing student {idx + 1}: {str(e)}") # st.error for plain text
                        
                        # Display results
                        results_df = pd.DataFrame(results)
                        st.markdown("### Batch Prediction Results")
                        st.dataframe(results_df)
                        
                        # Summary statistics
                        risk_counts = results_df['Risk_Level'].value_counts()
                        fig_pie = px.pie(values=risk_counts.values, names=risk_counts.index, 
                                        title="Risk Level Distribution")
                        st.plotly_chart(fig_pie, use_container_width=True)
                        
                        # Download results
                        csv = results_df.to_csv(index=False)
                        st.download_button(
                            label="📥 Download Results",
                            data=csv,
                            file_name=f"learning_risk_predictions_{datetime.now().strftime('%Y%m%d')}.csv",
                            mime="text/csv",
                            key="download_batch_results_button" # Added unique key
                        )
            
            except Exception as e:
                st.error(f" {get_material_icon_html('error', style='fill')} Error reading file: {str(e)}", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
        else:
            st.info("Please upload a CSV file to begin batch processing")
    
    # --- Historical Analysis Section ---
    else:  # Historical Analysis
        st.markdown("###  Historical Analysis")
        historical_data = load_student_data()
        
        if historical_data:
            df_historical = pd.DataFrame(historical_data)
            
            # Convert timestamp to datetime
            df_historical['timestamp'] = pd.to_datetime(df_historical['timestamp'])
            
            # Analysis options
            analysis_type = st.selectbox(
                "Select analysis type:",
                ["Risk Trends Over Time", "Performance Correlation", "Student Progress Tracking"],
                key="historical_analysis_type_selector" # Added unique key
            )
            
            if analysis_type == "Risk Trends Over Time":
                # Group by date and risk level
                daily_risks = df_historical.groupby([df_historical['timestamp'].dt.date, 'risk_level']).size().unstack(fill_value=0)
                
                fig_trend = px.line(daily_risks, title="Risk Level Trends Over Time")
                st.plotly_chart(fig_trend, use_container_width=True)
            
            elif analysis_type == "Performance Correlation":
                # Correlation matrix
                numeric_cols = ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy', 'probability']
                if all(col in df_historical.columns for col in numeric_cols):
                    corr_matrix = df_historical[numeric_cols].corr()
                    fig_heatmap = px.imshow(corr_matrix, text_auto=True, title="Performance Correlation Matrix")
                    st.plotly_chart(fig_heatmap, use_container_width=True)
            
            elif analysis_type == "Student Progress Tracking":
                if 'student_name' in df_historical.columns:
                    student_names = df_historical['student_name'].dropna().unique()
                    selected_student = st.selectbox("Select student:", student_names, key="student_progress_tracking_selector") # Added unique key
                    
                    if selected_student:
                        student_progress = df_historical[df_historical['student_name'] == selected_student].sort_values('timestamp')
                        
                        if len(student_progress) > 1:
                            fig_progress = px.line(student_progress, x='timestamp', y='probability', 
                                                 title=f"Risk Probability Trend for {selected_student}")
                            st.plotly_chart(fig_progress, use_container_width=True)
                        else:
                            st.info("Not enough data points for trend analysis")
        else:
            st.info("No historical data available. Make some predictions first!")

    # Footer with tips
    st.markdown("---")
    st.markdown(f"### {get_material_icon_html('lightbulb_circle', style='fill')} Tips for Accurate Predictions", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
    st.markdown("""
    - **Regular Updates**: Update student data regularly for more accurate tracking
    - **Multiple Indicators**: Consider all factors, not just academic scores
    - **Context Matters**: Add relevant notes about external factors
    - **Follow-up**: Use predictions as starting points for deeper assessment
    """)

if __name__ == "__main__":
    main()
### FILE: pages/02_Teacher_Resources.py

import streamlit as st
import pandas as pd
import json
from datetime import datetime
import random
import sys
import os

# Append parent directory to sys.path to enable importing from utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.image_base64 import get_base64_images # Only need this for the image dict
from utils.language_utils import get_text, load_app_settings, save_app_settings

# Corrected: All UI functions now imported from utils.exact_ui
from utils.exact_ui import (
    add_exact_ui_styles,
    render_exact_sidebar,
    render_exact_page_header,
    create_exact_metric_card,
    create_exact_chart_container,
    get_b64_image_html
)
from utils.auth_utils import is_authenticated, render_login_page, logout_user, get_user_role
from utils.icon_utils import ( # Import for specific Material Icons in content
    get_material_icon_html, get_lightbulb_icon, get_rocket_icon, get_puzzle_icon, get_brain_icon,
    get_ruler_icon, get_gamepad_icon, get_book_icon, get_laptop_icon, get_handshake_icon,
    get_school_icon
)


# IMPORTANT: Page config MUST be the first Streamlit command for this page
st.set_page_config(
    page_title="EduScan Teacher Resources",
    page_icon="👨‍🏫", # Keep emoji for browser tab icon
    layout="wide",
    initial_sidebar_state="expanded"
)

# Apply modern UI styles - CRITICAL to be at the top of the script
add_exact_ui_styles()

# Initialize language and theme in session state (these are usually inherited from app.py)
if 'app_language' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_language'] = settings.get('language', 'English')
if 'app_theme' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_theme'] = settings.get('theme', 'Light')
if 'offline_mode' not in st.session_state:
    settings = load_app_settings()
    st.session_state['offline_mode'] = settings.get('offline_mode', False)

# Get current language
language = st.session_state.get('app_language', 'English')
current_theme = st.session_state.get('app_theme', 'Light')

# Apply theme-specific body attribute via JavaScript (important for dynamic theme changes)
st.markdown(f"""
    <script>
        document.body.setAttribute('data-theme', '{current_theme}');
    </script>
""", unsafe_allow_html=True)

# Render the sidebar for this page (from utils.exact_ui). This is called only once per rerun.
render_exact_sidebar()

def generate_activity(difficulty_type, grade_level):
    """Generate a random educational activity based on difficulty type and grade level"""
    
    activities = {
        "reading": {
            "K-2": [
                "Picture book discussion with visual cues",
                "Letter sound matching games",
                "Simple word building with letter tiles",
                "Reading comprehension with picture support",
                "Phonics songs and rhyming activities"
            ],
            "3-5": [
                "Graphic organizer for story elements",
                "Vocabulary word maps with illustrations",
                "Partner reading with guided questions",
                "Reading response journals with prompts",
                "Text-to-self connection activities"
            ],
            "6-8": [
                "Literature circles with differentiated roles",
                "Character analysis using graphic organizers",
                "Compare and contrast essays with templates",
                "Research projects with structured guidelines",
                "Reading strategy instruction (summarizing, questioning)"
            ]
        },
        "math": {
            "K-2": [
                "Hands-on counting with manipulatives",
                "Visual number line activities",
                "Shape recognition through real-world objects",
                "Simple addition/subtraction with pictures",
                "Math story problems with visual supports"
            ],
            "3-5": [
                "Fraction circles and visual representations",
                "Word problem solving with step-by-step guides",
                "Math journals for problem-solving strategies",
                "Multiplication games with visual arrays",
                "Real-world math applications (cooking, shopping)"
            ],
            "6-8": [
                "Algebra tiles for equation solving",
                "Geometric constructions with technology",
                "Data analysis projects with real data",
                "Mathematical modeling activities",
                "Peer tutoring for complex problem solving"
            ]
        },
        "writing": {
            "K-2": [
                "Picture prompts for creative writing",
                "Sentence frames for structured writing",
                "Interactive writing with teacher support",
                "Story sequencing activities",
                "Simple poetry with repetitive patterns"
            ],
            "3-5": [
                "Graphic organizer for essay planning",
                "Peer editing with specific checklists",
                "Multi-step writing process instruction",
                "Genre studies with mentor texts",
                "Writing conferences with guided feedback"
            ]
        },
        "behavior": {
            "All": [
                "Positive behavior reinforcement system",
                "Clear classroom expectations with visual reminders",
                "Break cards for self-regulation",
                "Mindfulness and breathing exercises",
                "Social skills practice through role-play",
                "Sensory break activities",
                "Peer mentoring programs",
                "Goal-setting and progress tracking",
                "Conflict resolution strategies",
                "Emotional regulation techniques"
            ]
        }
    }
    
    if difficulty_type == "behavior":
        return random.choice(activities[difficulty_type]["All"])
    else:
        grade_group = "K-2" if grade_level in ["K", "1", "2"] else "3-5" if grade_level in ["3", "4", "5"] else "6-8"
        return random.choice(activities[difficulty_type].get(grade_group, activities[difficulty_type]["3-5"]))

def main():
    # Authentication check for the page
    if not is_authenticated():
        st.warning("Please log in to access Teacher Resources.")
        st.switch_page("app.py") # Redirect to login page
        return # Stop further execution

    # Role-based access control
    user_role = get_user_role()
    if user_role == 'parent':
        st.error("Access Denied: Parents cannot view Teacher Resources.")
        st.info("Redirecting you to Parent Tracker...")
        st.switch_page("pages/03_Parent_Tracker.py") # Redirect to their allowed page
        return # Stop further execution
        
    # Render main app header with dynamic content
    render_exact_page_header(get_material_icon_html('school'), 'teacher_resources', 'empowering_teachers', language)
    
    # Enhanced header for teacher resources
    st.markdown(f"""
    <div class="teacher-header">
        <h1>{get_text('excellence_in_education', language)}</h1>
        <h2>{get_text('empowering_teachers', language)}</h2>
        <p style="font-size: 1.2em; opacity: 0.9;">
            {get_text('professional_development', language)}
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Teacher showcase section with base64 images
    b64_images = get_base64_images()
    
    st.markdown(f"""
    <div class="resource-section">
        <h2 class="highlight-text">{get_text('supporting_every_teacher', language)}</h2>
        <div class="teacher-showcase">
            <div class="teacher-card">
                {get_b64_image_html(b64_images.get('inclusive_classroom_2', ''), "Inclusive classroom", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('inclusive_classroom_excellence', language)}</h4>
                <p>{get_text('create_learning_environments', language)}</p>
            </div>
            <div class="teacher-card">
                {get_b64_image_html(b64_images.get('professional_collaboration', ''), "Teacher collaboration", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('professional_collaboration', language)}</h4>
                <p>{get_text('build_strong_partnerships', language)}</p>
            </div>
            <div class="teacher-card">
                {get_b64_image_html(b64_images.get('engaging_strategies', ''), "Student engagement", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('engaging_learning_strategies', language)}</h4>
                <p>{get_text('implement_culturally_responsive', language)}</p>
            </div>
            <div class="teacher-card">
                {get_b64_image_html(b64_images.get('assessment_innovation', ''), "Assessment strategies", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('assessment_innovation', language)}</h4>
                <p>{get_text('use_multiple_assessment', language)}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add authentic teaching images
    st.markdown(f"### {get_text('teaching_excellence_showcase', language)}")
    
    st.markdown(f"""
    <div class="image-gallery-grid">
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get('exam_students', ''), "Classroom Excellence", aspect_ratio="4/3")}</div>
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get('happy_young_students', ''), "Student Engagement", aspect_ratio="4/3")}</div>
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get('focused_student', ''), "Learning Focus", aspect_ratio="4/3")}</div>
        <div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get('student_portrait', ''), "Academic Growth", aspect_ratio="4/3")}</div>
    </div>
    """, unsafe_allow_html=True)

    st.subheader(f"📚 {get_text('resource_categories', language)}")
    tab1, tab2, tab3 = st.tabs([get_text('teaching_strategies', language), get_text('learning_activities', language), get_text('assessment_tools', language)])
    
    with tab1:
        st.subheader(f"🎯 {get_text('differentiated_learning_strategies', language)}")
        
        difficulty_level = st.selectbox(get_text('target_difficulty', language), 
                                      ["Beginner", "Intermediate", "Advanced"], key="res_diff_lvl_teacher_page") # Unique key
        subject_area = st.selectbox(get_text('subject_area', language), 
                                  ["Mathematics", "Language Arts", "Science", "Social Studies"], key="res_subj_area_teacher_page") # Unique key
        
        if st.button(get_text('generate_teaching_strategy', language), key="gen_strat_btn_teacher_page"): # Unique key
            strategies = {
                "Mathematics": [
                    "Use visual aids and manipulatives for concrete learning",
                    "Implement peer tutoring and collaborative problem solving",
                    "Break complex problems into smaller, manageable steps",
                    "Use real-world applications to make math relevant"
                ],
                "Language Arts": [
                    "Implement guided reading with level-appropriate texts",
                    "Use graphic organizers for writing structure",
                    "Encourage creative storytelling and expression",
                    "Practice phonics through interactive games"
                ],
                "Science": [
                    "Conduct hands-on experiments and demonstrations",
                    "Use scientific method for structured learning",
                    "Integrate technology for virtual lab experiences",
                    "Connect science concepts to everyday life"
                ],
                "Social Studies": [
                    "Use maps and timelines for visual learning",
                    "Implement role-playing historical scenarios",
                    "Encourage cultural exchange and discussion",
                    "Connect historical events to current events"
                ]
            }
            
            if subject_area in strategies:
                st.success(f"{get_material_icon_html('check_circle')} {get_text('strategy_generated', language)}", unsafe_allow_html=True)
                for i, strategy in enumerate(strategies[subject_area][:3], 1): # Display first 3 strategies
                    st.write(f"• {strategy}")
            else:
                st.info(f"{get_material_icon_html('info')} No specific strategies found for this subject. Please select a different one.", unsafe_allow_html=True) # Added Material Icon + unsafe_allow_html
        
        st.markdown("""
        #### **Universal Design for Learning (UDL) Principles:**
        
        **Multiple Means of Representation**
        - Present information in various formats (visual, auditory, hands-on)
        - Use multimedia resources
        - Provide background knowledge activation
        - Offer multiple examples and non-examples
        
        **⚡ Multiple Means of Engagement**
        - Offer choices in topics, tools, and learning environment
        - Connect to student interests and cultural backgrounds
        - Provide appropriate challenges for all learners
        - Foster collaboration and community
        
        **🛠️ Multiple Means of Expression**
        - Allow various ways to demonstrate knowledge
        - Provide options for physical action and movement
        - Support planning and strategy development
        - Use assistive technologies as needed
        """)

        # Inclusive Classroom Tips
        st.markdown(f"### {get_material_icon_html('lightbulb')} {get_text('inclusive_classroom_tips', language)}", unsafe_allow_html=True)
        st.markdown("""
        **🌈 Creating an Inclusive Environment**
        - Flexible seating options (standing desks, stability balls, quiet corners)
        - Clear visual schedules and expectations posted
        - Sensory-friendly spaces for breaks
        - Well-organized materials with visual labels
        - Adequate lighting and minimal distractions
        
        **🤝 Collaboration Strategies**
        - Regular co-planning sessions with special education teachers
        - Consistent communication with parents about student progress
        - Joint problem-solving for challenges
        """)
        
        with st.expander("Daily Inclusive Practices Checklist"):
            st.markdown("""
            - [ ] Provided multiple ways to access content today?
            - [ ] Offered choices in how students demonstrated learning?
            - [ ] Checked in with students who needed extra support?
            - [ ] Celebrated diverse contributions and perspectives?
            """)

    with tab2: # Learning Activities Tab
        st.subheader(f"🎮 {get_text('interactive_learning_activities', language)}")
        
        difficulty_type_act = st.selectbox("Select area of difficulty for activity:",
                                           ["reading", "math", "writing", "behavior"], key="act_difficulty_type_teacher_page_tab2") # Unique key
        grade_level_act = st.selectbox("Select grade level for activity:",
                                        ["K", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], key="act_grade_level_teacher_page_tab2") # Unique key
        group_size_act = st.selectbox("Group size for activity:",
                                       ["Individual", "Small Group (2-4)", "Large Group (5+)", "Whole Class"], key="act_group_size_teacher_page_tab2") # Unique key
        time_available_act = st.selectbox("Time available for activity:",
                                          ["5-10 minutes", "15-20 minutes", "30+ minutes", "Full lesson"], key="act_time_available_teacher_page_tab2") # Unique key

        if st.button(get_text('generate_activity_ideas', language), key="gen_act_btn_teacher_page_tab2_unique"): # Unique key for this button
            activity = generate_activity(difficulty_type_act, grade_level_act)
            
            st.markdown("### Generated Activity")
            st.info(f"**Activity**: {activity}")
            
            materials = ["Whiteboard", "Markers", "Flashcards", "Worksheets"] # Default materials
            objectives = ["Skill practice", "Concept reinforcement"] # Default objectives
            
            if difficulty_type_act == "reading":
                materials = ["Leveled books", "Graphic organizers", "Vocabulary cards", "Audio recordings"]
                objectives = ["Improve decoding skills", "Enhance comprehension", "Build vocabulary", "Increase fluency"]
            elif difficulty_type_act == "math":
                materials = ["Manipulatives", "Calculator", "Graph paper", "Visual aids"]
                objectives = ["Build number sense", "Improve problem-solving", "Practice facts", "Understand concepts"]
            elif difficulty_type_act == "writing":
                materials = ["Graphic organizers", "Word banks", "Sentence frames", "Editing checklists"]
                objectives = ["Improve organization", "Build vocabulary", "Practice mechanics", "Enhance creativity"]
            elif difficulty_type_act == "behavior":
                materials = ["Visual cues", "Timer", "Reward system", "Calm down area"]
                objectives = ["Self-regulation", "Social skills", "Focus attention", "Follow directions"]

            col_mat, col_obj = st.columns(2)
            with col_mat:
                st.markdown("**Materials Needed:**")
                for material in materials:
                    st.write(f"- {material}")
            with col_obj:
                st.markdown("**Learning Objectives:**")
                for obj in objectives:
                    st.write(f"- {obj}")

            st.markdown("### Adaptation Suggestions")
            adaptations = {
                "Individual": "Provide one-on-one support and immediate feedback.",
                "Small Group (2-4)": "Encourage peer collaboration and shared learning.",
                "Large Group (5+)": "Use cooperative learning structures and assign clear roles.",
                "Whole Class": "Implement universal supports and offer multiple participation pathways."
            }
            time_adaptations = {
                "5-10 minutes": "Focus on a single specific skill or concept with quick, targeted practice.",
                "15-20 minutes": "Include brief instruction, guided practice, and a quick reflection.",
                "30+ minutes": "Allow for deeper exploration, modeling, guided practice, and independent application.",
                "Full lesson": "Design a complete learning cycle from introduction to assessment and extension."
            }
            st.write(f"**Group Adaptation**: {adaptations.get(group_size_act, 'General adaptation applies.')}")
            st.write(f"**Time Adaptation**: {time_adaptations.get(time_available_act, 'General adaptation applies.')}")

    with tab3: # Assessment Tools Tab
        st.subheader(f"📝 {get_text('assessment_tools', language)}")
        
        assessment_type = st.selectbox(get_text('assessment_type', language), 
                                     ["Formative", "Summative", "Diagnostic"], key="assess_type_select_teacher_page_tab3") # Unique key
        
        if st.button(get_text('create_assessment', language), key="create_assess_btn_teacher_page_tab3_unique"): # Unique key
            st.success(f"{get_material_icon_html('assignment_add')} {get_text('assessment_template_created', language)}", unsafe_allow_html=True)
            st.write(f"• {get_text('clear_learning_objectives', language)}")
            st.write(f"• {get_text('multiple_question_formats', language)}")
            st.write(f"• {get_text('rubric_provided', language)}")
            st.write(f"• {get_text('differentiated_difficulty', language)}")

        # Intervention Techniques Section (moved here as a separate block to ensure it's not missed)
        st.markdown("---")
        st.subheader("Intervention Techniques")
        intervention_area_main = st.selectbox(
            "Select intervention focus:",
            ["Reading Interventions", "Math Interventions", "Behavioral Interventions", "Executive Function Support"],
            key="intervention_area_main_teacher_page" # Unique key
        )
        
        if intervention_area_main == "Reading Interventions":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Tier 2 & 3 Reading Interventions</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('girl_reading_book', ''), "Girl Reading Book", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Systematic Phonics Interventions**
            - **Orton-Gillingham Approach**: Multi-sensory phonics instruction
            - **Wilson Reading System**: Structured literacy program
            - **REWARDS**: Reading strategies for older students
            - **Duration**: 30-45 minutes daily, 12-16 weeks minimum
            
            #### **Fluency Interventions**
            - **Repeated Reading**: Practice with the same text multiple times
            - **Paired Reading**: Student and tutor read together
            - **Reader's Theater**: Performance-based fluency practice
            - **Goal**: Increase words per minute and expression
            
            #### **Comprehension Interventions**
            - **Reciprocal Teaching**: Students take turns leading discussions
            - **Graphic Organizers**: Visual supports for understanding
            - **Question-Answer Relationships**: Teaching question types
            - **Think-Alouds**: Modeling comprehension strategies
            """)
            
            # Interactive intervention tracker
            st.markdown(f"#### {get_material_icon_html('track_changes')} Intervention Progress Tracker", unsafe_allow_html=True)
            
            with st.form("reading_intervention_form_teacher_page"): # Unique key for form
                student_name_track = st.text_input("Student Name", key="read_int_student_name") # Unique key
                intervention_type_track = st.selectbox("Intervention Type", 
                    ["Phonics", "Fluency", "Comprehension", "Vocabulary"], key="read_int_type") # Unique key
                baseline_score_track = st.number_input("Baseline Score", min_value=0, max_value=100, key="read_int_baseline") # Unique key
                current_score_track = st.number_input("Current Score", min_value=0, max_value=100, key="read_int_current") # Unique key
                weeks_elapsed_track = st.number_input("Weeks of Intervention", min_value=1, max_value=52, key="read_int_weeks") # Unique key
                notes_track = st.text_area("Progress Notes", key="read_int_notes") # Unique key
                
                if st.form_submit_button("Track Progress"): # Unique key
                    progress = current_score_track - baseline_score_track
                    rate = progress / weeks_elapsed_track if weeks_elapsed_track > 0 else 0
                    
                    st.success(f"{get_material_icon_html('check_circle')} Progress tracked for {student_name_track}", unsafe_allow_html=True)
                    st.metric("Score Improvement", f"{progress} points", f"{rate:.1f} pts/week")
        
        elif intervention_area_main == "Math Interventions":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Intensive Math Interventions</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('abc_kids', ''), "ABC Kids Math", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Number Sense Interventions**
            - **Number Worlds**: Comprehensive number sense program
            - **TouchMath**: Multi-sensory approach to basic facts
            - **Number Line Activities**: Visual representation of number relationships
            - **Subitizing Practice**: Quick recognition of small quantities
            
            #### **Fact Fluency Interventions**
            - **Math Facts in a Flash**: Systematic fact practice
            - **Rocket Math**: Timed practice with progression
            - **Computer-Based Programs**: Adaptive fact practice
            - **Goal**: Automatic recall of basic facts
            
            #### **Problem-Solving Interventions**
            - **Schema-Based Instruction**: Teaching problem types
            - **Concrete-Representational-Abstract**: Gradual release model
            - **Math Talk**: Verbalization of thinking processes
            - **Error Analysis**: Learning from mistakes
            """)
        
        elif intervention_area_main == "Behavioral Interventions":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Behavioral Support Interventions</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('small_kids_and_teacher', ''), "Behavioral Interventions", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Positive Behavior Interventions and Supports (PBIS)**
            - **Tier 1**: Universal classroom management
            - **Tier 2**: Targeted group interventions
            - **Tier 3**: Intensive individual supports
            - **Focus**: Prevention and positive reinforcement
            
            #### **Self-Regulation Strategies**
            - **Zones of Regulation**: Emotional awareness and control
            - **Mindfulness Practices**: Breathing and centering techniques
            - **Break Cards**: Self-advocacy for regulation needs
            - **Goal Setting**: Student-directed behavior goals
            
            #### **Social Skills Interventions**
            - **Social Stories**: Narrative-based skill instruction
            - **Role Playing**: Practice in safe environments
            - **Peer Mediation**: Student-led conflict resolution
            - **Circle Time**: Community building and problem-solving
            """)
        
        else:  # Executive Function Support
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Executive Function Support</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('kindergarten', ''), "Executive Function", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Organization Strategies**
            - **Color-Coding Systems**: Different subjects, different colors
            - **Checklists and Templates**: Step-by-step guidance
            - **Digital Organization Tools**: Apps and platforms
            - **Clean Desk Policy**: Minimize distractions
            
            #### **Time Management Support**
            - **Visual Schedules**: Picture or text-based daily schedules
            - **Timer Use**: Breaking tasks into manageable chunks
            - **Transition Warnings**: 5-minute, 2-minute notices
            - **Priority Ranking**: Teaching importance vs. urgency
            
            #### **Working Memory Support**
            - **Chunking Information**: Breaking into smaller parts
            - **Rehearsal Strategies**: Repetition and practice
            - **External Memory Aids**: Notes, recordings, visuals
            - **Reduce Cognitive Load**: Simplify instructions
            """)
    
    # Footer with quick links
    st.markdown("---")
    st.markdown(f"### {get_material_icon_html('quick_reference')} Quick Resources", unsafe_allow_html=True) # Material Icon
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("Reading Strategies", use_container_width=True, key="quick_link_reading_teacher_page_footer"): # Unique key
            st.info("Comprehensive reading support strategies loaded above!")
    
    with col2:
        if st.button("Math Support", use_container_width=True, key="quick_link_math_teacher_page_footer"): # Unique key
            st.info("Mathematics intervention techniques displayed above!")
    
    with col3:
        if st.button("Writing Help", use_container_width=True, key="quick_link_writing_teacher_page_footer"): # Unique key
            st.info("Writing differentiation strategies shown above!")
    
    with col4: # Wrapped in a column to maintain grid structure, even if it's the last one
        if st.button("Behavior Tips", use_container_width=True, key="quick_link_behavior_teacher_page_footer"): # Unique key
            st.info("Behavioral intervention strategies provided above!")

if __name__ == "__main__":
    main()
### FILE: pages/03_Parent_Tracker.py

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, date, timedelta
import json
import os
import sys

# Append parent directory to sys.path to enable importing from utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.data_utils import save_parent_observation, load_parent_observations
from utils.image_base64 import get_base64_images # Only need this for the image dict
from utils.language_utils import get_text, load_app_settings, save_app_settings


# Corrected: All UI functions now imported from utils.exact_ui
from utils.exact_ui import (
    add_exact_ui_styles,
    render_exact_sidebar,
    render_exact_page_header,
    custom_alert,
    create_exact_metric_card,
    create_exact_chart_container,
    get_b64_image_html
)
from utils.auth_utils import is_authenticated, render_login_page, logout_user, get_user_role
from utils.icon_utils import get_material_icon_html # NEW: Import for specific Material Icons in content

# IMPORTANT: Page config MUST be the first Streamlit command for this page
st.set_page_config(
    page_title="EduScan Parent Tracker",
    page_icon="👨‍👩‍👧‍👦", # Keep emoji for browser tab icon
    layout="wide",
    initial_sidebar_state="expanded"
)

# Apply modern UI styles - CRITICAL to be at the top of the script
add_exact_ui_styles()

# Initialize language and theme in session state (these are usually inherited from app.py)
if 'app_language' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_language'] = settings.get('language', 'English')
if 'app_theme' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_theme'] = settings.get('theme', 'Light')
if 'offline_mode' not in st.session_state:
    settings = load_app_settings()
    st.session_state['offline_mode'] = settings.get('offline_mode', False)

# Get current language
language = st.session_state.get('app_language', 'English')
current_theme = st.session_state.get('app_theme', 'Light')

# Apply theme-specific body attribute via JavaScript (important for dynamic theme changes)
st.markdown(f"""
    <script>
        document.body.setAttribute('data-theme', '{current_theme}');
    </script>
""", unsafe_allow_html=True)

# Render the sidebar for this page (from utils.exact_ui). This is called only once per rerun.
render_exact_sidebar()

def create_progress_chart(data, metric):
    """Create progress chart for specific metric"""
    df = pd.DataFrame(data)
    if df.empty:
        return None
    
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date')
    
    fig = px.line(df, x='date', y=metric, 
                  title=f"{metric.replace('_', ' ').title()} Progress Over Time",
                  markers=True)
    
    fig.update_layout(
        xaxis_title="Date",
        yaxis_title=metric.replace('_', ' ').title(),
        height=400
    )
    
    return fig

def create_weekly_summary(data):
    """Create weekly summary visualization"""
    if not data:
        return None, None
    
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date'])
    df['week'] = df['date'].dt.to_period('W')
    
    # Calculate weekly averages
    weekly_avg = df.groupby('week')[['homework_completion', 'behavior_rating', 'sleep_hours', 'mood_rating']].mean()
    
    # Create summary chart
    fig = go.Figure()
    
    colors = ['var(--primary-purple)', 'var(--warning-orange)', 'var(--success-green)', 'var(--info-blue)'] # Use CSS variables
    metrics_map = {
        'homework_completion': get_text('homework_completion_label', st.session_state.app_language),
        'behavior_rating': get_text('behavior_rating_label', st.session_state.app_language),
        'sleep_hours': get_text('sleep_hours_label', st.session_state.app_language),
        'mood_rating': get_text('mood_rating_label', st.session_state.app_language),
    }
    
    for i, metric in enumerate(['homework_completion', 'behavior_rating', 'sleep_hours', 'mood_rating']):
        fig.add_trace(go.Scatter(
            x=weekly_avg.index.astype(str),
            y=weekly_avg[metric],
            mode='lines+markers',
            name=metrics_map[metric], # Use translated labels
            line=dict(color=colors[i])
        ))
    
    fig.update_layout(
        title="Weekly Progress Summary",
        xaxis_title=get_text('week', st.session_state.app_language), # Translated
        yaxis_title=get_text('score', st.session_state.app_language), # Translated
        height=400
    )
    
    return fig, weekly_avg

def main():
    # Authentication check for the page
    if not is_authenticated():
        custom_alert("Please log in to access the Parent Tracker page.", alert_type="warning")
        st.switch_page("app.py") # Redirect to login page
        return # Stop further execution

    # Role-based access control
    user_role = get_user_role()
    if user_role == 'teacher':
        st.error("Access Denied: Teachers cannot view Parent Resources.")
        st.info("Redirecting you to Teacher Resources...")
        st.switch_page("pages/02_Teacher_Resources.py") # Redirect to their allowed page
        return # Stop further execution
        
    # Render main app header with dynamic content
    render_exact_page_header(get_material_icon_html('family_restroom'), 'parent_tracker', 'supporting_childs_learning', language) # Material Icon
    
    # Add authentic student images for hero section
    b64_images = get_base64_images() # Load all base64 images

    st.markdown(f"### {get_text('supporting_childs_learning', language)}")
    hero_images_row = st.columns(2)
    with hero_images_row[0]:
        st.markdown(f'<div class="hero-image-container">{get_b64_image_html(b64_images.get("classroom_girls", ""), "Girls in Classroom", cover_mode=True, aspect_ratio="2.5/1")}</div>', unsafe_allow_html=True)
    with hero_images_row[1]:
        st.markdown(f'<div class="hero-image-container">{get_b64_image_html(b64_images.get("boys_in_classroom", ""), "Boys in Classroom", cover_mode=True, aspect_ratio="2.5/1")}</div>', unsafe_allow_html=True)
    
    # Family showcase section with base64 images
    
    st.markdown(f"""
    <div class="family-section">
        <h2 class="highlight-text">{get_b64_image_html(b64_images.get('strengthening_connections', ''), "Strengthening Home-School Connections", aspect_ratio="3/1")}</h2>
        <div class="family-showcase">
            <div class="family-card">
                {get_b64_image_html(b64_images.get('daily_tracking', ''), "Family learning", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('daily_tracking', language)}</h4>
                <p>{get_text('monitor_child_progress', language)}</p>
            </div>
            <div class="family-card">
                {get_b64_image_html(b64_images.get('parent_empowerment', ''), "Parent support", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('parent_empowerment', language)}</h4>
                <p>{get_text('gain_insights_strategies', language)}</p>
            </div>
            <div class="family-card">
                {get_b64_image_html(b64_images.get('school_partnership', ''), "Family collaboration", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('school_partnership', language)}</h4>
                <p>{get_text('build_communication_bridges', language)}</p>
            </div>
            <div class="family-card">
                {get_b64_image_html(b64_images.get('student_progress_1', ''), "Student success", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('student_success', language)}</h4>
                <p>{get_text('celebrate_achievements', language)}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add student progress gallery
    st.markdown(f"### {get_text('student_progress_stories', language)}")
    
    gallery_images_row = st.columns(3)
    with gallery_images_row[0]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("teacher_with_students", ""), "Academic Progress", aspect_ratio="4/3")}</div>', unsafe_allow_html=True)
    with gallery_images_row[1]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("happy_young_students", ""), "Learning Joy", aspect_ratio="4/3")}</div>', unsafe_allow_html=True)
    with gallery_images_row[2]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("classroom_girls", ""), "Study Focus", aspect_ratio="4/3")}</div>', unsafe_allow_html=True)
    
    # Sidebar for child selection and navigation (this is specific to Parent Tracker page)
    with st.sidebar:
        st.markdown(f"### {get_text('child_selection', language)}")
        child_name = st.text_input(get_text('child_name', language), placeholder="Enter child's name", key="pt_child_name_input") # Added unique key
        
        if child_name:
            st.success(f"Tracking: {child_name}") # St.success is plain text, no unsafe_allow_html
        
        st.markdown(f"### {get_text('dashboard_options', language)}")
        dashboard_view = st.selectbox(
            get_text('choose_view', language),
            [get_text('daily_entry', language), get_text('progress_tracking', language), get_text('weekly_summary', language), get_text('observations_log', language)],
            key="pt_dashboard_view_selector" # Added unique key
        )
        
        # Date range for analysis
        if dashboard_view in [get_text('progress_tracking', language), get_text('weekly_summary', language)]:
            st.markdown("### Date Range")
            end_date = st.date_input("End Date", value=date.today(), key="pt_end_date_input") # Added unique key
            start_date = st.date_input("Start Date", value=end_date - timedelta(days=30), key="pt_start_date_input") # Added unique key

    if not child_name:
        custom_alert(
        message=get_text('please_enter_child_name', language),
        icon_html=get_material_icon_html('info', style='fill'),
        alert_type="warning"
    )
        st.stop()

    if dashboard_view == get_text('daily_entry', language):
        st.markdown(f"## {get_text('daily_observation_entry', language)}")
        st.markdown(f"{get_text('recording_observations_for', language)} **{child_name}** {get_text('on', language)} {date.today().strftime('%B %d, %Y')}")
        
        # Create form for daily entry
        with st.form("daily_observation_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"### {get_text('academic_observations', language)}")
                
                homework_completion = st.slider(
                    get_text('homework_completion', language), 
                    0, 100, 75,
                    help="Percentage of assigned homework completed",
                    key="pt_homework_completion_input" # Added unique key
                )
                
                reading_time = st.number_input(
                    get_text('reading_time', language), 
                    min_value=0, max_value=180, value=20,
                    help="Minutes spent reading independently",
                    key="pt_reading_time_input" # Added unique key
                )
                
                focus_level = st.select_slider(
                    get_text('focus_level', language),
                    options=[get_text('poor'), get_text('below_average'), get_text('average'), get_text('good'), get_text('excellent')],
                    value=get_text('good'),
                    key="pt_focus_level_input" # Added unique key
                )
                
                subjects_struggled = st.multiselect(
                    get_text('subjects_struggled', language),
                    ["Math", "Reading", "Writing", "Science", "Social Studies", "Other"],
                    help="Select subjects where child struggled today",
                    key="pt_subjects_struggled_input" # Added unique key
                )
            
            with col2:
                st.markdown(f"### {get_text('behavioral_emotional', language)}")
                
                # Ensure the options here are consistent with the `get_text` output and numerical values
                behavior_options_map = {
                    f"1 - {get_text('poor', language)}": 1,
                    f"2 - {get_text('below_average', language)}": 2,
                    f"3 - {get_text('average', language)}": 3,
                    f"4 - {get_text('good', language)}": 4,
                    f"5 - {get_text('excellent', language)}": 5,
                }
                behavior_rating_display_options = list(behavior_options_map.keys())
                
                behavior_rating = st.select_slider(
                    get_text('behavior_rating', language), 
                    options=behavior_rating_display_options,
                    value=f"3 - {get_text('average', language)}", # Use average as a default
                    help="Select your child's overall behavior today",
                    key="pt_behavior_rating_input" # Added unique key
                )
                behavior_value = behavior_options_map[behavior_rating] # Extract numerical value
                
                # Using 'very_low' for mood as per 'energy_level' translation
                mood_options_map = {
                    f"1 - {get_text('very_low', language)}": 1,
                    f"2 - {get_text('low', language)}": 2,
                    f"3 - {get_text('normal', language)}": 3,
                    f"4 - {get_text('high', language)}": 4,
                    f"5 - {get_text('very_high', language)}": 5,
                }
                mood_rating_display_options = list(mood_options_map.keys())

                mood_rating = st.select_slider(
                    get_text('mood_rating', language), 
                    options=mood_rating_display_options,
                    value=f"3 - {get_text('normal', language)}", # Use normal as a default
                    help="How was your child's mood today?",
                    key="pt_mood_rating_input" # Added unique key
                )
                mood_value = mood_options_map[mood_rating] # Extract numerical value
                
                sleep_hours = st.number_input(
                    get_text('sleep_hours', language), 
                    min_value=4.0, max_value=12.0, value=8.0, step=0.5,
                    help="Total hours of sleep last night",
                    key="pt_sleep_hours_input" # Added unique key
                )
                
                energy_level_options = [get_text('very_low', language), get_text('low', language), get_text('normal', language), get_text('high', language), get_text('very_high', language)]
                energy_level = st.select_slider(
                    get_text('energy_level', language),
                    options=energy_level_options,
                    value=get_text('normal', language),
                    key="pt_energy_level_input" # Added unique key
                )
            
            st.markdown("### Additional Observations")
            
            col3, col4 = st.columns(2)
            
            with col3:
                social_interactions = st.text_area(
                    "Social Interactions",
                    placeholder="How did your child interact with siblings, friends, or family today?",
                    height=100,
                    key="pt_social_interactions_input" # Added unique key
                )
                
                learning_wins = st.text_area(
                    get_text('learning_wins', language),
                    placeholder="What went well today? Any breakthroughs or positive moments?",
                    height=100,
                    key="pt_learning_wins_input" # Added unique key
                )
            
            with col4:
                challenges_faced = st.text_area(
                    get_text('challenges_faced', language),
                    placeholder="What was difficult today? Any specific struggles or concerns?",
                    height=100,
                    key="pt_challenges_faced_input" # Added unique key
                )
                
                strategies_used = st.text_area(
                    "Strategies That Helped",
                    placeholder="What strategies or supports helped your child today?",
                    height=100,
                    key="pt_strategies_used_input" # Added unique key
                )
            
            # Environmental factors
            st.markdown("### Home Environmental Factors")
            
            col5, col6 = st.columns(2)
            
            with col5:
                screen_time = st.number_input(
                    "Screen Time (hours)", 
                    min_value=0.0, max_value=12.0, value=2.0, step=0.5,
                    key="pt_screen_time_input" # Added unique key
                )
                
                physical_activity = st.number_input(
                    "Physical Activity (minutes)", 
                    min_value=0, max_value=300, value=60,
                    key="pt_physical_activity_input" # Added unique key
                )
            
            with col6:
                medication_taken = st.checkbox("Medication taken as prescribed", key="pt_medication_taken_checkbox") # Added unique key
                
                special_events = st.text_input(
                    "Special Events/Changes",
                    placeholder="Any unusual events, schedule changes, or disruptions?",
                    key="pt_special_events_input" # Added unique key
                )
            
            # Submit button
            submitted = st.form_submit_button(get_text('save_observation', language), type="primary")
            
            if submitted:
                # Prepare observation data
                observation_data = {
                    "child_name": child_name,
                    "date": date.today().isoformat(),
                    "homework_completion": homework_completion,
                    "reading_time": reading_time,
                    "focus_level": focus_level,
                    "subjects_struggled": subjects_struggled,
                    "behavior_rating": behavior_value,
                    "mood_rating": mood_value,
                    "sleep_hours": sleep_hours,
                    "energy_level": energy_level,
                    "social_interactions": social_interactions,
                    "learning_wins": learning_wins,
                    "challenges_faced": challenges_faced,
                    "strategies_used": strategies_used,
                    "screen_time": screen_time,
                    "physical_activity": physical_activity,
                    "medication_taken": medication_taken,
                    "special_events": special_events,
                    "timestamp": datetime.now().isoformat()
                }
                
                # Save the observation
                save_parent_observation(observation_data)
                st.success(" Observation saved successfully!") # st.success for plain text
                st.balloons()

    elif dashboard_view == get_text('progress_tracking', language):
        st.markdown(f"## {get_text('progress_tracking', language)}")
        st.markdown(f"Analyzing progress for **{child_name}** from {start_date} to {end_date}")
        
        # Load observations for the child
        all_observations = load_parent_observations()
        child_observations = [obs for obs in all_observations 
                            if obs.get('child_name') == child_name 
                            and start_date <= date.fromisoformat(obs['date']) <= end_date]
        
        if not child_observations:
            custom_alert(
            message=f"{get_text('no_observations_recorded', language)}. {get_text('start_by_adding_daily_observations', language)}",
            icon_html=get_material_icon_html('info', style='fill'),
            alert_type="warning"
        )

            return
        
        # Create tabs for different metrics
        tab1, tab2, tab3, tab4 = st.tabs(["Academic", "Behavioral", "Emotional", "Health"])
        
        with tab1:
            st.markdown("### Academic Progress")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Homework completion chart
                homework_fig = create_progress_chart(child_observations, 'homework_completion')
                if homework_fig:
                    st.plotly_chart(homework_fig, use_container_width=True)
            
            with col2:
                # Reading time chart
                reading_fig = create_progress_chart(child_observations, 'reading_time')
                if reading_fig:
                    st.plotly_chart(reading_fig, use_container_width=True)
            
            # Subject struggles analysis
            st.markdown("#### Chart Subject Difficulty Analysis")
            
            all_subjects = []
            for obs in child_observations:
                all_subjects.extend(obs.get('subjects_struggled', []))
            
            if all_subjects:
                subject_counts = pd.Series(all_subjects).value_counts()
                fig_subjects = px.bar(x=subject_counts.index, y=subject_counts.values,
                                    title="Subjects with Most Difficulties",
                                    labels={'x': 'Subject', 'y': 'Number of Days'})
                st.plotly_chart(fig_subjects, use_container_width=True)
            else:
                st.info(f"{get_material_icon_html('check_circle', style='fill')} Great news! No subject difficulties recorded in this period.", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
        
        with tab2:
            st.markdown("### Behavioral Progress")
            
            behavior_fig = create_progress_chart(child_observations, 'behavior_rating')
            if behavior_fig:
                st.plotly_chart(behavior_fig, use_container_width=True)
            
            # Behavior statistics
            df = pd.DataFrame(child_observations)
            if not df.empty:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    avg_behavior = df['behavior_rating'].mean()
                    st.metric("Average Behavior Rating", f"{avg_behavior:.1f}/5")
                
                with col2:
                    good_days = len(df[df['behavior_rating'] >= 4])
                    st.metric("Good Behavior Days", f"{good_days}/{len(df)}")
                
                with col3:
                    improvement = df['behavior_rating'].diff().mean()
                    st.metric("Trend", f"{improvement:+.2f}", delta=f"{improvement:.2f}")
        
        with tab3:
            st.markdown("### Emotional Well-being")
            
            mood_fig = create_progress_chart(child_observations, 'mood_rating')
            if mood_fig:
                st.plotly_chart(mood_fig, use_container_width=True)
            
            # Mood analysis
            df = pd.DataFrame(child_observations)
            if not df.empty:
                mood_dist = df['mood_rating'].value_counts().sort_index()
                fig_mood_dist = px.pie(values=mood_dist.values, names=[f"Mood {i}" for i in mood_dist.index],
                                     title="Mood Distribution")
                st.plotly_chart(fig_mood_dist, use_container_width=True)
        
        with tab4:
            st.markdown("### Health & Lifestyle")
            
            col1, col2 = st.columns(2)
            
            with col1:
                sleep_fig = create_progress_chart(child_observations, 'sleep_hours')
                if sleep_fig:
                    st.plotly_chart(sleep_fig, use_container_width=True)
            
            with col2:
                activity_fig = create_progress_chart(child_observations, 'physical_activity')
                if activity_fig:
                    st.plotly_chart(activity_fig, use_container_width=True)
            
            # Health summary
            df = pd.DataFrame(child_observations)
            if not df.empty:
                st.markdown("#### Chart Health Summary")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    avg_sleep = df['sleep_hours'].mean()
                    st.metric("Average Sleep", f"{avg_sleep:.1f} hrs")
                
                with col2:
                    avg_activity = df['physical_activity'].mean()
                    st.metric("Average Activity", f"{avg_activity:.0f} min")
                
                with col3:
                    avg_screen = df['screen_time'].mean()
                    st.metric("Average Screen Time", f"{avg_screen:.1f} hrs")
                
                with col4:
                    med_compliance = df['medication_taken'].mean() * 100
                    st.metric("Medication Compliance", f"{med_compliance:.0f}%")

    elif dashboard_view == get_text('weekly_summary', language):
        st.markdown(f"## {get_text('weekly_summary', language)}")
        st.markdown(f"Weekly analysis for **{child_name}**")
        
        # Load observations
        all_observations = load_parent_observations()
        child_observations = [obs for obs in all_observations 
                            if obs.get('child_name') == child_name 
                            and start_date <= date.fromisoformat(obs['date']) <= end_date]
        
        if not child_observations:
            custom_alert(
            message=get_text('no_observations_recorded', language),
            icon_html=get_material_icon_html('info', style='fill'),
            alert_type="warning"
        )

            return
        
        # Create weekly summary chart
        weekly_fig, weekly_data = create_weekly_summary(child_observations)
        
        if weekly_fig:
            st.plotly_chart(weekly_fig, use_container_width=True)
            
            # Weekly insights
            st.markdown("### 💡 Weekly Insights")
            
            if weekly_data is not None and not weekly_data.empty:
                latest_week = weekly_data.iloc[-1]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("#### This Week's Highlights")
                    
                    if latest_week['homework_completion'] >= 80:
                        st.success(f"{get_material_icon_html('check_circle', style='fill')} Great homework completion!", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                    elif latest_week['homework_completion'] >= 60:
                        custom_alert(
                        message="Homework completion needs attention",
                        icon_html=get_material_icon_html('warning', style='fill'),
                        alert_type="warning"
                    )
                    else:
                        st.error(f"{get_material_icon_html('error', style='fill')} Homework completion is concerning", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                    
                    if latest_week['behavior_rating'] >= 4:
                        st.success(f"{get_material_icon_html('check_circle', style='fill')} Excellent behavior this week!", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                    elif latest_week['behavior_rating'] >= 3:
                        st.info(f"{get_material_icon_html('info', style='fill')} Good behavior overall", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                    else:
                        custom_alert(
                        message="Behavior needs support",
                        icon_html=get_material_icon_html('warning', style='fill'),
                        alert_type="warning"
                    )
                
                with col2:
                    st.markdown("#### Growth Areas of Growth")
                    
                    if len(weekly_data) > 1:
                        prev_week = weekly_data.iloc[-2]
                        
                        homework_change = latest_week['homework_completion'] - prev_week['homework_completion']
                        behavior_change = latest_week['behavior_rating'] - prev_week['behavior_rating']
                        mood_change = latest_week['mood_rating'] - prev_week['mood_rating']
                        
                        if homework_change > 5:
                            st.success(f"{get_material_icon_html('arrow_upward')} Homework completion improved!", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        if behavior_change > 0.2:
                            st.success(f"{get_material_icon_html('arrow_upward')} Behavior rating improved!", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        if mood_change > 0.2:
                            st.success(f"{get_material_icon_html('arrow_upward')} Mood has improved!", unsafe_allow_html=True) # Material Icon + unsafe_allow_html

    else:  # Observations Log
        st.markdown(f"## {get_text('observations_log', language)}")
        st.markdown(f"Complete observation history for **{child_name}**")
        
        # Load all observations for the child
        all_observations = load_parent_observations()
        child_observations = [obs for obs in all_observations if obs.get('child_name') == child_name]
        
        if not child_observations:
            custom_alert(
            message=f"{get_text('no_observations_recorded', language)}. {get_text('start_by_adding_daily_observations', language)}",
            icon_html=get_material_icon_html('info', style='fill'),
            alert_type="warning"
            )
            return
        
        # Sort by date (newest first)
        child_observations.sort(key=lambda x: x['date'], reverse=True)
        
        # Filter options
        col1, col2 = st.columns(2)
        
        with col1:
            date_filter = st.date_input("Filter by date (optional)", key="pt_log_date_filter") # Added unique key
        
        with col2:
            show_detailed = st.checkbox("Show detailed observations", value=False, key="pt_log_show_detailed") # Added unique key
        
        # Display observations
        for obs in child_observations[:20]:  # Show last 20 observations
            obs_date = date.fromisoformat(obs['date'])
            
            if date_filter and obs_date != date_filter:
                continue
            
            with st.expander(f"{obs_date.strftime('%B %d, %Y')} - Rating: {obs['behavior_rating']}/5"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**Academic**")
                    st.write(f"Homework: {obs['homework_completion']}%")
                    st.write(f"Reading: {obs['reading_time']} min")
                    st.write(f"Focus: {obs.get('focus_level', 'N/A')}")
                    if obs.get('subjects_struggled'):
                        st.write(f"Struggled with: {', '.join(obs['subjects_struggled'])}")
                
                with col2:
                    st.markdown("**Behavioral**")
                    st.write(f"Behavior: {obs['behavior_rating']}/5")
                    st.write(f"Mood: {obs['mood_rating']}/5")
                    st.write(f"Energy: {obs.get('energy_level', 'N/A')}")
                
                with col3:
                    st.markdown("**Health**")
                    st.write(f"Sleep: {obs['sleep_hours']} hrs")
                    st.write(f"Activity: {obs['physical_activity']} min")
                    st.write(f"Screen time: {obs['screen_time']} hrs")
                
                if show_detailed:
                    if obs.get('learning_wins'):
                        st.markdown(f"**{get_material_icon_html('military_tech')} Learning Wins:**", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        st.write(obs['learning_wins'])
                    
                    if obs.get('challenges_faced'):
                        st.markdown(f"**{get_material_icon_html('gpp_bad')} Challenges:**", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        st.write(obs['challenges_faced'])
                    
                    if obs.get('strategies_used'):
                        st.markdown(f"**{get_material_icon_html('handyman')} Helpful Strategies:**", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        st.write(obs['strategies_used'])
                    
                    if obs.get('social_interactions'):
                        st.markdown(f"**{get_material_icon_html('groups')} Social Interactions:**", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
                        st.write(obs['social_interactions'])
        
        # Export option
        if st.button("📥 Export Observations", key="pt_export_observations_button"): # Added unique key
            df_export = pd.DataFrame(child_observations)
            csv = df_export.to_csv(index=False)
            st.download_button(
                label="Download CSV",
                data=csv,
                file_name=f"{child_name}_observations_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )

    # Footer with tips
    st.markdown("---")
    st.markdown(f"### {get_material_icon_html('lightbulb_circle', style='fill')} Parent Tracking Tips", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Effective Tracking:**
        - Record observations consistently each day
        - Be specific about challenges and successes
        - Note what strategies work best
        - Track patterns over time, not just individual days
        """)
    
    with col2:
        st.markdown(f"""
        **{get_material_icon_html('phone_in_talk', style='fill')} When to Seek Help:**""", unsafe_allow_html=True) # Material Icon + unsafe_allow_html
        st.markdown("""
        - Consistent low behavior/mood ratings
        - Persistent homework struggles
        - Sleep or health concerns
        - Significant changes in patterns
        """)

if __name__ == "__main__":
    main()
### FILE: pages/04_Educational_Content.py

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import sys
import os

# Append parent directory to sys.path to enable importing from utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.image_base64 import get_base64_images # Only need this for the image dict
from utils.language_utils import get_text, load_app_settings, save_app_settings

# Corrected: All UI functions now imported from utils.exact_ui
from utils.exact_ui import (
    add_exact_ui_styles,
    render_exact_sidebar,
    render_exact_page_header,
    create_exact_metric_card,
    create_exact_chart_container,
    get_b64_image_html
)
from utils.auth_utils import is_authenticated, render_login_page, logout_user, get_user_role
from utils.icon_utils import ( # Import for specific Material Icons in content
    get_material_icon_html, get_lightbulb_icon, get_rocket_icon, get_puzzle_icon, get_brain_icon,
    get_ruler_icon, get_gamepad_icon, get_book_icon, get_laptop_icon, get_handshake_icon,
    get_school_icon, get_family_icon, get_admin_icon, get_student_icon
)

# IMPORTANT: Page config MUST be the first Streamlit command for this page
st.set_page_config(
    page_title="EduScan Educational Content",
    page_icon="📚", # Keep emoji for browser tab icon
    layout="wide",
    initial_sidebar_state="expanded"
)

# Apply modern UI styles - CRITICAL to be at the top of the script
add_exact_ui_styles()

# Initialize language and theme in session state (these are usually inherited from app.py)
if 'app_language' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_language'] = settings.get('language', 'English')
if 'app_theme' not in st.session_state:
    settings = load_app_settings()
    st.session_state['app_theme'] = settings.get('theme', 'Light')
if 'offline_mode' not in st.session_state:
    settings = load_app_settings()
    st.session_state['offline_mode'] = settings.get('offline_mode', False)

# Get current language
language = st.session_state.get('app_language', 'English')
current_theme = st.session_state.get('app_theme', 'Light')

# Apply theme-specific body attribute via JavaScript (important for dynamic theme changes)
st.markdown(f"""
    <script>
        document.body.setAttribute('data-theme', '{current_theme}');
    </script>
""", unsafe_allow_html=True)

# Render the sidebar for this page (from utils.exact_ui). This is called only once per rerun.
render_exact_sidebar()

def main():
    # Authentication check for the page
    if not is_authenticated():
        st.warning("Please log in to access Educational Content.")
        st.switch_page("app.py") # Redirect to login page
        return # Stop further execution

    # Render main app header with dynamic content
    render_exact_page_header(get_material_icon_html('book_4'), 'educational_content', 'building_educational_excellence', language) # Material Icon
    
    # Load all base64 images
    b64_images = get_base64_images()

    # Add authentic educational images (hero section)
    st.markdown(f"### {get_text('educational_excellence_in_action', language)}")
    hero_images_row = st.columns(2)
    with hero_images_row[0]:
        st.markdown(f'<div class="hero-image-container">{get_b64_image_html(b64_images.get("happy_young_students", ""), "Research Excellence", cover_mode=True, aspect_ratio="2.5/1")}</div>', unsafe_allow_html=True)
    with hero_images_row[1]:
        st.markdown(f'<div class="hero-image-container">{get_b64_image_html(b64_images.get("teacher_with_students", ""), "Academic Focus", cover_mode=True, aspect_ratio="2.5/1")}</div>', unsafe_allow_html=True)
    
    # Research showcase section with base64 images
    
    st.markdown(f"""
    <div class="content-section">
        <h2 class="highlight-text">{get_text('building_educational_excellence', language)}</h2>
        <div class="research-showcase">
            <div class="research-card">
                {get_b64_image_html(b64_images.get('global_practices', ''), "Educational research", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('global_best_practices', language)}</h4>
                <p>{get_text('international_standards', language)}</p>
            </div>
            <div class="research-card">
                {get_b64_image_html(b64_images.get('learning_science', ''), "Learning research", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('learning_science', language)}</h4>
                <p>{get_text('neuroscience_cognitive_research', language)}</p>
            </div>
            <div class="research-card">
                {get_b64_image_html(b64_images.get('intervention_studies', ''), "Intervention studies", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('intervention_studies', language)}</h4>
                <p>{get_text('evidence_based_strategies', language)}</p>
            </div>
            <div class="research-card">
                {get_b64_image_html(b64_images.get('cultural_adaptation', ''), "Cultural education", aspect_ratio="3/2", cover_mode=True)}
                <h4>{get_text('cultural_adaptation', language)}</h4>
                <p>{get_text('implementing_inclusive_education', language)}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add comprehensive student gallery
    st.markdown(f"### {get_text('educational_research_impact', language)}")
    
    gallery_images_row = st.columns(4)
    with gallery_images_row[0]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("boys_in_classroom", ""), "Research Impact")}</div>', unsafe_allow_html=True)
    with gallery_images_row[1]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("classroom_girls", ""), "Student Success")}</div>', unsafe_allow_html=True)
    with gallery_images_row[2]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("happy_young_students", ""), "Learning Focus")}</div>', unsafe_allow_html=True)
    with gallery_images_row[3]:
        st.markdown(f'<div class="image-aspect-ratio-container aspect-4-3">{get_b64_image_html(b64_images.get("teacher_with_students", ""), "Educational Achievement")}</div>', unsafe_allow_html=True)
    
    st.subheader(f"📚 {get_text('content_categories', language)}")
    content_type = st.selectbox(
        get_text('choose_content_type', language),
        [
            get_text('research_overview', language),
            get_text('types_learning_difficulties', language), 
            get_text('early_intervention', language),
            get_text('academic_resources', language),
            get_text('technology_tools', language),
            get_text('support_strategies', language)
        ],
        key="content_category_selector" # Added key
    )
    
    # Corrected: Use st.markdown for the "Target Audience" label, not st.subheader, to avoid heading styling.
    st.markdown(f"<h4 style='color:var(--gray-600); font-size:1rem; margin-top:1rem; margin-bottom:0.5rem;'>{get_text('target_audience', language)}</h4>", unsafe_allow_html=True)
    audience = st.selectbox(
        get_text('content_for', language),
        [get_text('teachers', language), get_text('parents', language), get_text('administrators', language), get_text('all', language)],
        key="audience_selector" # Added key
    )

    if content_type == get_text('research_overview', language):
        st.markdown(f"## {get_text('research_overview', language)}: {get_text('types_learning_difficulties', language)}")
        
        tab1, tab2, tab3 = st.tabs([get_text('statistics', language), get_text('neuroscience', language), get_text('impact_studies', language)])
        
        with tab1:
            st.markdown(f"### {get_text('learning_difficulties_statistics', language)}")
            
            # Create statistical visualizations
            prevalence_data = {
                "Type": ["Dyslexia", "ADHD", "Dyscalculia", "Dysgraphia", "Language Disorders", "Other"],
                "Prevalence (%)": [5.0, 11.0, 3.5, 4.0, 7.0, 2.5],
                "Description": [
                    "Reading and language processing difficulties",
                    "Attention deficit hyperactivity disorder", 
                    "Mathematical learning difficulties",
                    "Writing and fine motor difficulties",
                    "Spoken language comprehension issues",
                    "Other specific learning disabilities"
                ]
            }
            
            fig_prevalence = px.pie(
                prevalence_data, 
                values="Prevalence (%)", 
                names="Type",
                title="Prevalence of Learning Difficulties in School-Age Children"
            )
            st.plotly_chart(fig_prevalence, use_container_width=True)
            
            # Statistics table
            st.markdown("#### Detailed Statistics")
            stats_df = pd.DataFrame(prevalence_data)
            st.dataframe(stats_df, use_container_width=True)
            
            # Key statistics
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Students Affected", "15-20%", "of all students")
            
            with col2:
                st.metric("Early Identification", "< 30%", "before age 8")
            
            with col3:
                st.metric("Gender Ratio", "2:1", "Male to Female")
            
            with col4:
                st.metric("Improvement Rate", "80%", "with intervention")
        
        with tab2:
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Brain Neuroscience of Learning Difficulties</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('learning_science', ''), "Brain Science", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            #### **Brain-Based Understanding**
            
            Learning difficulties are neurobiological in origin, involving differences in brain structure and function:
            
            **Key Brain Areas Affected:**
            
            **1. Left Hemisphere Language Areas**
            - Broca's Area: Speech production and grammar
            - Wernicke's Area: Language comprehension
            - Angular Gyrus: Word recognition and reading
            
            **2. Phonological Processing Networks**
            - Difficulty connecting sounds to letters
            - Reduced activation in reading circuits
            - Compensatory right hemisphere activation
            
            **3. Working Memory Systems**
            - Prefrontal cortex involvement
            - Information processing speed
            - Attention and executive function
            """)
            
            st.markdown("""
            #### **Neuroplasticity and Intervention**
            
            **🌟 The Brain's Ability to Change:**
            - Intensive intervention can create new neural pathways
            - Earlier intervention leads to greater plasticity
            - Multi-sensory approaches enhance brain connectivity
            - Practice strengthens neural networks
            
            **Research Evidence:**
            - fMRI studies show brain changes after intervention
            - Increased activation in reading networks
            - Improved connectivity between brain regions
            - Long-term structural brain changes possible
            """)
            
            # Intervention timeline
            st.markdown("#### ⏰ Critical Intervention Periods")
            
            timeline_data = {
                "Age Range": ["3-5 years", "6-8 years", "9-12 years", "13+ years"],
                "Brain Plasticity": ["Highest", "High", "Moderate", "Lower"],
                "Intervention Impact": ["Maximum", "High", "Moderate", "Requires intensity"],
                "Key Focus": [
                    "Language development, phonological awareness",
                    "Reading foundation, basic skills",
                    "Reading fluency, comprehension",
                    "Compensation strategies, technology"
                ]
            }
            
            timeline_df = pd.DataFrame(timeline_data)
            st.dataframe(timeline_df, use_container_width=True)
        
        with tab3:
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Growth Impact and Intervention Studies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('intervention_studies', ''), "Intervention Studies", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            #### **Major Research Findings**
            
            **National Reading Panel (2000)**
            - Systematic phonics instruction is essential
            - Phonemic awareness training improves reading
            - Guided oral reading builds fluency
            - Vocabulary instruction enhances comprehension
            
            **Meta-Analysis Studies**
            - Intensive intervention shows large effect sizes (0.8+)
            - Early intervention prevents reading failure
            - Multi-component approaches most effective
            - Technology tools can enhance traditional methods
            """)
            
            # Create intervention effectiveness chart
            intervention_data = {
                "Intervention Type": [
                    "Phonics Instruction",
                    "Reading Fluency",
                    "Comprehension Strategies", 
                    "Vocabulary Training",
                    "Multi-sensory Approaches",
                    "Technology-Assisted"
                ],
                "Effect Size": [0.86, 0.71, 0.68, 0.62, 0.75, 0.58],
                "Grade Levels": ["K-3", "2-5", "3-8", "K-8", "K-8", "K-12"]
            }
            
            fig_effectiveness = px.bar(
                intervention_data,
                x="Effect Size",
                y="Intervention Type",
                orientation='h',
                title="Intervention Effectiveness (Effect Sizes from Research)"
            )
            st.plotly_chart(fig_effectiveness, use_container_width=True)
            
            st.markdown("""
            #### **Longitudinal Study Results**
            
            **Connecticut Longitudinal Study (Shaywitz et al.)**
            - Followed 445 children from kindergarten to grade 12
            - Reading difficulties persist without intervention
            - Early identification and intervention crucial
            - Brain imaging shows intervention changes neural pathways
            
            **Chart Key Outcomes:**
            - 74% of poor readers in grade 3 remain poor readers in grade 9
            - Intensive intervention can normalize reading performance
            - Academic and social benefits extend beyond reading
            - Self-esteem and motivation significantly improve
            """)

    elif content_type == get_text('types_learning_difficulties', language):
        st.markdown("## 🧩 Types of Learning Difficulties")
        
        difficulty_type = st.selectbox(
            "Select learning difficulty:",
            ["Dyslexia", "Dyscalculia", "Dysgraphia", "ADHD", "Language Processing", "Executive Function"],
            key="difficulty_type_selector_page4" # Unique key
        )
        
        if difficulty_type == "Dyslexia":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Dyslexia: Reading and Language Processing</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('girl_reading_book', ''), "Girl reading book", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Definition and Characteristics**
            Dyslexia is a neurobiological condition affecting reading and language processing despite adequate intelligence and instruction.
            
            **Core Characteristics:**
            - Difficulty with accurate and/or fluent word recognition
            - Poor spelling and decoding abilities
            - Challenges with phonological processing
            - Reading comprehension may be affected
            
            ** Observable Signs by Age:**
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **Ages 3-5:**
                - Delayed speech development
                - Difficulty rhyming
                - Problems learning alphabet
                - Trouble following directions
                """)
            
            with col2:
                st.markdown("""
                **Ages 6-8:**
                - Slow reading progress
                - Difficulty sounding out words
                - Confusing similar words
                - Avoiding reading activities
                """)
            
            with col3:
                st.markdown("""
                **Ages 9+:**
                - Reading below grade level
                - Difficulty with comprehension
                - Poor spelling despite instruction
                - Avoiding written work
                """)
            
            st.markdown("""
            #### **Brain Neurological Basis**
            - Differences in left hemisphere language areas
            - Reduced connectivity in reading networks
            - Phonological processing deficits
            - Working memory challenges
            
            #### **Effective Interventions**
            - Systematic, explicit phonics instruction
            - Multi-sensory reading programs (Orton-Gillingham, Wilson)
            - Structured literacy approaches
            - Assistive technology support
            """)
        
        elif difficulty_type == "Dyscalculia":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Dyscalculia: Mathematical Learning Difficulties</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('abc_kids', ''), "ABC Kids Math", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Definition and Characteristics**
            Dyscalculia is a specific learning difficulty affecting mathematical understanding and computation.
            
            **Core Characteristics:**
            - Difficulty understanding number concepts
            - Problems with mathematical reasoning
            - Challenges with calculation and computation
            - Difficulty understanding mathematical symbols
            
            **Chart Common Manifestations:**
            """)
            
            manifestations = {
                "Area": [
                    "Number Sense",
                    "Calculation",
                    "Problem Solving",
                    "Mathematical Reasoning"
                ],
                "Difficulties": [
                    "Understanding quantity, comparing numbers, number line concepts",
                    "Basic arithmetic facts, multi-step calculations, algorithms",
                    "Word problems, mathematical language, applying concepts",
                    "Patterns, relationships, abstract mathematical thinking"
                ],
                "Support Strategies": [
                    "Visual number representations, manipulatives, number lines",
                    "Break down steps, provide algorithms, use calculators",
                    "Graphic organizers, key word strategies, real-world connections",
                    "Concrete examples, visual models, step-by-step instruction"
                ]
            }
            
            manifestations_df = pd.DataFrame(manifestations)
            st.dataframe(manifestations_df, use_container_width=True)
        
        elif difficulty_type == "Dysgraphia":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Dysgraphia: Writing Difficulties</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('student_writing', ''), "Student Writing", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Definition and Characteristics**
            Dysgraphia is a neurological condition affecting written expression and fine motor skills.
            
            **Core Characteristics:**
            - Difficulty with accurate and/or fluent word recognition
            - Poor spelling and decoding abilities
            - Challenges with phonological processing
            - Reading comprehension may be affected
            
            ** Observable Signs by Age:**
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **Ages 3-5:**
                - Delayed speech development
                - Difficulty rhyming
                - Problems learning alphabet
                - Trouble following directions
                """)
            
            with col2:
                st.markdown("""
                **Ages 6-8:**
                - Slow reading progress
                - Difficulty sounding out words
                - Confusing similar words
                - Avoiding reading activities
                """)
            
            with col3:
                st.markdown("""
                **Ages 9+:**
                - Reading below grade level
                - Difficulty with comprehension
                - Poor spelling despite instruction
                - Avoiding written work
                """)
            
            st.markdown("""
            #### **Brain Neurological Basis**
            - Differences in left hemisphere language areas
            - Reduced connectivity in reading networks
            - Phonological processing deficits
            - Working memory challenges
            
            #### **Effective Interventions**
            - Systematic, explicit phonics instruction
            - Multi-sensory reading programs (Orton-Gillingham, Wilson)
            - Structured literacy approaches
            - Assistive technology support
            """)

    elif content_type == get_text('early_intervention', language):
        st.markdown("## 🚀 Early Intervention Strategies")
        
        intervention_focus = st.selectbox(
            "Intervention focus:",
            ["Pre-Reading Skills", "Early Math", "Language Development", "Social-Emotional"],
            key="intervention_focus_selector_page4" # Unique key
        )
        
        if intervention_focus == "Pre-Reading Skills":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Pre-Reading Skills Development</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('kindergarten', ''), "Kindergarten Students", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Essential Pre-Reading Components**
            
            **1. Phonological Awareness**
            - Recognizing and manipulating sounds in spoken language
            - Foundation for reading success
            - Can be developed before formal reading instruction
            """)
            
            # Phonological awareness progression
            progression_data = {
                "Skill Level": [
                    "Word Awareness",
                    "Syllable Awareness", 
                    "Onset-Rime",
                    "Phoneme Awareness"
                ],
                "Age Range": ["3-4 years", "4-5 years", "5-6 years", "6-7 years"],
                "Activities": [
                    "Counting words in sentences, recognizing word boundaries",
                    "Clapping syllables, syllable deletion and addition",
                    "Recognizing rhymes, identifying word families",
                    "Sound isolation, blending, segmentation, manipulation"
                ],
                "Assessment": [
                    "Can identify separate words in spoken sentences",
                    "Can clap and count syllables in words",
                    "Can identify rhyming words and word patterns",
                    "Can manipulate individual sounds in words"
                ]
            }
            
            progression_df = pd.DataFrame(progression_data)
            st.dataframe(progression_df, use_container_width=True)
            
            st.markdown("""
            #### **🎵 Effective Pre-Reading Activities**
            
            **Phonological Awareness Games:**
            - Sound matching and identification games
            - Rhyming songs and poems
            - Syllable clapping activities
            - Sound blending and segmentation
            
            **Print Awareness Activities:**
            - Environmental print exploration
            - Book handling and orientation
            - Letter recognition games
            - Name writing practice
            """)
        
        elif intervention_focus == "Early Math":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Early Mathematical Thinking</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('abc_kids', ''), "ABC Kids Learning Math", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Number Sense Development**
            
            **Foundation Skills (Ages 3-5):**
            - Counting with one-to-one correspondence
            - Understanding "more" and "less"
            - Recognizing numerals
            - Simple pattern recognition
            
            **Advanced Skills (Ages 5-7):**
            - Understanding number relationships
            - Basic addition and subtraction concepts
            - Place value understanding
            - Mathematical problem-solving
            """)
            
            # Early math milestones
            milestone_data = {
                "Age": ["3-4 years", "4-5 years", "5-6 years", "6-7 years"],
                "Counting": [
                    "Counts to 5-10",
                    "Counts to 20, understands cardinality",
                    "Counts to 100, skip counting by 10s",
                    "Counts by 2s, 5s, 10s; understands odd/even"
                ],
                "Number Recognition": [
                    "Recognizes numerals 1-5",
                    "Recognizes numerals 1-10",
                    "Recognizes numerals 1-20",
                    "Recognizes numerals to 100"
                ],
                "Operations": [
                    "Understands 'more' and 'less'",
                    "Simple addition with objects",
                    "Addition/subtraction within 10",
                    "Addition/subtraction within 20"
                ]
            }
            
            milestone_df = pd.DataFrame(milestone_data)
            st.dataframe(milestone_df, use_container_width=True)

    elif content_type == get_text('academic_resources', language):
        st.markdown("## Academic Resource Library")
        
        resource_category = st.selectbox(
            "Resource category:",
            ["Research Articles", "Best Practice Guides", "Intervention Programs", "Assessment Tools"],
            key="academic_resource_category_selector_page4" # Unique key
        )
        
        if resource_category == "Research Articles":
            st.markdown("### Key Research Articles")
            
            # Research articles database
            articles = [
                {
                    "Title": "The Science of Reading: A Handbook",
                    "Author": "Snowling, M. J. & Hulme, C.",
                    "Year": "2021",
                    "Key Findings": "Comprehensive review of reading research, emphasizing structured literacy approaches",
                    "Relevance": "Essential for understanding evidence-based reading instruction",
                    "Citation": "Snowling, M. J., & Hulme, C. (2021). The science of reading: A handbook. Wiley."
                },
                {
                    "Title": "Preventing Reading Difficulties in Young Children",
                    "Author": "Snow, C. E., Burns, M. S., & Griffin, P.",
                    "Year": "1998",
                    "Key Findings": "Identifies predictors of reading success and failure; emphasizes early intervention",
                    "Relevance": "Foundational text for early literacy intervention",
                    "Citation": "Snow, C. E., Burns, M. S., & Griffin, P. (1998). Preventing reading difficulties in young children. National Academy Press."
                },
                {
                    "Title": "Mathematical Learning Disabilities: Current Issues and Future Directions",
                    "Author": "Gersten, R. & Chard, D.",
                    "Year": "2019",
                    "Key Findings": "Reviews effective interventions for mathematical learning difficulties",
                    "Relevance": "Guidelines for math intervention and support",
                    "Citation": "Gersten, R., & Chard, D. (2019). Mathematical learning disabilities. Journal of Learning Disabilities, 52(3), 123-145."
                }
            ]
            
            for article in articles:
                with st.expander(f"🔧 {article['Title']} ({article['Year']})"):
                    st.write(f"**Author(s):** {article['Author']}")
                    st.write(f"**Key Findings:** {article['Key Findings']}")
                    st.write(f"**Relevance:** {article['Relevance']}")
                    st.write(f"**Citation:** {article['Citation']}")
        
        elif resource_category == "Best Practice Guides":
            st.markdown("### List Best Practice Implementation Guides")
            
            practice_areas = ["Structured Literacy", "Multi-Tiered Support", "Universal Design", "Family Engagement"]
            
            selected_practice = st.selectbox("Select practice area:", practice_areas, key="best_practice_area_selector_page4") # Unique key
            
            if selected_practice == "Structured Literacy":
                st.markdown("""
                #### 🏗️ Structured Literacy Implementation
                
                **Core Components:**
                
                **1. Systematic and Cumulative**
                - Skills taught in logical order
                - Each lesson builds on previous learning
                - Regular review and reinforcement
                
                **2. Explicit Instruction**
                - Direct teaching of concepts and skills
                - Clear explanations and modeling
                - Guided practice before independence
                
                **3. Diagnostic and Responsive**
                - Regular assessment of student progress
                - Instruction adjusted based on data
                - Individualized support as needed
                
                **Implementation Steps:**
                """)
                
                implementation_steps = [
                    "Assess current literacy curriculum and practices",
                    "Provide professional development for teachers",
                    "Select evidence-based curriculum materials",
                    "Establish assessment and progress monitoring systems",
                    "Create support structures for struggling students",
                    "Monitor implementation and student outcomes"
                ]
                
                for i, step in enumerate(implementation_steps, 1):
                    st.write(f"{i}. {step}")

    elif content_type == get_text('technology_tools', language):
        st.markdown("## Technology Tools for Learning Support")
        
        tool_category = st.selectbox(
            "Tool category:",
            ["Reading Support", "Writing Assistance", "Math Tools", "Organization Apps", "Communication Aids"],
            key="tool_category_selector_page4" # Unique key
        )
        
        if tool_category == "Reading Support":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Reading Support Technologies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('girl_reading_book', ''), "Girl Reading Book", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            
            reading_tools = [
                {
                    "Tool": "Text-to-Speech Software",
                    "Examples": "NaturalReader, Voice Dream Reader, Read&Write",
                    "Benefits": "Helps with decoding, comprehension, and accessing grade-level content",
                    "Implementation": "Start with short texts, teach controls, practice daily"
                },
                {
                    "Tool": "Digital Highlighters",
                    "Examples": "Kami, Hypothesis, Adobe Reader",
                    "Benefits": "Helps with focus, note-taking, and text organization",
                    "Implementation": "Teach color-coding system, practice with short passages"
                },
                {
                    "Tool": "Reading Comprehension Apps",
                    "Examples": "Epic!, Reading A-Z, Lexia Core5",
                    "Benefits": "Adaptive practice, immediate feedback, engaging content",
                    "Implementation": "Set appropriate levels, monitor progress, supplement instruction"
                }
            ]
            
            for tool in reading_tools:
                with st.expander(f"🔧 {tool['Tool']}"):
                    st.write(f"**Examples:** {tool['Examples']}")
                    st.write(f"**Benefits:** {tool['Benefits']}")
                    st.write(f"**Best For:** {tool['Best For']}")
                    st.write(f"**Implementation:** {tool['Implementation']}")
        
        elif tool_category == "Writing Assistance":
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Writing Assistance Technologies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('student_writing', ''), "Student Writing", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            writing_tools_data = {
                "Tool Type": [
                    "Word Prediction",
                    "Grammar Checkers", 
                    "Graphic Organizers",
                    "Speech-to-Text"
                ],
                "Examples": [
                    "Co:Writer, WordQ, Ginger",
                    "Grammarly, ProWritingAid, Ginger",
                    "Inspiration, Kidspiration, MindMeister",
                    "Dragon Naturally Speaking, Google Voice Typing"
                ],
                "Primary Benefits": [
                    "Reduces spelling errors, improves vocabulary",
                    "Identifies grammar and punctuation errors",
                    "Helps organize thoughts and ideas",
                    "Bypasses handwriting difficulties"
                ]
            }
            
            writing_tools_df = pd.DataFrame(writing_tools_data)
            st.dataframe(writing_tools_df, use_container_width=True)

    else:  # Support Strategies
        st.markdown("## 🤝 Support Strategies for Different Stakeholders")
        
        stakeholder = st.selectbox(
            "Select stakeholder group:",
            [get_text('teachers', language), get_text('parents', language), get_text('administrators', language), get_text('students', language)],
            key="stakeholder_selector_page4" # Unique key
        )
        
        if stakeholder == get_text('teachers', language):
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Teacher Support Strategies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('teacher_with_students', ''), "Teacher with students", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Classroom Implementation**
            
            **Daily Practices:**
            - Use explicit instruction methods
            - Provide multiple means of representation
            - Offer choice in how students demonstrate learning
            - Implement regular progress monitoring
            
            **Lesson Planning:**
            - Include universal design principles
            - Plan for differentiated instruction
            - Prepare accommodations and modifications
            - Build in multiple practice opportunities
            """)
            
            # Teacher checklist
            st.markdown("####  Daily Teaching Checklist")
            
            checklist_items = [
                "Clear learning objectives posted and explained",
                "Multi-sensory instruction techniques used",
                "Students given choice in activities or materials",
                "Progress monitored and feedback provided",
                "Accommodations implemented as needed",
                "Positive reinforcement and encouragement given",
                "Instructions broken into manageable steps",
                "Visual supports and graphic organizers available"
            ]
            
            for item in checklist_items:
                st.checkbox(item, key=f"teacher_{item}_page4") # Unique key
        
        elif stakeholder == get_text('parents', language):
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Parent Support Strategies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('parent_empowerment', ''), "Parent Empowerment", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Home Home Support Techniques**
            
            **Creating a Supportive Environment:**
            - Establish consistent routines and expectations
            - Provide a quiet, organized homework space
            - Celebrate effort and progress, not just achievement
            - Maintain open communication with teachers
            - Implement home-based learning activities
            
            **Academic Support:**
            - Break homework into manageable chunks
            - Use visual schedules and reminders
            - Practice skills in fun, game-like ways
            - Read together daily, regardless of child's reading level
            """)
            
            # Parent resources
            st.markdown("#### Recommended Parent Resources")
            
            parent_resources = [
                {
                    "Resource": "International Dyslexia Association",
                    "Type": "Website",
                    "Description": "Comprehensive information about dyslexia and reading difficulties",
                    "Link": "https://dyslexiaida.org"
                },
                {
                    "Resource": "Understood.org",
                    "Type": "Website", 
                    "Description": "Resources for learning and thinking differences",
                    "Link": "https://understood.org"
                },
                {
                    "Resource": "Learning Disabilities Association",
                    "Type": "Organization",
                    "Description": "Support and advocacy for individuals with learning disabilities",
                    "Link": "https://ldaamerica.org"
                }
            ]
            
            for resource in parent_resources:
                with st.expander(f"🔧 {resource['Resource']}"):
                    st.write(f"**Type:** {resource['Type']}")
                    st.write(f"**Description:** {resource['Description']}")
                    st.write(f"**Link:** {resource['Link']}")
        
        elif stakeholder == get_text('administrators', language):
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Administrator Support Strategies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('school_partnership', ''), "School Partnership", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Systemic Support:**
            - Allocate resources for professional development in inclusive education.
            - Foster a school-wide culture of collaboration between general and special education teachers.
            - Ensure availability of evidence-based intervention programs and tools.
            - Implement data-driven decision-making for student support and interventions.
            
            #### **Policy and Leadership:**
            - Develop and enforce inclusive policies that support diverse learners.
            - Advocate for funding and resources to meet student needs.
            - Promote parent and community engagement in school initiatives.
            - Lead by example in promoting a positive and supportive school environment.
            """)
        
        elif stakeholder == get_text('students', language):
            st.markdown(f"""
            <div class="content-section">
                <h3 class="highlight-text">Student Self-Advocacy & Support Strategies</h3>
                <div class="header-image-container">{get_b64_image_html(b64_images.get('smiling_girl', ''), "Smiling Student", aspect_ratio="2/1")}</div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            #### **Empowering Students:**
            - Teach students to understand their own learning profiles and strengths.
            - Encourage students to communicate their needs to teachers and parents.
            - Develop self-monitoring and self-regulation skills.
            - Foster a growth mindset and resilience in facing learning challenges.
            
            #### **Tools for Independence:**
            - Introduce assistive technologies that support their learning style.
            - Teach organizational strategies (e.g., planners, digital tools).
            - Promote goal-setting and self-reflection on their progress.
            - Encourage participation in peer support networks.
            """)


    # Footer with additional resources
    st.markdown("---")
    st.markdown(f"### {get_material_icon_html('quick_reference')} Quick Resources", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("Reading Strategies", use_container_width=True, key="quick_link_reading_footer_page4"): # Unique key
            st.info("Comprehensive reading support strategies loaded above!")
    
    with col2:
        if st.button("Math Support", use_container_width=True, key="quick_link_math_footer_page4"): # Unique key
            st.info("Mathematics intervention techniques displayed above!")
    
    with col3:
        if st.button("Writing Help", use_container_width=True, key="quick_link_writing_footer_page4"): # Unique key
            st.info("Writing differentiation strategies shown above!")
    
    # Place this button outside the columns to ensure it takes full width below them
    st.markdown("<div style='margin-top: 1rem;'></div>", unsafe_allow_html=True) # Spacer
    if st.button("Behavior Tips", use_container_width=True, key="quick_link_behavior_footer_page4"): # Unique key
        st.info("Behavioral intervention strategies provided above!")

if __name__ == "__main__":
    main()
### FILE: utils/__init__.py

# Utils package for EduScan Somalia
### FILE: utils/auth_utils.py

import streamlit as st
import json
import os
from datetime import datetime, timedelta

USERS_FILE = "data/users.json"

def _load_users():
    """Loads user data from the JSON file."""
    if not os.path.exists("data"):
        os.makedirs("data")
    if not os.path.exists(USERS_FILE) or os.stat(USERS_FILE).st_size == 0:
        # Create a dummy users.json if it doesn't exist
        dummy_users = [
            {"username": "teacher1", "password": "password123", "role": "teacher"},
            {"username": "parent1", "password": "password123", "role": "parent"},
            {"username": "admin", "password": "adminpassword", "role": "admin"}
        ]
        with open(USERS_FILE, 'w') as f:
            json.dump(dummy_users, f, indent=2)
        return dummy_users
    
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except json.JSONDecodeError:
        st.error("Error: users.json is corrupt. Please check the file.")
        return []
    except Exception as e:
        st.error(f"Error loading user data: {e}")
        return []

def authenticate_user(username, password):
    """Authenticates a user based on username and password."""
    users = _load_users()
    for user in users:
        if user["username"] == username and user["password"] == password:
            st.session_state["authenticated"] = True
            st.session_state["username"] = user["username"]
            st.session_state["role"] = user["role"]
            return True
    st.session_state["authenticated"] = False
    return False

def logout_user():
    """Logs out the current user."""
    st.session_state["authenticated"] = False
    st.session_state["username"] = None
    st.session_state["role"] = None
    st.success("You have been logged out.")
    st.switch_page("app.py") # Redirect to login page after logout

def is_authenticated():
    """Checks if a user is currently authenticated."""
    return st.session_state.get("authenticated", False)

def get_user_role():
    """Returns the role of the authenticated user."""
    return st.session_state.get("role")

def render_login_page():
    """Renders the login form."""
    # Wrap the entire login content in a div with a specific class for styling
    st.markdown(
        """
        <div class="login-container">
        """,
        unsafe_allow_html=True
    )
    
    st.title("EduScan Login")
    st.markdown("Please log in to access the application.")

    with st.form("login_form"):
        username = st.text_input("Username", key="login_username")
        password = st.text_input("Password", type="password", key="login_password")
        submitted = st.form_submit_button("Login")

        if submitted:
            if authenticate_user(username, password):
                st.success(f"Welcome, {st.session_state['username']} ({st.session_state['role'].capitalize()})!")
                st.switch_page("app.py") # Use st.switch_page for full redirect
            else:
                st.error("Invalid username or password.")
                
    st.markdown("---")
    st.markdown("### Demo Accounts:")
    st.markdown("- **Teacher:** `teacher1` / `password123`")
    st.markdown("- **Parent:** `parent1` / `password123`")
    st.markdown("- **Admin:** `admin` / `adminpassword`")

    st.markdown(
        """
        </div>
        """,
        unsafe_allow_html=True
    )
### FILE: utils/data_utils.py

import json
import os
from datetime import datetime

# Define file paths
STUDENT_DATA_FILE = "data/student_data.json"
PARENT_OBSERVATIONS_FILE = "data/parent_observations.json"
APP_SETTINGS_FILE = "data/app_settings.json" # Already in use

def _ensure_data_directory_exists():
    """Ensures that the 'data' directory exists."""
    os.makedirs("data", exist_ok=True)

def _load_json_data(file_path):
    """Loads data from a JSON file. Returns an empty list if file doesn't exist or is empty/corrupt."""
    _ensure_data_directory_exists()
    if not os.path.exists(file_path) or os.stat(file_path).st_size == 0:
        return []
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
            if not isinstance(data, list): # Ensure it's a list, even if file contained a single object
                return [data] if data else []
            return data
    except json.JSONDecodeError:
        print(f"Warning: JSONDecodeError in {file_path}. File might be corrupt or empty. Returning empty list.")
        return []
    except Exception as e:
        print(f"Error loading {file_path}: {e}")
        return []

def _save_json_data(file_path, data):
    """Saves data to a JSON file."""
    _ensure_data_directory_exists()
    try:
        with open(file_path, 'w') as f:
            json.dump(data, f, indent=2)
        return True
    except Exception as e:
        print(f"Error saving to {file_path}: {e}")
        return False

# --- Public API for Student Prediction Data ---

def load_student_data():
    """Loads all student prediction records."""
    return _load_json_data(STUDENT_DATA_FILE)

def save_prediction_data(new_record):
    """Appends a new student prediction record to the data file."""
    records = load_student_data()
    records.append(new_record)
    return _save_json_data(STUDENT_DATA_FILE, records)

# --- Public API for Parent Observation Data ---

def load_parent_observations():
    """Loads all parent observation records."""
    return _load_json_data(PARENT_OBSERVATIONS_FILE)

def save_parent_observation(new_observation):
    """Appends a new parent observation record to the data file."""
    observations = load_parent_observations()
    observations.append(new_observation)
    return _save_json_data(PARENT_OBSERVATIONS_FILE, observations)

# --- Public API for App Settings (Already in utils/language_utils, confirming consistency) ---
# Note: These are defined in language_utils.py, but shown here for context of data files.
# def load_app_settings():
#     return _load_json_data(APP_SETTINGS_FILE) # This would typically return a dict, not a list
# def save_app_settings(settings):
#     return _save_json_data(APP_SETTINGS_FILE, settings)
### FILE: utils/db_utils.py

"""
Simplified database utilities for PostgreSQL integration
Direct database operations without SQLAlchemy complexity
"""

import os
import psycopg2
import json
from datetime import datetime, date
import logging

logger = logging.getLogger(__name__)

def get_db_connection():
    """Get PostgreSQL database connection"""
    try:
        conn = psycopg2.connect(os.environ['DATABASE_URL'])
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

def save_prediction_to_db(prediction_data):
    """Save prediction data to PostgreSQL database"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        
        # Get or create student
        student_name = prediction_data.get('student_name', 'Unknown Student')
        grade_level = prediction_data.get('grade_level', 'Unknown')
        
        cur.execute(
            "SELECT id FROM students WHERE name = %s",
            (student_name,)
        )
        student_record = cur.fetchone()
        
        if student_record:
            student_id = student_record[0]
        else:
            cur.execute(
                "INSERT INTO students (name, grade_level) VALUES (%s, %s) RETURNING id",
                (student_name, grade_level)
            )
            student_id = cur.fetchone()[0]
        
        # Insert prediction
        cur.execute("""
            INSERT INTO predictions (
                student_id, math_score, reading_score, writing_score, 
                attendance, behavior, literacy, prediction, probability, 
                risk_level, notes, timestamp
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            student_id,
            prediction_data.get('math_score'),
            prediction_data.get('reading_score'),
            prediction_data.get('writing_score'),
            prediction_data.get('attendance'),
            prediction_data.get('behavior'),
            prediction_data.get('literacy'),
            prediction_data.get('prediction'),
            prediction_data.get('probability'),
            prediction_data.get('risk_level'),
            prediction_data.get('notes', ''),
            datetime.fromisoformat(prediction_data.get('timestamp', datetime.now().isoformat()))
        ))
        
        conn.commit()
        logger.info(f"Prediction saved for student: {student_name}")
        return True
        
    except Exception as e:
        conn.rollback()
        logger.error(f"Error saving prediction: {e}")
        return False
    finally:
        conn.close()

def save_parent_observation_to_db(observation_data):
    """Save parent observation to PostgreSQL database"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        
        # Get or create student
        child_name = observation_data.get('child_name', 'Unknown Child')
        
        cur.execute(
            "SELECT id FROM students WHERE name = %s",
            (child_name,)
        )
        student_record = cur.fetchone()
        
        if student_record:
            student_id = student_record[0]
        else:
            cur.execute(
                "INSERT INTO students (name, grade_level) VALUES (%s, %s) RETURNING id",
                (child_name, 'Unknown')
            )
            student_id = cur.fetchone()[0]
        
        # Convert subjects_struggled list to JSON string
        subjects_struggled = observation_data.get('subjects_struggled', [])
        if isinstance(subjects_struggled, list):
            subjects_struggled = json.dumps(subjects_struggled)
        
        # Insert observation
        cur.execute("""
            INSERT INTO parent_observations (
                student_id, child_name, date, homework_completion, reading_time,
                focus_level, subjects_struggled, behavior_rating, mood_rating,
                sleep_hours, energy_level, social_interactions, learning_wins,
                challenges_faced, strategies_used, screen_time, physical_activity,
                medication_taken, special_events, timestamp
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            student_id,
            child_name,
            datetime.fromisoformat(observation_data.get('date', date.today().isoformat())),
            observation_data.get('homework_completion'),
            observation_data.get('reading_time'),
            observation_data.get('focus_level'),
            subjects_struggled,
            observation_data.get('behavior_rating'),
            observation_data.get('mood_rating'),
            observation_data.get('sleep_hours'),
            observation_data.get('energy_level'),
            observation_data.get('social_interactions', ''),
            observation_data.get('learning_wins', ''),
            observation_data.get('challenges_faced', ''),
            observation_data.get('strategies_used', ''),
            observation_data.get('screen_time'),
            observation_data.get('physical_activity'),
            observation_data.get('medication_taken', False),
            observation_data.get('special_events', ''),
            datetime.fromisoformat(observation_data.get('timestamp', datetime.now().isoformat()))
        ))
        
        conn.commit()
        logger.info(f"Parent observation saved for: {child_name}")
        return True
        
    except Exception as e:
        conn.rollback()
        logger.error(f"Error saving parent observation: {e}")
        return False
    finally:
        conn.close()

def load_student_predictions():
    """Load all student prediction data from database"""
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cur = conn.cursor()
        cur.execute("""
            SELECT p.*, s.name, s.grade_level 
            FROM predictions p 
            JOIN students s ON p.student_id = s.id 
            ORDER BY p.timestamp DESC
        """)
        
        predictions = []
        for row in cur.fetchall():
            prediction_dict = {
                'id': row[0],
                'math_score': row[2],
                'reading_score': row[3],
                'writing_score': row[4],
                'attendance': row[5],
                'behavior': row[6],
                'literacy': row[7],
                'prediction': row[8],
                'probability': row[9],
                'risk_level': row[10],
                'notes': row[11],
                'timestamp': row[12].isoformat(),
                'student_name': row[13],
                'grade_level': row[14]
            }
            predictions.append(prediction_dict)
        
        return predictions
        
    except Exception as e:
        logger.error(f"Error loading predictions: {e}")
        return []
    finally:
        conn.close()

def load_parent_observations():
    """Load all parent observation data from database"""
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cur = conn.cursor()
        cur.execute("""
            SELECT po.*, s.name 
            FROM parent_observations po 
            JOIN students s ON po.student_id = s.id 
            ORDER BY po.timestamp DESC
        """)
        
        observations = []
        for row in cur.fetchall():
            # Parse subjects_struggled back to list
            subjects_struggled = row[8] or '[]'
            try:
                subjects_struggled = json.loads(subjects_struggled)
            except json.JSONDecodeError:
                subjects_struggled = []
            
            observation_dict = {
                'id': row[0],
                'child_name': row[2],
                'date': row[3].isoformat(),
                'homework_completion': row[4],
                'reading_time': row[5],
                'focus_level': row[6],
                'subjects_struggled': subjects_struggled,
                'behavior_rating': row[9],
                'mood_rating': row[10],
                'sleep_hours': row[11],
                'energy_level': row[12],
                'social_interactions': row[13],
                'learning_wins': row[14],
                'challenges_faced': row[15],
                'strategies_used': row[16],
                'screen_time': row[17],
                'physical_activity': row[18],
                'medication_taken': row[19],
                'special_events': row[20],
                'timestamp': row[21].isoformat()
            }
            observations.append(observation_dict)
        
        return observations
        
    except Exception as e:
        logger.error(f"Error loading observations: {e}")
        return []
    finally:
        conn.close()

def authenticate_user_db(username, password):
    """Authenticate user against database"""
    conn = get_db_connection()
    if not conn:
        return None
    
    try:
        cur = conn.cursor()
        cur.execute(
            "SELECT id, username, user_type, full_name, email, created_date FROM users WHERE username = %s AND password = %s",
            (username, password)
        )
        user_record = cur.fetchone()
        
        if user_record:
            return {
                'id': user_record[0],
                'username': user_record[1],
                'user_type': user_record[2],
                'full_name': user_record[3],
                'email': user_record[4],
                'created_date': user_record[5].isoformat()
            }
        return None
        
    except Exception as e:
        logger.error(f"Error authenticating user: {e}")
        return None
    finally:
        conn.close()

def get_database_stats():
    """Get database statistics"""
    conn = get_db_connection()
    if not conn:
        return {
            'total_students': 0,
            'total_predictions': 0,
            'total_observations': 0,
            'total_users': 0,
            'last_prediction_date': None,
            'last_observation_date': None
        }
    
    try:
        cur = conn.cursor()
        
        # Get counts
        cur.execute("SELECT COUNT(*) FROM students")
        total_students = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM predictions")
        total_predictions = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM parent_observations")
        total_observations = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        
        # Get latest dates
        cur.execute("SELECT MAX(timestamp) FROM predictions")
        latest_prediction = cur.fetchone()[0]
        
        cur.execute("SELECT MAX(timestamp) FROM parent_observations")
        latest_observation = cur.fetchone()[0]
        
        return {
            'total_students': total_students,
            'total_predictions': total_predictions,
            'total_observations': total_observations,
            'total_users': total_users,
            'last_prediction_date': latest_prediction.isoformat() if latest_prediction else None,
            'last_observation_date': latest_observation.isoformat() if latest_observation else None
        }
        
    except Exception as e:
        logger.error(f"Error getting database stats: {e}")
        return {
            'total_students': 0,
            'total_predictions': 0,
            'total_observations': 0,
            'total_users': 0,
            'last_prediction_date': None,
            'last_observation_date': None
        }
    finally:
        conn.close()
### FILE: utils/educational_images.py

"""
Educational image utility functions for EduScan Somalia
Provides diverse educational SVG images and graphics
"""

def get_classroom_scene():
    """Classroom learning scene SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Classroom background -->
        <rect width="300" height="200" fill="#f0f9ff"/>
        <!-- Blackboard -->
        <rect x="20" y="30" width="80" height="50" fill="#2d3748" rx="4"/>
        <text x="60" y="50" text-anchor="middle" fill="white" font-size="12">Math</text>
        <text x="60" y="65" text-anchor="middle" fill="white" font-size="10">2 + 3 = 5</text>
        
        <!-- Students -->
        <g id="student1">
            <circle cx="150" cy="100" r="15" fill="#8B4513"/>
            <rect x="145" y="115" width="10" height="25" fill="#4CAF50"/>
            <circle cx="145" cy="130" r="3" fill="#FFD700"/>
            <circle cx="155" cy="130" r="3" fill="#FFD700"/>
        </g>
        
        <g id="student2">
            <circle cx="200" cy="100" r="15" fill="#DEB887"/>
            <rect x="195" y="115" width="10" height="25" fill="#2196F3"/>
            <circle cx="195" cy="130" r="3" fill="#FFD700"/>
            <circle cx="205" cy="130" r="3" fill="#FFD700"/>
        </g>
        
        <!-- Teacher -->
        <g id="teacher">
            <circle cx="60" cy="90" r="18" fill="#A0522D"/>
            <rect x="52" y="108" width="16" height="30" fill="#800080"/>
            <rect x="75" y="95" width="8" height="15" fill="#8B4513"/>
        </g>
        
        <!-- Books and supplies -->
        <rect x="250" y="140" width="20" height="15" fill="#FF4444" rx="2"/>
        <rect x="270" y="135" width="20" height="15" fill="#44FF44" rx="2"/>
        <circle cx="230" cy="160" r="8" fill="#4444FF"/>
        
        <text x="150" y="190" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="14">Engaged Learning</text>
    </svg>
    """

def get_student_success():
    """Student achievement SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background gradient -->
        <defs>
            <linearGradient id="successGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#FFE4B5;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#F0E68C;stop-opacity:1" />
            </linearGradient>
        </defs>
        <rect width="300" height="200" fill="url(#successGrad)"/>
        
        <!-- Trophy -->
        <ellipse cx="150" cy="70" rx="25" ry="30" fill="#FFD700"/>
        <rect x="140" y="100" width="20" height="20" fill="#FFD700"/>
        <rect x="135" y="120" width="30" height="10" fill="#CD853F"/>
        
        <!-- Stars around trophy -->
        <polygon points="100,50 102,56 108,56 103,60 105,66 100,62 95,66 97,60 92,56 98,56" fill="#FFD700"/>
        <polygon points="200,50 202,56 208,56 203,60 205,66 200,62 195,66 197,60 192,56 198,56" fill="#FFD700"/>
        <polygon points="120,30 122,36 128,36 123,40 125,46 120,42 115,46 117,40 112,36 118,36" fill="#FFD700"/>
        <polygon points="180,30 182,36 188,36 183,40 185,46 180,42 175,46 177,40 172,36 178,36" fill="#FFD700"/>
        
        <!-- Student celebrating -->
        <circle cx="150" cy="130" r="20" fill="#DEB887"/>
        <rect x="140" y="150" width="20" height="35" fill="#4CAF50"/>
        <!-- Arms raised -->
        <rect x="125" y="140" width="15" height="8" fill="#DEB887" transform="rotate(-30 132 144)"/>
        <rect x="160" y="140" width="15" height="8" fill="#DEB887" transform="rotate(30 167 144)"/>
        
        <text x="150" y="195" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="14">Academic Excellence</text>
    </svg>
    """

def get_learning_progress():
    """Learning progress chart SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="300" height="200" fill="#f8fafc"/>
        
        <!-- Chart axes -->
        <line x1="50" y1="150" x2="250" y2="150" stroke="#333" stroke-width="2"/>
        <line x1="50" y1="150" x2="50" y2="50" stroke="#333" stroke-width="2"/>
        
        <!-- Progress bars -->
        <rect x="70" y="130" width="30" height="20" fill="#4CAF50"/>
        <rect x="110" y="110" width="30" height="40" fill="#2196F3"/>
        <rect x="150" y="90" width="30" height="60" fill="#FF9800"/>
        <rect x="190" y="70" width="30" height="80" fill="#9C27B0"/>
        
        <!-- Labels -->
        <text x="85" y="170" text-anchor="middle" font-size="10">Week 1</text>
        <text x="125" y="170" text-anchor="middle" font-size="10">Week 2</text>
        <text x="165" y="170" text-anchor="middle" font-size="10">Week 3</text>
        <text x="205" y="170" text-anchor="middle" font-size="10">Week 4</text>
        
        <!-- Y-axis labels -->
        <text x="45" y="155" text-anchor="end" font-size="10">0</text>
        <text x="45" y="130" text-anchor="end" font-size="10">25</text>
        <text x="45" y="105" text-anchor="end" font-size="10">50</text>
        <text x="45" y="80" text-anchor="end" font-size="10">75</text>
        <text x="45" y="55" text-anchor="end" font-size="10">100</text>
        
        <!-- Title -->
        <text x="150" y="30" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="16">Learning Progress</text>
        <text x="150" y="190" text-anchor="middle" fill="#666" font-size="12">Continuous Improvement</text>
    </svg>
    """

def get_teacher_resources():
    """Teacher resources SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="300" height="200" fill="#fff8e1"/>
        
        <!-- Books stack -->
        <rect x="50" y="130" width="60" height="8" fill="#FF5722"/>
        <rect x="50" y="122" width="60" height="8" fill="#2196F3"/>
        <rect x="50" y="114" width="60" height="8" fill="#4CAF50"/>
        <rect x="50" y="106" width="60" height="8" fill="#FF9800"/>
        
        <!-- Computer/tablet -->
        <rect x="150" y="110" width="80" height="50" fill="#333" rx="4"/>
        <rect x="155" y="115" width="70" height="40" fill="#87CEEB"/>
        <circle cx="190" cy="135" r="15" fill="#FFD700"/>
        <text x="190" y="140" text-anchor="middle" font-size="10" fill="#333">AI</text>
        
        <!-- Teaching materials -->
        <circle cx="260" cy="120" r="20" fill="#9C27B0"/>
        <rect x="252" y="112" width="16" height="16" fill="white"/>
        <line x1="256" y1="116" x2="268" y2="128" stroke="#9C27B0" stroke-width="2"/>
        <line x1="256" y1="128" x2="268" y2="116" stroke="#9C27B0" stroke-width="2"/>
        
        <!-- Ruler -->
        <rect x="120" y="80" width="60" height="6" fill="#8B4513"/>
        <line x1="125" y1="80" x2="125" y2="86" stroke="white"/>
        <line x1="135" y1="80" x2="135" y2="86" stroke="white"/>
        <line x1="145" y1="80" x2="145" y2="86" stroke="white"/>
        <line x1="155" y1="80" x2="155" y2="86" stroke="white"/>
        <line x1="165" y1="80" x2="165" y2="86" stroke="white"/>
        <line x1="175" y1="80" x2="175" y2="86" stroke="white"/>
        
        <text x="150" y="30" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="16">Teaching Excellence</text>
        <text x="150" y="190" text-anchor="middle" fill="#666" font-size="12">Professional Resources</text>
    </svg>
    """

def get_parent_support():
    """Parent support scene SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="300" height="200" fill="#f0f8e8"/>
        
        <!-- House outline -->
        <polygon points="150,50 100,90 200,90" fill="#8B4513"/>
        <rect x="120" y="90" width="60" height="60" fill="#DEB887"/>
        <rect x="140" y="110" width="20" height="40" fill="#654321"/>
        <rect x="130" y="100" width="12" height="12" fill="#87CEEB"/>
        <rect x="158" y="100" width="12" height="12" fill="#87CEEB"/>
        
        <!-- Parent and child -->
        <!-- Parent -->
        <circle cx="100" cy="130" r="15" fill="#A0522D"/>
        <rect x="92" y="145" width="16" height="25" fill="#4CAF50"/>
        
        <!-- Child -->
        <circle cx="80" cy="140" r="12" fill="#DEB887"/>
        <rect x="74" y="152" width="12" height="20" fill="#FF4444"/>
        
        <!-- Book between them -->
        <rect x="85" y="135" width="8" height="12" fill="#2196F3"/>
        
        <!-- Hearts showing love/support -->
        <polygon points="120,110 122,108 126,108 123,111 124,115 120,113 116,115 117,111 114,108 118,108" fill="#FF69B4"/>
        <polygon points="200,120 202,118 206,118 203,121 204,125 200,123 196,125 197,121 194,118 198,118" fill="#FF69B4"/>
        
        <!-- Learning materials on ground -->
        <circle cx="240" cy="160" r="8" fill="#FFD700"/>
        <rect x="220" y="155" width="15" height="10" fill="#9C27B0"/>
        <rect x="260" y="150" width="12" height="15" fill="#FF5722"/>
        
        <text x="150" y="30" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="16">Family Learning</text>
        <text x="150" y="190" text-anchor="middle" fill="#666" font-size="12">Home Support System</text>
    </svg>
    """

def get_assessment_tools():
    """Assessment tools SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="300" height="200" fill="#fef7f0"/>
        
        <!-- Clipboard -->
        <rect x="100" y="50" width="80" height="100" fill="#F5F5DC" stroke="#333" stroke-width="2"/>
        <rect x="110" y="40" width="60" height="20" fill="#333"/>
        <circle cx="140" cy="50" r="3" fill="white"/>
        
        <!-- Checklist items -->
        <rect x="115" y="70" width="8" height="8" fill="#4CAF50"/>
        <text x="128" y="78" font-size="10">Math Skills</text>
        <line x1="116" y1="74" x2="122" y2="76" stroke="white" stroke-width="2"/>
        
        <rect x="115" y="85" width="8" height="8" fill="#4CAF50"/>
        <text x="128" y="93" font-size="10">Reading</text>
        <line x1="116" y1="89" x2="122" y2="91" stroke="white" stroke-width="2"/>
        
        <rect x="115" y="100" width="8" height="8" fill="#FF9800"/>
        <text x="128" y="108" font-size="10">Writing</text>
        
        <rect x="115" y="115" width="8" height="8" fill="#F44336"/>
        <text x="128" y="123" font-size="10">Attention</text>
        
        <!-- Magnifying glass -->
        <circle cx="220" cy="100" r="20" fill="none" stroke="#333" stroke-width="3"/>
        <line x1="235" y1="115" x2="250" y2="130" stroke="#333" stroke-width="3"/>
        
        <!-- Brain icon in magnifying glass -->
        <circle cx="220" cy="100" r="12" fill="#FF69B4"/>
        <path d="M220,95 Q215,90 220,88 Q225,90 220,95" fill="#FF1493"/>
        <path d="M220,105 Q215,110 220,112 Q225,110 220,105" fill="#FF1493"/>
        
        <text x="150" y="30" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="16">Assessment Tools</text>
        <text x="150" y="190" text-anchor="middle" fill="#666" font-size="12">Comprehensive Evaluation</text>
    </svg>
    """

def get_brain_development():
    """Brain development SVG"""
    return """
    <svg width="300" height="200" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="300" height="200" fill="#fff0f5"/>
        
        <!-- Brain outline -->
        <ellipse cx="150" cy="100" rx="60" ry="40" fill="#FFB6C1" stroke="#FF69B4" stroke-width="2"/>
        
        <!-- Neural networks -->
        <g stroke="#FF1493" stroke-width="1" fill="none">
            <!-- Network connections -->
            <line x1="120" y1="80" x2="140" y2="90"/>
            <line x1="140" y1="90" x2="160" y2="85"/>
            <line x1="160" y1="85" x2="180" y2="95"/>
            <line x1="140" y1="90" x2="155" y2="110"/>
            <line x1="155" y1="110" x2="170" y2="105"/>
            <line x1="120" y1="120" x2="140" y2="110"/>
            <line x1="170" y1="105" x2="185" y2="115"/>
        </g>
        
        <!-- Neural nodes -->
        <circle cx="120" cy="80" r="3" fill="#FF1493"/>
        <circle cx="140" cy="90" r="3" fill="#FF1493"/>
        <circle cx="160" cy="85" r="3" fill="#FF1493"/>
        <circle cx="180" cy="95" r="3" fill="#FF1493"/>
        <circle cx="155" cy="110" r="3" fill="#FF1493"/>
        <circle cx="170" cy="105" r="3" fill="#FF1493"/>
        <circle cx="120" cy="120" r="3" fill="#FF1493"/>
        <circle cx="185" cy="115" r="3" fill="#FF1493"/>
        
        <!-- Learning symbols around brain -->
        <text x="80" y="70" font-size="16">📚</text>
        <text x="220" y="70" font-size="16">🧮</text>
        <text x="80" y="130" font-size="16">✏️</text>
        <text x="220" y="130" font-size="16">🎨</text>
        
        <!-- Growth arrows -->
        <polygon points="100,50 105,45 110,50 105,40 105,55" fill="#4CAF50"/>
        <polygon points="200,50 205,45 210,50 205,40 205,55" fill="#4CAF50"/>
        
        <text x="150" y="30" text-anchor="middle" fill="#FF6B35" font-weight="bold" font-size="16">Cognitive Development</text>
        <text x="150" y="180" text-anchor="middle" fill="#666" font-size="12">Neural Growth & Learning</text>
    </svg>
    """

def get_diverse_educational_images():
    """Returns a dictionary of diverse educational SVG images"""
    return {
        'classroom_scene': get_classroom_scene(),
        'student_success': get_student_success(),
        'learning_progress': get_learning_progress(),
        'teacher_resources': get_teacher_resources(),
        'parent_support': get_parent_support(),
        'assessment_tools': get_assessment_tools(),
        'brain_development': get_brain_development()
    }
### FILE: utils/exact_ui.py

# utils/exact_ui.py
"""
Exact UI components matching the provided EduScan design mockup based on attached images.
Clean, modern, Gumroad/Notion-like design with animations and robust Streamlit CSS overrides.
Enhanced "non-vanilla" design with richer visuals and subtle animations.
"""
import streamlit as st
import os
import base64
# Import ALL necessary icon utilities. SVG functions will ONLY be used for non-interactive display (like stat cards).
from utils.icon_utils import (
    get_dashboard_icon, get_assessment_icon, get_teacher_icon,
    get_parent_icon, get_research_icon, get_checkmark_icon,
    get_warning_icon, get_error_icon, get_settings_icon,
    get_total_students_icon, get_on_track_icon, get_at_risk_icon, get_intervention_icon,
    get_material_icon_html, # NEW: Import the Material Icons HTML generator
    get_lightbulb_icon, get_rocket_icon, get_puzzle_icon, get_brain_icon,
    get_chart_line_icon, get_chart_pie_icon, get_table_icon, get_ruler_icon,
    get_gamepad_icon, get_book_icon, get_laptop_icon, get_handshake_icon,
    get_school_icon, get_family_icon, get_admin_icon, get_student_icon
)
# Import ALL necessary language utilities
from utils.language_utils import get_text, save_app_settings, load_app_settings
from utils.auth_utils import is_authenticated, logout_user, get_user_role # Import auth utilities
from utils.image_base64 import get_base64_images # Import to access the b64 image dictionary

def custom_alert(message, icon_html="", alert_type="info"):
    colors = {
        "info": "#fff3cd",      # Yellow
        "success": "#d4edda",   # Green
        "warning": "#fff3cd",   # Yellow
        "error": "#f8d7da"      # Red
    }
    borders = {
        "info": "#ffeeba",
        "success": "#c3e6cb",
        "warning": "#ffeeba",
        "error": "#f5c6cb"
    }
    st.markdown(
        f"""
        <div style='background-color:{colors[alert_type]}; border-left: 6px solid {borders[alert_type]}; padding: 1rem; border-radius: 0.5rem;'>
            {icon_html} {message}
        </div>
        """,
        unsafe_allow_html=True
    )

def add_exact_ui_styles():
    """Add modern, mobile-first CSS styles for Streamlit"""
    # Load background image from get_base64_images() in image_base64.py
    b64_images = get_base64_images()
    background_image_b64 = b64_images.get('image_83d859', '')

    bg_image_css = f"url('{background_image_b64}')" if background_image_b64 else "none"
    bg_color_fallback = "#f9fafb" # Light background color if image fails

    st.markdown(f"""
    <style>
        /* Import Inter font (if not already handled by a global setup) */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        /* NEW: Import Google Material Symbols font */
        @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');
        @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');
        @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');
        
        :root {{
            /* Define brand colors */
            --primary-purple: #8b5cf6;
            --secondary-blue: #3b82f6;
            --success-green: #10b981;
            --warning-orange: #f59e0b;
            --danger-red: #ef4444;
            --info-blue: #3b82f6;

            /* Grayscale colors */
            --gray-900: #111827;
            --gray-800: #1f2937;
            --gray-700: #374151;
            --gray-600: #4b5563;
            --gray-500: #6b7280;
            --gray-400: #9ca3af;
            --gray-300: #d1d5db;
            --gray-200: #e5e7eb;
            --gray-100: #f3f4f6;
            --gray-50: #f9fafb;
            --white: #ffffff;

            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

            /* Transitions */
            --transition-ease: all 0.3s ease;
        }}

        /* Dark mode variables */
        body[data-theme="Dark"] {{
            --primary-purple: #a78bfa;
            --secondary-blue: #60a5fa;
            --success-green: #34d399;
            --warning-orange: #fbbf24;
            --danger-red: #f87171;
            --info-blue: #60a5fa;

            --gray-900: #f9fafb;
            --gray-800: #e0e0e0;
            --gray-700: #d1d5db;
            --gray-600: #9ca3af;
            --gray-500: #6b7280; /* Text color for muted elements */
            --gray-400: #4b5563;
            --gray-300: #374151;
            --gray-200: #2a3038; /* Lighter dark backgrounds */
            --gray-100: #1f2937; /* Even lighter dark backgrounds */
            --gray-50: #111827; /* Main dark background */
            --white: #1f2937; /* Card background in dark mode */
        }}

        /* Reset and base styles */
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        html, body {{
            font-family: 'Inter', sans-serif !important;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            text-rendering: optimizeLegibility;
            line-height: 1.6;
            color: var(--gray-700);
            background-color: var(--gray-50); /* Main app background */
            height: 100vh;
            width: 100vw;
            overflow-x: hidden;
        }}

        /* Global background image setup (transparent overlay on top) */
        body {{
            background-image: {bg_image_css} !important;
            background-size: cover !important;
            background-repeat: no-repeat !important;
            background-attachment: fixed !important;
            background-position: center center !important;
            background-color: var(--gray-50) !important; /* Fallback color */
        }}
        .stApp, .main {{
            background-color: transparent !important; /* Make Streamlit's base divs transparent */
            font-family: 'Inter', sans-serif !important; 
            color: var(--gray-700); 
            min-height: 100vh;
            position: relative;
            z-index: 0;
        }}
        .stApp::before, .main::before {{ /* Semi-transparent overlay over background image */
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(240,242,245,0.7) !important; /* Light overlay */
            z-index: -1; 
        }}
        body[data-theme="Dark"] .stApp::before, body[data-theme="Dark"] .main::before {{
            background: rgba(17,24,39,0.8) !important; /* Dark overlay */
        }}

        /* Hide Streamlit default elements */
        #MainMenu, footer, header, .stDeployButton, .stDecoration {{ display: none !important; }}

        /* Hamburger menu icon color */
        .stSidebar .st-emotion-cache-eq8clt, /* Hamburger menu */
        .stSidebar .st-emotion-cache-1cypcdb > div > button /* Expander button */ {{
            color: var(--primary-purple) !important;
            opacity: 1 !important;
        }}

        /* Material Symbols general styling */
        .material-symbols-outlined, .material-symbols-rounded, .material-symbols-sharp, .material-symbols-fill {{
            font-family: 'Material Symbols Outlined'; /* Use outlined as default for non-filled */
            font-weight: normal;
            font-style: normal;
            font-size: 24px; /* Default size, override with specific classes */
            display: inline-block;
            line-height: 1;
            text-transform: none;
            letter-spacing: normal;
            word-wrap: normal;
            white-space: nowrap;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
            vertical-align: middle; /* Align with text */
        }}
        .material-symbols-rounded {{ font-family: 'Material Symbols Rounded'; }}
        .material-symbols-sharp {{ font-family: 'Material Symbols Sharp'; }}
        .material-symbols-fill {{ font-family: 'Material Symbols Outlined'; font-variation-settings: 'FILL' 1; }} /* For filled style, still use outlined font and apply fill settings */


        /* Main content area structure */
        .main .block-container {{
            background: var(--white); /* Card background, lighter shade in dark mode */
            border-radius: 12px; 
            padding: clamp(1rem, 4vw, 2rem) !important; /* Responsive padding */
            margin: 1rem auto !important;
            max-width: 1200px;
            width: 100%;
            box-shadow: var(--shadow-lg);
            transition: var(--transition-ease);
        }}
        
        /* Sidebar Styling */
        .css-1d391kg, .css-1cypcdb, section[data-testid="stSidebar"] {{
            background: var(--white) !important;
            border-right: 1px solid var(--gray-200) !important;
            box-shadow: var(--shadow-md);
            width: 280px !important;
            min-width: 280px !important;
            max-width: 280px !important;
            padding: 0 !important;
            transition: var(--transition-ease);
        }}
        div[data-testid="stSidebarNav"] {{ display: none !important; }} /* Hide default nav */
        .css-1d391kg > div:first-child > div[data-testid="stVerticalBlock"] {{
            padding: 1.5rem !important;
            display: flex;
            flex-direction: column;
            height: 100vh; /* Full viewport height */
            gap: 1.5rem;
        }}

        /* Sidebar Brand */
        .sidebar-brand {{
            display: flex;
            align-items: center;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            margin-bottom: 1.5rem;
        }}
        .sidebar-logo {{
            width: 48px; height: 48px;
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue));
            border-radius: 12px;
            display: flex; align-items: center; justify-content: center;
            color: white; font-weight: 700; font-size: 18px; margin-right: 12px;
            box-shadow: var(--shadow-sm);
            flex-shrink: 0;
        }}
        .sidebar-title {{ font-size: 20px; font-weight: 800; color: var(--gray-900); line-height: 1.2; }}
        .sidebar-subtitle {{ font-size: 14px; color: var(--gray-500); line-height: 1.3; margin-top: 2px; }}

        /* Sidebar Navigation Links */
        .nav-section-header {{
            font-size: 12px; font-weight: 600; color: var(--gray-400); text-transform: uppercase;
            letter-spacing: 0.05em; margin: 0.5rem 0; padding-left: 4px;
        }}
        div[data-testid^="stPageLink"] {{
            margin-bottom: 0.5rem;
            border-radius: 12px;
            overflow: hidden;
            transition: var(--transition-ease);
        }}
        div[data-testid^="stPageLink"] > a {{
            padding: 12px 16px; border-radius: 12px; text-decoration: none;
            color: var(--gray-600); font-weight: 500; font-size: 14px;
            display: flex; align-items: center; gap: 12px; width: 100%; min-height: 48px;
            border: 1px solid transparent; transition: var(--transition-ease);
        }}
        div[data-testid^="stPageLink"] > a:hover {{
            background: var(--gray-50); color: var(--gray-700); transform: translateX(4px);
            border-color: var(--gray-200);
        }}
        div[data-testid^="stPageLink"] > a[aria-current="page"] {{
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)) !important;
            color: white !important; font-weight: 600 !important;
            box-shadow: 0 4px 6px -1px rgba(139, 92, 246, 0.3) !important;
            border-color: transparent !important;
            transform: translateX(0); /* Reset transform for active */
        }}
        /* Style the actual HTML icon within st.page_link (which are spans with Material Symbols font) */
        div[data-testid^="stPageLink"] > a .material-symbols-outlined, .material-symbols-rounded, .material-symbols-sharp {{
            font-size: 20px; /* Adjust size for nav icons */
            color: var(--gray-500); /* Default icon color */
            transition: var(--transition-ease);
            font-variation-settings: 'wght' 400; /* Regular weight for nav icons */
        }}
        div[data-testid^="stPageLink"] > a:hover .material-symbols-outlined,
        div[data-testid^="stPageLink"] > a[aria-current="page"] .material-symbols-outlined {{
            color: white !important; /* White icon on hover/active for contrast */
        }}


        /* Sidebar Settings Section */
        .settings-section {{
            margin-top: auto; /* Push to bottom */
            padding-top: 1.5rem; border-top: 1px solid var(--gray-200);
        }}
        /* Custom labels for settings */
        .settings-label {{
            font-weight: 600; color: var(--gray-700); font-size: 14px; margin-bottom: 0.5rem; display: block;
            text-align: left; /* Ensure alignment */
        }}


        /* Form Control Overrides (Selectbox, Radio, Checkbox) */
        /* Target Streamlit's internal label for collapsed label alignment */
        div[data-testid="stSelectbox"] > label[data-testid="stWidgetLabel"] {{
            display: none; /* Hide default label when custom label is used */
        }}
        /* Actual selectbox input control */
        .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div {{
            background: var(--gray-50) !important; 
            border: 1px solid var(--gray-300) !important;
            border-radius: 8px !important; 
            padding: 8px 12px !important; 
            color: var(--gray-700) !important;
            font-size: 14px !important; 
            transition: var(--transition-ease); 
            box-shadow: var(--shadow-sm);
            width: 100%; /* Ensure it fills container */
        }}
        .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div:hover {{ background: var(--white) !important; border-color: var(--gray-400) !important; }}
        .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div:focus-within {{
            border-color: var(--primary-purple) !important; 
            box-shadow: 0 0 0 3px rgba(var(--primary-purple-rgb), 0.1) !important;
        }}
        /* Ensure dropdown icon is colored */
        .stSelectbox .st-bv .st-dg svg {{ color: var(--gray-500); }}


        /* Radio buttons for theme selection */
        div[data-testid="stRadio"] > label[data-testid="stWidgetLabel"] {{
            display: none; /* Hide default label when custom label is used */
        }}
        .stRadio div[role="radiogroup"] {{ display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; margin-top: 8px; }} /* Changed to 2 columns for Light/Dark/System */
        .stRadio div[data-testid="stRadio"] label {{
            background: var(--gray-50); border: 1px solid var(--gray-300); border-radius: 8px;
            padding: 8px 12px; cursor: pointer; transition: var(--transition-ease);
            font-weight: 500; color: var(--gray-600); text-align: center; font-size: 12px;
            min-height: 36px; display: flex; align-items: center; justify-content: center;
        }}
        .stRadio div[data-testid="stRadio"] label:hover {{ background: var(--gray-100); border-color: var(--gray-400); }}
        .stRadio div[data-testid="stRadio"] input:checked + div {{
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)) !important;
            color: white !important; border-color: transparent !important; box-shadow: var(--shadow-md) !important;
        }}


        /* Modern toggle switch for Offline Mode */
        .stCheckbox > label[data-testid="stWidgetLabel"] {{ /* Target the default label for Streamlit checkbox */
            display: none; /* Hide default label */
        }}
        /* The visual checkbox control */
        .stCheckbox span.st-emotion-cache-ch5f2v {{
            position: relative; width: 44px; height: 24px; appearance: none;
            background: var(--gray-300); border-radius: 12px; transition: var(--transition-ease);
            cursor: pointer; flex-shrink: 0;
        }}
        .stCheckbox input[type="checkbox"]:checked + span.st-emotion-cache-ch5f2v {{ background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)); }}
        .stCheckbox input[type="checkbox"]::before {{
            content: ''; position: absolute; top: 2px; left: 2px;
            width: 20px; height: 20px; background: white; border-radius: 50%;
            transition: var(--transition-ease); box-shadow: var(--shadow-sm);
        }}
        .stCheckbox input[type="checkbox"]:checked + span.st-emotion-cache-ch5f2v::before {{ transform: translateX(20px); }}
        /* For the text next to the checkbox, often automatically generated by Streamlit */
        .stCheckbox > label > div > p {{
            font-weight: 600; color: var(--gray-700); font-size: 14px; /* Ensure text matches custom labels */
        }}
        /* Adjust alignment for the checkbox item itself */
        div[data-testid="stCheckbox"] {{
            margin-top: 1rem; /* Space below theme radio */
        }}
        div[data-testid="stCheckbox"] > label {{
            display: flex; /* Make the label itself a flex container */
            justify-content: space-between; /* Push checkbox to end */
            align-items: center;
            width: 100%;
        }}


        /* Status indicator (at the bottom of sidebar) */
        .status-indicator {{
            display: flex; align-items: center; justify-content: space-between;
            padding: 12px 16px; background: var(--gray-50); border-radius: 12px;
            border: 1px solid var(--gray-200); margin-top: 1rem;
        }}
        .status-dot {{ width: 8px; height: 8px; border-radius: 50%; margin-right: 8px; }}
        .status-online {{ background-color: var(--success-green); }}
        .status-offline {{ background-color: var(--warning-orange); }}

        /* Main Page Header */
        .page-header {{
            background: var(--white); border-bottom: 1px solid var(--gray-200);
            padding: 2rem; margin-bottom: 2rem; border-radius: 16px;
            box-shadow: var(--shadow-sm); transition: var(--transition-ease);
            display: flex; flex-direction: column; align-items: flex-start;
        }}
        .page-title {{
            font-size: 2.25rem; font-weight: 800; color: var(--gray-900);
            margin-bottom: 0.5rem; line-height: 1.2;
        }}
        /* Style the actual HTML icon within the page title */
        .page-title .material-symbols-outlined, .page-title .material-symbols-rounded {{
            font-size: 36px; /* Larger icon for page title */
            vertical-align: middle;
            margin-right: 8px;
            color: var(--primary-purple); /* Color the icon */
            font-variation-settings: 'wght' 600; /* Make it bolder */
        }}
        .page-subtitle {{
            font-size: 1.125rem; color: var(--gray-500);
            margin-bottom: 1rem; line-height: 1.5;
        }}
        .status-badge {{
            display: inline-flex; align-items: center;
            padding: 6px 12px; background: #dcfdf7; color: #065f46;
            border-radius: 20px; font-size: 14px; font-weight: 500;
            border: 1px solid #a7f3d0;
        }}
        .status-badge.offline {{
            background: #fef3c7; color: #92400e; border-color: #fcd34d;
        }}

        /* Metric Cards */
        .metric-card {{
            background: var(--white); border-radius: 16px; padding: 1.5rem;
            box-shadow: var(--shadow-sm); border: 1px solid var(--gray-200);
            transition: var(--transition-ease); height: 100%; display: flex;
            flex-direction: column; justify-content: space-between;
        }}
        .metric-card:hover {{
            transform: translateY(-4px); box-shadow: var(--shadow-md);
            border-color: var(--gray-300);
        }}
        .metric-header {{
            display: flex; justify-content: space-between; align-items: flex-start;
            margin-bottom: 1rem;
        }}
        .metric-label {{ font-size: 14px; font-weight: 500; color: var(--gray-600); line-height: 1.4; }}
        .metric-icon {{
            width: 48px; height: 48px; border-radius: 12px; display: flex;
            align-items: center; justify-content: center; color: white;
            font-size: 20px; flex-shrink: 0;
        }}
        .metric-icon .material-symbols-outlined, .metric-icon .material-symbols-rounded {{
            font-size: 28px; /* Larger icons for metric cards */
            color: white;
            font-variation-settings: 'wght' 500; /* Adjust weight for icons */
        }}
        .metric-icon.total {{ background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)); box-shadow: var(--shadow-sm); }}
        .metric-icon.on-track {{ background: linear-gradient(135deg, var(--success-green), #059669); box-shadow: var(--shadow-sm); }}
        .metric-icon.at-risk {{ background: linear-gradient(135deg, var(--warning-orange), #d97706); box-shadow: var(--shadow-sm); }}
        .metric-icon.intervention {{ background: linear-gradient(135deg, var(--danger-red), #dc2626); box-shadow: var(--shadow-sm); }}
        .metric-number {{ font-size: 2.5rem; font-weight: 800; color: var(--gray-900); line-height: 1; margin-bottom: 0.5rem; }}
        .metric-change {{ font-size: 14px; font-weight: 500; color: var(--gray-500); display: flex; align-items: center; gap: 4px; }}
        .metric-change.positive {{ color: var(--success-green); }}
        .metric-change.negative {{ color: var(--danger-red); }}

        /* Chart Containers */
        .chart-container {{
            background: var(--white); border-radius: 16px; padding: 1.5rem;
            box-shadow: var(--shadow-sm); border: 1px solid var(--gray-200);
            transition: var(--transition-ease); margin-bottom: 2rem;
        }}
        .chart-container:hover {{ transform: translateY(-4px); box-shadow: var(--shadow-md); border-color: var(--gray-300); }}
        .chart-title {{ font-size: 1.25rem; font-weight: 700; color: var(--gray-900); margin-bottom: 0.5rem; }}
        .chart-subtitle {{ font-size: 14px; color: var(--gray-500); margin-bottom: 1.5rem; }}

        /* Data Tables */
        .stDataFrame {{ border-radius: 12px; overflow: hidden; box-shadow: var(--shadow-sm); }}
        .stDataFrame table {{ border-collapse: separate; border-spacing: 0; }}
        .stDataFrame th {{ background: var(--gray-50); color: var(--gray-700); font-weight: 600; font-size: 14px; padding: 12px 16px; border-bottom: 1px solid var(--gray-200); }}
        .stDataFrame td {{ padding: 12px 16px; border-bottom: 1px solid var(--gray-100); font-size: 14px; }}
        .stDataFrame tbody tr:hover {{ background: var(--gray-50); }}

        /* Modern Buttons */
        .stButton button {{
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue));
            color: white; border: none; border-radius: 12px; padding: 12px 24px;
            font-weight: 600; font-size: 14px; cursor: pointer;
            transition: var(--transition-ease); box-shadow: var(--shadow-md);
        }}
        .stButton button:hover {{ transform: translateY(-2px); box-shadow: var(--shadow-lg); }}
        .stButton button:active {{ transform: translateY(0); box-shadow: var(--shadow-sm); }}

        /* Modern Text Inputs / Text Areas / Number Inputs */
        div[data-testid="stTextInput"] input, div[data-testid="stTextArea"] textarea, div[data-testid="stNumberInput"] input {{
            background: var(--gray-50) !important;
            border: 1px solid var(--gray-300) !important;
            border-radius: 8px !important;
            padding: 10px 14px !important;
            font-size: 1em !important;
            color: var(--gray-800) !important;
            transition: var(--transition-ease) !important;
            box-shadow: inset var(--shadow-sm);
        }}
        div[data-testid="stTextInput"] input:focus, div[data-testid="stTextArea"] textarea:focus, div[data-testid="stNumberInput"] input:focus {{
            border-color: var(--primary-purple) !important;
            box-shadow: 0 0 0 3px rgba(var(--primary-purple-rgb), 0.15) !important;
            outline: none !important;
        }}
        
        /* Sliders */
        div[data-testid="stSlider"] {{
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;
        }}
        div[data-testid="stSlider"] label {{
            font-weight: 600;
            color: var(--gray-700);
            font-size: 14px;
            margin-bottom: 0.5rem;
        }}
        .stSlider .st-fx {{ /* Track */
            background: var(--gray-300);
            height: 6px;
            border-radius: 3px;
        }}
        .stSlider .st-fy {{ /* Filled track */
            background: linear-gradient(to right, var(--secondary-blue), var(--primary-purple));
            height: 6px;
            border-radius: 3px;
        }}
        .stSlider .st-fz {{ /* Thumb */
            background: white;
            border: 2px solid var(--primary-purple);
            width: 20px;
            height: 20px;
            border-radius: 50%;
            box-shadow: var(--shadow-sm);
            transition: var(--transition-ease);
        }}
        .stSlider .st-fz:hover {{
            box-shadow: 0 0 0 8px rgba(var(--primary-purple-rgb), 0.1);
        }}

        /* Expander */
        button[data-testid="stExpanderToggleIcon"] svg {{
            color: var(--primary-purple);
            transition: var(--transition-ease);
        }}
        button[data-testid="stExpanderToggleIcon"]:hover svg {{
            transform: scale(1.1);
        }}
        div[data-testid="stExpander"] {{
            border: 1px solid var(--gray-200);
            border-radius: 12px;
            box-shadow: var(--shadow-sm);
            transition: var(--transition-ease);
        }}
        div[data-testid="stExpander"]:hover {{
            box-shadow: var(--shadow-md);
            border-color: var(--gray-300);
        }}
        div[data-testid="stExpander"] div[data-testid="stVerticalBlock"] {{
            padding: 1rem;
        }}
        div[data-testid="stExpander"] > div > div > div > p {{
            font-weight: 600;
            color: var(--gray-800);
        }}


        /* --- Image container responsiveness --- */
        /* Base container for images with controlled aspect ratio */
        .image-aspect-ratio-container {{
            position: relative;
            width: 100%;
            padding-bottom: 56.25%; /* Default 16:9 aspect ratio */
            overflow: hidden;
            border-radius: 8px;
            display: flex; /* For centering fallback text */
            justify-content: center;
            align-items: center;
            background: var(--gray-100); /* Fallback background for container - prevents white overlays */
            transition: var(--transition-ease);
        }}
        /* Specific aspect ratios */
        .image-aspect-ratio-container.aspect-4-3 {{ padding-bottom: 75%; }}
        .image-aspect-ratio-container.aspect-1-1 {{ padding-bottom: 100%; }}

        .image-aspect-ratio-container img {{
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain; /* Default: ensures entire image is visible without cropping */
            border-radius: 8px;
            transition: var(--transition-ease);
        }}
        /* Class to apply for images that should fill the container, even if cropped */
        .image-aspect-ratio-container.object-fit-cover-mode img {{
            object-fit: cover; 
        }}
        /* Fallback text styling */
        .image-aspect-ratio-container span {{
            position: absolute; color: var(--gray-500); text-align: center; font-size: 0.8em; padding: 10px;
        }}


        /* Responsive Image Grids (e.g., student-showcase, teacher-showcase, family-showcase) */
        /* These classes are applied to the parent div that holds the image cards */
        .student-showcase, .teacher-showcase, .family-showcase, .image-gallery-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); /* Min width for cards, auto-fit to columns */
            gap: 1rem; /* Spacing between cards */
            margin-bottom: 1.5rem;
        }}

        /* Ensure cards within these grids take full height of their grid cell */
        .student-card, .teacher-card, .family-card {{
            display: flex; flex-direction: column; height: 100%; justify-content: space-between;
            padding: 1rem; background: var(--white); border-radius: 12px;
            box-shadow: var(--shadow-sm); border: 1px solid var(--gray-200);
            transition: var(--transition-ease);
        }}
        .student-card:hover, .teacher-card:hover, .family-card:hover {{
            transform: translateY(-4px); box-shadow: var(--shadow-md); border-color: var(--gray-300);
        }}
        /* Images within these cards (now using the image-aspect-ratio-container) */
        .student-card .image-aspect-ratio-container, 
        .teacher-card .image-aspect-ratio-container, 
        .family-card .image-aspect-ratio-container {{
            padding-bottom: 66.66%; /* Consistent 3:2 aspect ratio for card images */
            margin-bottom: 0.5rem;
            height: auto; /* Let padding-bottom control height */
        }}
        
        /* Header Image Container (for smaller images with headings like Academic Performance) */
        .header-image-container {{
            display: block; width: 100%; height: 120px; /* Consistent fixed height for header images */
            overflow: hidden; border-radius: 8px; margin-top: 0.5rem; /* Space from heading */
            margin-bottom: 1rem; /* Space below header image */
            background: var(--gray-100); /* Fallback background for container */
            text-align: center; /* Center image horizontally */
        }}
        .header-image-container .image-aspect-ratio-container {{
            height: 100%; padding-bottom: 0; /* Make the aspect ratio container fill its explicit height */
            background: transparent; /* No background here, just let image fill */
        }}
        .header-image-container .image-aspect-ratio-container img {{
            object-fit: contain; /* Ensure full image is visible, no cropping for headers */
        }}

        /* Hero Image Container (for large banners at the top of pages) */
        .hero-image-container {{
            width: 100%;
            padding-bottom: 35%; /* Example: ~2.8:1 aspect ratio for a wide hero */
            overflow: hidden;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            background: var(--gray-100); /* Fallback background */
        }}
        .hero-image-container .image-aspect-ratio-container {{
            padding-bottom: 0; /* Fixed height for hero if container explicitly sized */
            height: 100%;
        }}
        .hero-image-container .image-aspect-ratio-container img {{
            object-fit: cover; /* Hero images usually cover, some cropping is okay */
        }}

        /* Login Container Specific Styling */
        .login-container {{
            max-width: 450px; /* Constrain width */
            margin: 50px auto; /* Center horizontally, add top/bottom margin */
            padding: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: var(--shadow-lg);
            text-align: center;
        }}
        .login-container h1 {{
            color: var(--primary-purple); /* Match brand color */
            font-size: 2.2em;
            margin-bottom: 15px;
        }}
        .login-container .stMarkdown p {{
            color: var(--gray-700);
            font-size: 1.1em;
            margin-bottom: 25px;
        }}
        .login-container .stForm {{
            padding: 0; /* Remove default form padding */
            border: none; /* Remove default form border */
        }}
        .login-container .stTextInput label,
        .login-container .stSelectbox label,
        .login-container .stRadio label,
        .login-container .stCheckbox label {{
            font-weight: 500;
            color: var(--gray-700);
            text-align: left;
            display: block;
            margin-bottom: 5px;
        }}
        .login-container .stTextInput div[data-testid="stInputContainer"] input {{
            border-radius: 8px;
            border: 1px solid var(--gray-300);
            padding: 10px 14px;
            font-size: 1em;
            color: var(--gray-800);
        }}
        .login-container .stButton button {{
            width: 100%;
            padding: 12px 20px;
            font-size: 1.1em;
            font-weight: 600;
            border-radius: 8px;
            margin-top: 20px;
        }}
        .login-container hr {{
            margin-top: 30px;
            margin-bottom: 20px;
        }}
        .login-container h3 {{
            color: var(--gray-600);
            font-size: 1.1em;
            margin-bottom: 10px;
        }}
        .login-container ul {{
            list-style: none;
            padding: 0;
            margin: 0;
            color: var(--gray-500);
            font-size: 0.95em;
        }}
        .login-container ul li {{
            margin-bottom: 5px;
        }}


        /* Theme-specific CSS overrides (basic example) */
        body[data-theme="Dark"] {{
            background-color: var(--gray-900) !important;
            color: var(--gray-100) !important;
        }}
        body[data-theme="Dark"] .stApp::before, body[data-theme="Dark"] .main::before {{
            background: rgba(var(--gray-900-rgb),0.8) !important;
        }}
        body[data-theme="Dark"] .main .block-container,
        body[data-theme="Dark"] .metric-card,
        body[data-theme="Dark"] .section-card,
        body[data-theme="Dark"] .chart-container, /* Changed from .chart-section */
        body[data-theme="Dark"] .css-1d391kg, body[data-theme="Dark"] .css-1cypcdb,
        body[data-theme="Dark"] .login-container
        {{
            background: var(--gray-800) !important;
            color: var(--gray-100) !important;
            border-color: var(--gray-700) !important;
            box-shadow: var(--shadow-xl) !important;
        }}
        body[data-theme="Dark"] .page-title, .metric-number, .chart-title {{
            color: var(--gray-100) !important;
        }}
        body[data-theme="Dark"] .page-subtitle, .metric-label, .chart-subtitle,
        body[data-theme="Dark"] .stSelectbox label, .stRadio > label, .stCheckbox > label,
        body[data-theme="Dark"] .sidebar-subtitle, .status-indicator span,
        body[data-theme="Dark"] .login-container .stMarkdown p,
        body[data-theme="Dark"] .login-container h3,
        body[data-theme="Dark"] .login-container ul li
        {{
            color: var(--gray-400) !important;
        }}

        body[data-theme="Dark"] .stButton button {{
            background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)) !important;
            color: white !important;
            border-color: var(--primary-purple) !important;
            box-shadow: 0 4px 12px rgba(var(--primary-purple-rgb), 0.4) !important;
        }}
        body[data-theme="Dark"] .stButton button:hover {{ background: linear-gradient(135deg, #9b6cff, #4a94ff) !important; }}
        body[data-theme="Dark"] .metric-icon.total {{ background: linear-gradient(135deg, var(--primary-purple), var(--secondary-blue)); }}
        body[data-theme="Dark"] .metric-icon.on-track {{ background: linear-gradient(135deg, var(--success-green), #27a27b); }}
        body[data-theme="Dark"] .metric-icon.at-risk {{ background: linear-gradient(135deg, var(--warning-orange), #c26703); }}
        body[data-theme="Dark"] .metric-icon.intervention {{ background: linear-gradient(135deg, var(--danger-red), #b61c1c); }}
        body[data-theme="Dark"] .metric-change.positive {{ color: var(--success-green); }}
        body[data-theme="Dark"] .metric-change.negative {{ color: var(--danger-red); }}

        body[data-theme="Dark"] .status-badge.online {{ background: rgba(52, 211, 153, 0.2) !important; color: var(--success-green) !important; border-color: var(--success-green) !important; }}
        body[data-theme="Dark"] .status-badge.offline {{ background: rgba(251, 191, 36, 0.2) !important; color: var(--warning-orange) !important; border-color: var(--warning-orange) !important; }}

        /* Dark mode inputs */
        body[data-theme="Dark"] div[data-testid="stTextInput"] input, body[data-theme="Dark"] div[data-testid="stTextArea"] textarea, div[data-testid="stNumberInput"] input,
        body[data-theme="Dark"] .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div,
        body[data-theme="Dark"] .stRadio div[data-testid="stRadio"] label,
        body[data-theme="Dark"] .stCheckbox input[type="checkbox"]
        {{
            background: var(--gray-700) !important;
            border-color: var(--gray-600) !important;
            color: var(--gray-100) !important;
        }}
        body[data-theme="Dark"] .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div:hover {{ background: var(--gray-600) !important; }}
        body[data-theme="Dark"] .stRadio div[data-testid="stRadio"] label:hover {{ background: var(--gray-600) !important; }}
        body[data-theme="Dark"] .stSlider .st-fx {{ background: var(--gray-600); }}
        body[data-theme="Dark"] .stSlider .st-fy {{ background: linear-gradient(to right, var(--secondary-blue), var(--primary-purple)); }}
        body[data-theme="Dark"] .stSlider .st-fz {{ background: var(--gray-900); border-color: var(--primary-purple); }}

        body[data-theme="Dark"] .stDataFrame th {{ background: var(--gray-700) !important; color: var(--gray-300) !important; border-bottom-color: var(--gray-600) !important; }}
        body[data-theme="Dark"] .stDataFrame td {{ border-bottom-color: var(--gray-700) !important; }}
        body[data-theme="Dark"] .stDataFrame tbody tr:hover {{ background: var(--gray-700); }}

        /* Image Containers Dark Mode */
        body[data-theme="Dark"] .image-aspect-ratio-container,
        body[data-theme="Dark"] .hero-image-container,
        body[data-theme="Dark"] .header-image-container {{
            background: var(--gray-700); /* Darker background for contained images */
        }}
        body[data-theme="Dark"] .image-aspect-ratio-container span {{
            color: var(--gray-500); /* Darker fallback text */
        }}


        /* --- Responsive Design --- */
        /* Tablet (>= 768px and < 1200px) */
        @media (max-width: 1200px) and (min-width: 768px) {{
            .main .block-container {{
                margin-left: 1rem !important;
                margin-right: 1rem !important;
                width: calc(100% - 2rem) !important;
                padding: clamp(1rem, 3vw, 1.5rem) !important;
            }}
            
            div[data-testid="stVerticalBlock"] > div[data-testid="stVerticalBlock"] {{
                flex-wrap: wrap;
                gap: 1rem;
                align-items: stretch;
            }}
            
            div[data-testid="stColumn"] {{
                min-width: 280px !important;
                flex-basis: calc(50% - 0.5rem) !important;
                width: auto !important;
                padding: 0 !important;
            }}
            
            .metric-card, .section-card, .chart-container {{
                width: 100% !important;
                margin-bottom: 0 !important;
            }}
            
            .app-header-section {{
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }}
            .app-main-title, .app-subtitle-tagline, .app-status-tag {{
                flex-basis: 100%;
            }}
            .header-buttons {{
                width: 100%; justify-content: flex-start; flex-wrap: wrap; gap: 0.5rem;
            }}
            .stButton button {{ flex-grow: 1; min-width: unset; }}

            .hero-image-container {{ height: 200px; padding-bottom: 0; }}
            .image-gallery-grid .image-aspect-ratio-container {{ padding-bottom: 75%; height: auto; }}
            .header-image-container {{ height: 100px; }}
            .login-container {{ max-width: 70% !important; }}
        }}

        /* Mobile devices (max-width: 767px) */
        @media (max-width: 767px) {{
            .css-1d391kg, .css-1cypcdb {{ display: none !important; }}
            .main .block-container {{ margin-left: 0.5rem !important; margin-right: 0.5rem !important; width: calc(100% - 1rem) !important; padding: 1rem !important; }}
            
            .app-header-section {{ flex-direction: column; align-items: flex-start; margin-bottom: 1rem; text-align: left; }}
            .app-main-title {{ font-size: 1.5rem !important; margin-bottom: 0.5rem; }}
            .app-subtitle-tagline {{ font-size: 0.8rem !important; margin-bottom: 0.5rem; }}
            .app-status-tag {{ font-size: 0.7rem !important; padding: 3px 6px; margin-bottom: 1rem; }}
            .header-buttons {{ width: 100%; justify-content: flex-start; margin-top: 0; flex-wrap: wrap; gap: 0.5rem; }}
            .stButton button {{ flex: 1 1 auto; min-width: 120px; padding: 8px 12px; font-size: 0.8rem !important; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }}
            
            div[data-testid="stVerticalBlock"] > div[data-testid="stVerticalBlock"] {{ flex-direction: column !important; gap: 1rem; }}
            div[data-testid="stColumn"] {{ width: 100% !important; flex-basis: auto !important; max-width: none !important; padding: 0 !important; margin: 0 !important; }}
            
            .metric-card, .section-card, .chart-container {{ padding: 15px !important; margin-bottom: 1rem; width: 100% !important; }}
            
            .list-item {{ flex-wrap: wrap; align-items: flex-start; padding: 10px 0; }}
            .list-item .item-meta {{ flex-direction: column; align-items: flex-start; gap: 4px; width: 100%; margin-top: 0.5rem; }}
            .list-item .item-time {{ font-size: 0.7rem !important; }}
            .risk-badge {{ font-size: 0.6rem !important; padding: 2px 6px !important; }}
            
            .stSelectbox, .stRadio, .stCheckbox {{ margin-bottom: 1rem; }}
            .stSelectbox > div[data-testid="stSelectbox"] > div:first-child > div {{ padding: 10px 12px !important; font-size: 0.9rem !important; }}
            
            .stat-number {{ font-size: 2rem !important; margin-bottom: 0.3rem; }}
            .stat-label {{ font-size: 0.8rem !important; line-height: 1.2; }}
            .stat-subtitle {{ font-size: 0.75rem !important; line-height: 1.3; margin-top: 0.3rem; }}
            
            .hero-image-container {{ height: 120px; padding-bottom: 0; }}
            .image-gallery-grid .image-aspect-ratio-container {{ padding-bottom: 0; height: 80px; }}
            .header-image-container {{ height: 60px; }}
            .login-container {{ max-width: 90% !important; padding: 20px !important; }}
        }}

        /* Extra small devices (max-width: 480px) */
        @media (max-width: 480px) {{
            .main .block-container {{ margin: 0.25rem !important; width: calc(100% - 0.5rem) !important; padding: 0.75rem !important; border-radius: 8px !important; }}
            .app-main-title {{ font-size: 1.3rem !important; line-height: 1.1; }}
            .app-subtitle-tagline {{ font-size: 0.75rem !important; }}
            .metric-card, .section-card, .chart-container {{ padding: 12px !important; border-radius: 8px !important; }}
            .stat-number {{ font-size: 1.8rem !important; }}
            .stButton button {{ padding: 6px 10px !important; font-size: 0.75rem !important; min-height: 36px !important; }}
            
            .sidebar-title, .sidebar-subtitle, .app-main-title, .app-subtitle-tagline, .stat-label, .stat-subtitle, .list-item .item-title, .list-item .item-subtitle {{
                word-break: break-word; overflow-wrap: anywhere; hyphens: auto;
            }}
            .hero-image-container {{ height: 80px; }}
            .image-gallery-grid .image-aspect-ratio-container {{ height: 50px; }}
            .header-image-container {{ height: 40px; }}
        }}

        /* Animations */
        @keyframes fadeIn {{ from {{ opacity: 0; transform: translateY(20px); }} to {{ opacity: 1; transform: translateY(0); }} }}
        @keyframes slideInDown {{ from {{ opacity: 0; transform: translateY(-20px); }} to {{ opacity: 1; transform: translateY(0); }} }}
        @keyframes slideInRight {{ from {{ opacity: 0; transform: translateX(-10px); }} to {{ opacity: 1; transform: translateX(0); }} }}
        @keyframes pulseDot {{ 0% {{ transform: scale(1); opacity: 1; }} 50% {{ transform: scale(1.1); opacity: 0.7; }} 100% {{ transform: scale(1); opacity: 1; }} }}
        @keyframes scaleIn {{ from {{ opacity: 0; transform: scale(0.9); }} to {{ opacity: 1; transform: scale(1); }} }}
    </style>
    """, unsafe_allow_html=True)


def render_exact_sidebar(): # This function remains as the main sidebar renderer
    """Render the modern sidebar with improved styling"""
    with st.sidebar:
        # Modern brand section
        st.markdown("""
        <div class="sidebar-brand">
            <div class="sidebar-logo">ES</div>
            <div>
                <div class="sidebar-title">EduScan</div>
                <div class="sidebar-subtitle">Learning Assessment Tool</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        # Navigation section
        st.markdown('<div class="nav-section-header">Navigation</div>', unsafe_allow_html=True)
        
        # Get user role for conditional navigation
        user_role = get_user_role()
        language = st.session_state.get('app_language', 'English')
        
        # Navigation links (using st.page_link for Streamlit's MPA routing)
        # Icons for st.page_link will be emojis, but their styling (color/size) will be controlled by CSS
        st.page_link("app.py", label=get_text('dashboard', language), icon=":material/dashboard:")
        st.page_link("pages/01_Prediction.py", label=get_text('prediction', language), icon=":material/search:")

        if user_role in ['teacher', 'admin']:
            st.page_link("pages/02_Teacher_Resources.py", label=get_text('teacher_resources', language), icon=":material/school:")
        if user_role in ['parent', 'admin']:
            st.page_link("pages/03_Parent_Tracker.py", label=get_text('parent_tracker', language), icon=":material/family_restroom:")
            
        st.page_link("pages/04_Educational_Content.py", label=get_text('educational_content', language), icon=":material/menu_book:")
        
        st.markdown("<hr>", unsafe_allow_html=True) # Separator below navigation

        # --- Settings Section in Sidebar ---
        st.markdown('<div class="settings-section">', unsafe_allow_html=True)
        st.markdown('<div class="nav-section-header">Settings</div>', unsafe_allow_html=True)

        # Language selector
        st.markdown('<p class="settings-label">Language</p>', unsafe_allow_html=True) # Custom label for better alignment
        current_language = st.session_state.get('app_language', 'English')
        languages = {'English': 'English', 'Somali': 'Somali', 'Arabic': 'Arabic'}
        selected_language = st.selectbox(
            "Select Language", # Streamlit label, will be collapsed
            list(languages.keys()),
            index=list(languages.keys()).index(current_language),
            key="sidebar_lang_select_all_pages",
            label_visibility="collapsed" # Hide default Streamlit label
        )

        if selected_language != current_language:
            st.session_state['app_language'] = selected_language
            settings = load_app_settings()
            settings['language'] = selected_language
            save_app_settings(settings)
            st.rerun()

        # Theme selector
        st.markdown('<p class="settings-label">Theme</p>', unsafe_allow_html=True) # Custom label
        current_theme = st.session_state.get('app_theme', 'Light')
        themes = ['Light', 'Dark', 'System'] # Changed 'EduScan Theme' to 'System' for consistency with OS preference
        selected_theme = st.radio(
            "Choose Theme", # Streamlit label, will be collapsed
            themes,
            index=themes.index(current_theme),
            key="sidebar_theme_select_all_pages",
            horizontal=True,
            label_visibility="collapsed" # Hide default Streamlit label
        )

        if selected_theme != current_theme:
            st.session_state['app_theme'] = selected_theme
            settings = load_app_settings()
            settings['theme'] = selected_theme
            save_app_settings(settings)
            st.markdown(f"""
                <script>
                    document.body.setAttribute('data-theme', '{selected_theme}');
                </script>
            """, unsafe_allow_html=True)
            st.rerun()

        # Offline mode toggle
        st.markdown('<p class="settings-label">Connection</p>', unsafe_allow_html=True) # Custom label
        current_offline = st.session_state.get('offline_mode', False)
        # Use a more explicit label for the checkbox itself, but keep it as a Streamlit widget.
        offline_mode = st.checkbox(
            "Offline Mode", # Actual label visible
            value=current_offline,
            key="sidebar_offline_toggle_all_pages",
        )

        if offline_mode != current_offline:
            st.session_state['offline_mode'] = offline_mode
            settings = load_app_settings()
            settings['offline_mode'] = offline_mode
            save_app_settings(settings)
            st.rerun()

        # Status indicator
        is_offline_status = st.session_state.get('offline_mode', False)
        status_text = get_text('offline_mode', language) if is_offline_status else get_text('online_mode', language)
        status_dot_class = "status-offline" if is_offline_status else "status-online"
        
        st.markdown(f"""
        <div class="status-indicator">
            <div style="display: flex; align-items: center;">
                <div class="status-dot {status_dot_class}"></div>
                <span style="font-size: 14px; font-weight: 500;">Status: {status_text}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True) # Close settings-section

        # Logout button (only if authenticated)
        if is_authenticated():
            st.markdown("---")
            if st.button(":material/logout: Logout", use_container_width=True, key="sidebar_logout_button"):
                logout_user()

def render_exact_page_header(icon_html, title_key, subtitle_key, language): # Changed icon_emoji to icon_html
    """Render modern page header"""
    is_offline = st.session_state.get('offline_mode', False)
    status_class = "status-badge offline" if is_offline else "status-badge"
    status_text = get_text('offline_mode', language) if is_offline else get_text('online_mode', language)
    
    st.markdown(f"""
    <div class="page-header">
        <h1 class="page-title">{icon_html} {get_text(title_key, language)}</h1>
        <p class="page-subtitle">{get_text(subtitle_key, language)}</p>
        <div class="{status_class}">
            <div class="status-dot {'status-offline' if is_offline else 'status-online'}"></div>
            {status_text}
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_exact_metric_card(label_key, number, change_text, icon_html, icon_class, change_type="positive"): # Renamed from create_modern_metric_card
    """Create a modern metric card"""
    change_class = f"metric-change {change_type}"
    language = st.session_state.get('app_language', 'English')
    
    return f"""
    <div class="metric-card">
        <div class="metric-header">
            <div class="metric-label">{get_text(label_key, language)}</div>
            <div class="metric-icon {icon_class}">{icon_html}</div>
        </div>
        <div class="metric-number">{number}</div>
        <div class="{change_class}">{change_text}</div>
    </div>
    """

def create_exact_chart_container(title, subtitle, content_html=""): # Renamed from create_modern_chart_container
    """Create a modern chart container"""
    # content_html is expected to be raw HTML that will be placed inside
    return f"""
    <div class="chart-container">
        <h3 class="chart-title">{title}</h3>
        <p class="chart-subtitle">{subtitle}</p>
        {content_html}
    </div>
    """

def get_b64_image_html(base64_data, alt_text, aspect_ratio="16/9", cover_mode=False):
    """
    Generates HTML for a base64 image, wrapped in an aspect-ratio-controlled container.
    
    Args:
        base64_data (str): The base64 encoded image string (e.g., "data:image/jpeg;base64,...").
        alt_text (str): Alt text for the image.
        aspect_ratio (str): Aspect ratio as "width/height" (e.g., "16/9", "4/3", "1/1").
        cover_mode (bool): If True, object-fit is 'cover'. If False, 'contain'.
    Returns:
        str: HTML string for the image container.
    """
    object_fit_class = "object-fit-cover-mode" if cover_mode else ""
    
    # Calculate padding-bottom for aspect ratio trick
    padding_bottom_percentage = "56.25%" # Default to 16:9
    if aspect_ratio == "4/3":
        padding_bottom_percentage = "75%"
    elif aspect_ratio == "1/1":
        padding_bottom_percentage = "100%"
    else:
        try:
            w, h = map(int, aspect_ratio.split('/'))
            padding_bottom_percentage = f"{(h/w * 100):.2f}%"
        except ValueError:
            pass # Keep default if custom aspect_ratio is invalid

    if not base64_data:
        # Fallback div if image not found
        return f"""
        <div class="image-aspect-ratio-container" style="padding-bottom: {padding_bottom_percentage}; background: var(--gray-200);">
            <span>Image:<br>{alt_text}<br>(Not Found)</span>
        </div>
        """
    
    return f"""
    <div class="image-aspect-ratio-container {object_fit_class}" style="padding-bottom: {padding_bottom_percentage};">
        <img src="{base64_data}" alt="{alt_text}">
    </div>
    """
### FILE: utils/icon_utils.py

# utils/icon_utils.py
"""
Material Symbols icons for EduScan application.
"""

def get_material_icon_html(icon_name, style="outlined"):
    """
    Returns HTML for a Material Symbol icon.
    'style' can be 'outlined', 'rounded', 'sharp', 'filled'.
    """
    if style == "filled":
        # Filled style uses a different class
        return f'<span class="material-symbols-fill">{icon_name}</span>'
    return f'<span class="material-symbols-{style}">{icon_name}</span>'

# Dashboard Icons
def get_dashboard_icon(): return get_material_icon_html("dashboard")
def get_assessment_icon(): return get_material_icon_html("quiz") # Or "assessment"
def get_teacher_icon(): return get_material_icon_html("school")
def get_parent_icon(): return get_material_icon_html("family_restroom")
def get_research_icon(): return get_material_icon_html("science")

# Status Icons
def get_checkmark_icon(): return get_material_icon_html("check_circle")
def get_warning_icon(): return get_material_icon_html("warning")
def get_error_icon(): return get_material_icon_html("error")
def get_settings_icon(): return get_material_icon_html("settings")

# Metric Card Icons (Specific to Dashboard)
def get_total_students_icon(): return get_material_icon_html("group")
def get_on_track_icon(): return get_material_icon_html("track_changes") # Or "trending_up"
def get_at_risk_icon(): return get_material_icon_html("priority_high") # Or "warning"
def get_intervention_icon(): return get_material_icon_html("crisis_alert") # Or "support_agent"

# Other commonly used icons in content
def get_lightbulb_icon(): return get_material_icon_html("lightbulb")
def get_rocket_icon(): return get_material_icon_html("rocket_launch")
def get_puzzle_icon(): return get_material_icon_html("extension")
def get_brain_icon(): return get_material_icon_html("psychology")
def get_chart_line_icon(): return get_material_icon_html("monitoring")
def get_chart_pie_icon(): return get_material_icon_html("pie_chart")
def get_table_icon(): return get_material_icon_html("table_chart")
def get_ruler_icon(): return get_material_icon_html("straighten") # For assessment tools/strategies
def get_gamepad_icon(): return get_material_icon_html("gamepad") # For interactive activities
def get_book_icon(): return get_material_icon_html("book_4") # For educational content/reading
def get_laptop_icon(): return get_material_icon_html("laptop_mac") # For technology tools
def get_handshake_icon(): return get_material_icon_html("handshake") # For support strategies
def get_school_icon(): return get_material_icon_html("school")
def get_family_icon(): return get_material_icon_html("family_restroom")
def get_admin_icon(): return get_material_icon_html("manage_accounts") # Or "admin_panel_settings"
def get_student_icon(): return get_material_icon_html("person")
### FILE: utils/image_base64.py

# utils/image_base64.py
"""
Base64 encoded essential images for reliable display.
Removed most static images, keeping only background and AI result visuals.
"""
import base64
import os

def get_base64_images():
    """Get base64 encoded essential images (background and AI result visuals)."""
    
    def image_to_base64(filename):
        image_path = os.path.join(os.path.dirname(__file__), '..', 'pictures', filename)
        try:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as img_file:
                    return base64.b64encode(img_file.read()).decode('utf-8')
            else:
                print(f"Warning: Image not found at {image_path}. Skipping base64 encoding.")
                return None
        except Exception as e:
            print(f"Error converting {image_path} to base64: {e}")
            return None
    
    # --- Only load essential images ---
    # 1. Main Background Image
    image_83d859_b64 = image_to_base64('image_83d859.jpg')

    # 2. AI Assessment Results Stage Images (as specifically requested to keep)
    academic_performance_b64 = image_to_base64('academic_performance.png') # Often used as exam/chart visual
    girl_reading_book_b64 = image_to_base64('girl reading book.jpg') # Can represent student writing/learning
    smiling_girl_b64 = image_to_base64('smiling girl.jpeg') # Can represent student portrait

    # 3. Specific request to keep 'somali-children-in-class.jpg' for recommendations section
    somali_children_in_class_b64 = image_to_base64('somali-children-in-class.jpg')

    return {
        'image_83d859': f'data:image/jpeg;base64,{image_83d859_b64}' if image_83d859_b64 else '',
        
        # AI Assessment Results specific images
        'academic_performance': f'data:image/png;base64,{academic_performance_b64}' if academic_performance_b64 else '',
        'exam_students': f'data:image/png;base64,{academic_performance_b64}' if academic_performance_b64 else '', # Reusing as a general "exam" visual
        'behavioral_social': f'data:image/png;base64,{academic_performance_b64}' if academic_performance_b64 else '', # Reusing for consistency
        'student_writing': f'data:image/jpeg;base64,{girl_reading_book_b64}' if girl_reading_book_b64 else '',
        'student_portrait': f'data:image/jpeg;base64,{smiling_girl_b64}' if smiling_girl_b64 else '',
        'somali_children_in_class': f'data:image/jpeg;base64,{somali_children_in_class_b64}' if somali_children_in_class_b64 else '',

        # Provide empty strings for keys that are no longer actively mapped to specific images,
        # but might still be referenced in old page code for safety during refactor.
        # This prevents KeyError but will show the 'Not Found' fallback.
        'abc_kids': '', 'girls_in_class': '', 'girls_in_white_hijab': '', 'girls_in_orange_hijab': '',
        'kindergarten': '', 'small_kids_and_teacher': '', 'three_somali_girls': '',
        'student_information_2': '', # Was a placeholder header image
        'daily_tracking': '', 'parent_empowerment': '', 'school_partnership': '',
        'educational_excellence_1': '', 'global_practices': '', 'learning_science': '', 'intervention_studies': '', 'cultural_adaptation': '',
        'teacher_with_students': '', 'happy_young_students': '', 'classroom_girls': '', 'boys_in_classroom': '',
        'engaging_strategies': '', 'assessment_innovation': '',
    }

def get_b64_image_html(base64_data, alt_text, aspect_ratio="16/9", cover_mode=False):
    """
    Generates HTML for a base64 image, wrapped in an aspect-ratio-controlled container.
    
    Args:
        base64_data (str): The base64 encoded image string (e.g., "data:image/jpeg;base64,...").
        alt_text (str): Alt text for the image.
        aspect_ratio (str): Aspect ratio as "width/height" (e.g., "16/9", "4/3", "1/1").
        cover_mode (bool): If True, object-fit is 'cover'. If False, 'contain'.
    Returns:
        str: HTML string for the image container.
    """
    object_fit_class = "object-fit-cover-mode" if cover_mode else ""
    
    padding_bottom_percentage = "56.25%" # Default to 16:9
    if aspect_ratio == "4/3": padding_bottom_percentage = "75%"
    elif aspect_ratio == "1/1": padding_bottom_percentage = "100%"
    else:
        try:
            w, h = map(int, aspect_ratio.split('/'))
            padding_bottom_percentage = f"{(h/w * 100):.2f}%"
        except ValueError: pass

    if not base64_data:
        # Fallback div if image not found (now with transparent background by default)
        return f"""
        <div class="image-aspect-ratio-container" style="padding-bottom: {padding_bottom_percentage}; background: transparent;">
            <span style="color: var(--gray-500); text-align:center; font-size:0.8em; padding:10px;">Image:<br>{alt_text}<br>(Not Found)</span>
        </div>
        """
    
    return f"""
    <div class="image-aspect-ratio-container {object_fit_class}" style="padding-bottom: {padding_bottom_percentage};">
        <img src="{base64_data}" alt="{alt_text}">
    </div>
    """
### FILE: utils/image_utils.py

import streamlit as st
import base64
import os
from PIL import Image
import io

def load_image_as_base64(image_path):
    """Load an image file and convert it to base64 string"""
    try:
        if os.path.exists(image_path):
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode()
        return None
    except Exception as e:
        st.error(f"Error loading image: {str(e)}")
        return None

def get_image_html(image_path, alt_text="Student Image", width="100%", height="auto", border_radius="15px"):
    """Generate HTML for displaying an image with styling"""
    base64_image = load_image_as_base64(image_path)
    if base64_image:
        return f"""
        <img src="data:image/jpeg;base64,{base64_image}" 
             alt="{alt_text}"
             style="width: {width}; 
                    height: {height}; 
                    border-radius: {border_radius};
                    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                    margin: 1rem 0;
                    object-fit: cover;
                    transition: transform 0.3s ease;"
             onmouseover="this.style.transform='scale(1.02)'"
             onmouseout="this.style.transform='scale(1)'">
        """
    else:
        return f"""
        <div style="width: {width}; 
                    height: 200px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border-radius: {border_radius};
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 1.2rem;
                    margin: 1rem 0;">
            {alt_text}
        </div>
        """

def create_image_gallery(image_paths, alt_texts, columns=3):
    """Create a gallery of images in columns"""
    cols = st.columns(columns)
    
    for i, (image_path, alt_text) in enumerate(zip(image_paths, alt_texts)):
        with cols[i % columns]:
            base64_image = load_image_as_base64(image_path)
            if base64_image:
                st.markdown(f"""
                <div style="text-align: center; margin: 1rem 0;">
                    <img src="data:image/jpeg;base64,{base64_image}" 
                         alt="{alt_text}"
                         style="width: 100%; 
                                height: 200px; 
                                border-radius: 15px;
                                box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                                object-fit: cover;
                                transition: transform 0.3s ease;"
                         onmouseover="this.style.transform='scale(1.05)'"
                         onmouseout="this.style.transform='scale(1)'">
                    <p style="margin-top: 0.5rem; font-weight: 500; color: #2c3e50;">{alt_text}</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="text-align: center; margin: 1rem 0;">
                    <div style="width: 100%; 
                                height: 200px; 
                                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                border-radius: 15px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                color: white;
                                font-size: 1.2rem;">
                        {alt_text}
                    </div>
                </div>
                """, unsafe_allow_html=True)

def get_student_images():
    """Get paths to all student images including new authentic Somali student photos"""
    return {
        # New authentic Somali student images
        'classroom_girls': 'attached_assets/ph_20447_72936_1751965339103.jpg',
        'happy_young_students': 'attached_assets/20220420_Slaight Preprimary Education_Garowe_Hill (6)_1751965339106.jpg',
        'teacher_with_students': 'attached_assets/image_2_1751965339106.jpg',
        'boys_in_classroom': 'attached_assets/somalia-children-in-class_1751965339107.jpg',
        
        # Original images as backup
        'exam_students': 'data/Exam-Students_1751918889656.jpg',
        'focused_student': 'data/Ez0BdyeWUAQeFjt_1751918889659.jpg', 
        'happy_students': 'data/IMG_340E6A-360708-5A7F82-28A32F-B00A0B-5C1E93_1751918889660.jpg',
        'student_portrait': 'data/thumbnail_1751918889660.jpg'
    }
### FILE: utils/language_utils.py

import streamlit as st
import json
import os

def load_app_settings():
    """Load application settings from file"""
    settings_file = "data/app_settings.json"
    if os.path.exists(settings_file):
        try:
            with open(settings_file, 'r') as f:
                return json.load(f)
        except:
            pass
    return {'language': 'English', 'theme': 'Modern', 'offline_mode': False}

def save_app_settings(settings):
    """Save application settings to file"""
    settings_file = "data/app_settings.json"
    try:
        # Ensure data directory exists
        os.makedirs(os.path.dirname(settings_file), exist_ok=True)
        with open(settings_file, 'w') as f:
            json.dump(settings, f, indent=2)
        return True
    except Exception as e:
        print(f"Error saving settings: {e}")
        return False

def get_text(key, language=None):
    """Get localized text based on language setting"""
    # Get language from session state or settings if not provided
    if language is None:
        language = st.session_state.get('app_language')
        if language is None:
            settings = load_app_settings()
            language = settings.get('language', 'English')
            st.session_state['app_language'] = language
    
    translations = {
        'English': {
            # Navigation
            'dashboard': 'Dashboard',
            'prediction': 'Prediction', # Used in page_link
            'assessment': 'Assessment',  # Used in page_link and as form title
            'resources': 'Teacher Resources', # Full label for page_link
            'tracker': 'Parent Tracker', # Full label for page_link
            'analytics': 'Analytics', 
            'settings': 'Settings',   
            'educational_content': 'Educational Content', # Full label for page_link

            # Header & Global Status
            'app_title': 'EduScan Somalia',
            'app_subtitle': 'Professional Learning Assessment Application',
            'system_status': 'System Status', 
            'online_mode': 'Online Mode', 
            'offline_mode': 'Offline Mode', 
            'toggle_offline_mode': 'Toggle Offline Mode', 
            'new_assessment_button': 'New Assessment', 

            # Dashboard - System Overview Stat Cards (Labels matching image text)
            'total_students_label': 'Total Students',
            'new_this_month_label': '↑ 12 new this month', 
            'on_track_label': 'On Track',
            'performing_well_label': '↑ 78% performing well', 
            'at_risk_label': 'At Risk',
            'need_support_label': '↑ 15% need support', 
            'intervention_label': 'Intervention',
            'urgent_attention_label': '↑ 7% urgent attention', 


            # Assessment Form
            'assessment_form': 'Assessment Form', 
            'empowering_student_success': 'Empowering Student Success',
            'student_information': 'Student Information',
            'student_name': 'Student Name',
            'grade_level': 'Grade Level',
            'teacher_name': 'Teacher Name', 
            'assessment_date': 'Assessment Date', 
            'academic_performance': 'Academic Performance',
            'behavioral_social_indicators': 'Behavioral & Social Indicators',
            'math_score': 'Math Score (0-100)',
            'reading_score': 'Reading Score (0-100)',
            'writing_score': 'Writing Score (0-100)',
            'attendance': 'School Attendance (%)',
            'behavior_rating': 'Behavior Rating (1-5)', 
            'literacy_level': 'Literacy Level (1-10)', 
            'analyze_learning_risk': 'Analyze Learning Risk',
            'clear_form': 'Clear Form',
            'assessment_results': 'AI Assessment Results',
            'comprehensive_assessment': 'Comprehensive learning assessment completed for',
            'risk_level': 'Risk Level',
            'recommendations': 'Recommendations',
            'low_risk': 'Low Risk',
            'medium_risk': 'Medium Risk',  
            'high_risk': 'High Risk',
            'confidence': 'Confidence',
            'teacher_notes': 'Teacher Notes',
            'prediction_saved_success': 'Prediction saved successfully!',
            'prediction_save_error': 'Error saving prediction.',
            'model_not_available': 'Model not available. Please check model files.',
            'error_making_prediction': 'Error making prediction:',
            'is_performing_well': 'is performing well. Continue current teaching methods.',
            'maintain_academic_support': 'Maintain current academic support',
            'consider_enrichment': 'Consider enrichment activities',
            'regular_monitoring': 'Regular progress monitoring',
            'may_need_additional_support': 'may need additional support.',
            'provide_targeted_interventions': 'Provide targeted interventions',
            'increase_one_on_one': 'Increase one-on-one support',
            'monitor_weekly': 'Monitor progress weekly',
            'requires_immediate_intervention': 'requires immediate intervention.',
            'implement_intensive_program': 'Implement intensive support program',
            'daily_monitoring': 'Daily progress monitoring',
            'consider_specialist': 'Consider specialist evaluation',
            
            # Teacher Resources
            'teacher_resources': 'Teacher Resources', 
            'supporting_every_teacher': 'Supporting Every Teacher, Reaching Every Student',
            'inclusive_classroom_excellence': 'Inclusive Classroom Excellence',
            'professional_development': 'Professional development resources designed for inclusive classroom success',
            'create_learning_environments': 'Create learning environments where every student thrives through differentiated instruction',
            'build_strong_partnerships': 'Build strong partnerships with families and specialists for comprehensive student support',
            'implement_culturally_responsive': 'Implement culturally responsive teaching methods that connect with Somali students',
            'use_multiple_assessment': 'Use multiple assessment methods to accurately gauge student progress and needs',
            'teaching_excellence_showcase': 'Teaching Excellence Showcase',
            'resource_categories': 'Resource Categories',
            'choose_resource_type': 'Choose resource type:',
            'differentiated_learning_strategies': 'Differentiated Learning Strategies',
            'inclusive_classroom_tips': 'Inclusive Classroom Tips',
            'intervention_techniques': 'Intervention Techniques',
            'assessment_strategies': 'Assessment Strategies',
            'activity_generator': 'Activity Generator',
            'teaching_strategies': 'Teaching Strategies', 
            'learning_activities': 'Learning Activities', 
            'assessment_tools': 'Assessment Tools', 
            'classroom_management': 'Classroom Management',
            'differentiation_techniques': 'Differentiation Techniques',
            'technology_integration': 'Technology Integration',
            'cultural_sensitivity': 'Cultural Sensitivity',
            'difficulty_focus': 'Difficulty Focus',
            'target_difficulty': 'Target difficulty:',
            'reading_language': 'Reading/Language',
            'mathematics': 'Mathematics',
            'writing': 'Writing',
            'attention_focus': 'Attention/Focus',
            'memory': 'Memory',
            'processing_speed': 'Processing Speed',
            'social_skills': 'Social Skills',
            'behavioral_issues': 'Behavioral Issues',
            'generate_teaching_strategy': 'Generate Teaching Strategy',
            'strategy_generated': 'Teaching Strategy Generated!',
            'interactive_learning_activities': 'Interactive Learning Activities',
            'generate_activity_ideas': 'Generate Activity Ideas',
            'activity_ideas_generated': 'Activity Ideas Generated!',
            'assessment_type': 'Assessment Type',
            'create_assessment': 'Create Assessment',
            'assessment_template_created': 'Assessment template created!',
            'clear_learning_objectives': 'Clear learning objectives defined',
            'multiple_question_formats': 'Multiple question formats included',
            'rubric_provided': 'Rubric for evaluation provided',
            'differentiated_difficulty': 'Differentiated difficulty levels available',
            'subject_area': 'Subject Area', 
            
            # Parent Tracker
            'parent_tracker': 'Parent Tracker', 
            'strengthening_connections': 'Strengthening Home-School Connections',
            'daily_observation_log': 'Daily Observation Log',
            'child_name': "Child's Name",
            'observation_date': 'Observation Date',
            'academic_observations': 'Academic Observations',
            'homework_completion': 'Homework Completion (%)',
            'reading_time': 'Reading Time (minutes)',
            'focus_level': 'Focus Level',
            'subjects_struggled': 'Subjects Struggled With',
            'behavioral_observations': 'Behavioral Observations', 
            'mood_rating': 'Mood Rating',
            'sleep_hours': 'Sleep Hours',
            'energy_level': 'Energy Level',
            'learning_wins': 'Learning Wins Today',
            'challenges_faced': 'Challenges Faced',
            'save_observation': 'Save Observation',
            'progress_insights': 'Progress Insights',
            'supporting_childs_learning': "Supporting Your Child's Learning Journey",
            'family_centered_approach': 'Family-Centered Approach to Educational Success',
            'empowering_parents_tools': 'Empowering parents with tools and insights to support their child\'s academic growth at home',
            'monitor_child_progress': 'Monitor your child\'s learning progress with simple, effective tools',
            'parent_empowerment': 'Parent Empowerment',
            'gain_insights_strategies': 'Gain insights and strategies to support learning at home',
            'school_partnership': 'School Partnership',
            'build_communication_bridges': 'Build strong communication bridges with your child\'s teachers',
            'student_success': 'Student Success',
            'celebrate_achievements': 'Celebrate achievements and address challenges together',
            'student_progress_stories': 'Student Progress Stories',
            'child_selection': 'Child Selection',
            'tracking': 'Tracking',
            'dashboard_options': 'Dashboard Options',
            'choose_view': 'Choose view:',
            'daily_entry': 'Daily Entry',
            'progress_tracking': 'Progress Tracking',
            'weekly_summary': 'Weekly Summary',
            'observations_log': 'Observations Log',
            'observation_saved_success': 'Observation saved successfully!',
            'observation_save_error': 'Error saving observation.',
            'no_observations_recorded': 'No observations recorded yet.',
            'error_loading_observations': 'Error loading observations:',
            'focus_level_trend': 'Focus Level Trend',
            'focus_level_over_time': 'Focus Level Over Time',
            'date': 'Date', 
            'behavioral_emotional': 'Behavioral & Emotional', 

            # Educational Content
            'educational_content': 'Educational Content', 
            'building_educational_excellence': 'Building Educational Excellence Through Research',
            'evidence_based_insights': 'Evidence-Based Insights for Learning Success',
            'comprehensive_educational_research': 'Comprehensive educational research and resources to support effective learning interventions',
            'educational_excellence_in_action': 'Educational Excellence in Action',
            'global_best_practices': 'Global Best Practices',
            'international_standards': 'International standards and methods adapted for Somali educational environments',
            'learning_science': 'Learning Science',
            'neuroscience_cognitive_research': 'Neuroscience and cognitive research on how children learn most effectively',
            'intervention_studies': 'Intervention Studies',
            'evidence_based_strategies': 'Evidence-based strategies for supporting students with learning challenges',
            'cultural_adaptation': 'Cultural Adaptation',
            'implementing_inclusive_education': 'Research on implementing inclusive education in diverse cultural contexts',
            'educational_research_impact': 'Educational Research Impact',
            'content_categories': 'Content Categories',
            'choose_content_type': 'Choose content type:',
            'research_overview': 'Research Overview',
            'types_learning_difficulties': 'Types of Learning Difficulties',
            'early_intervention': 'Early Intervention',
            'academic_resources': 'Academic Resources',
            'technology_tools': 'Technology Tools',
            'support_strategies': 'Support Strategies',
            'target_audience': 'Target Audience',
            'content_for': 'Content for:',
            'teachers': 'Teachers',
            'parents': 'Parents',
            'administrators': 'Administrators',
            'all': 'All',
            'understanding_learning_difficulties': 'Understanding Learning Difficulties',
            'learning_difficulties_affect_how': 'Learning difficulties affect how students process and understand information. Early identification and intervention are crucial for student success.',
            'common_types': 'Common Types:',
            'dyslexia': 'Dyslexia',
            'reading_difficulties': 'Reading difficulties',
            'dyscalculia': 'Dyscalculia',
            'math_difficulties': 'Math difficulties',
            'adhd': 'ADHD',
            'attention_difficulties': 'Attention difficulties',
            'processing_disorders': 'Processing disorders',
            'information_processing_issues': 'Information processing issues',
            'signs_to_watch_for': 'Signs to Watch For:',
            'difficulty_following_instructions': 'Difficulty following instructions',
            'problems_reading_comprehension': 'Problems with reading comprehension',
            'trouble_math_concepts': 'Trouble with math concepts',
            'difficulty_staying_focused': 'Difficulty staying focused',
            'problems_writing_spelling': 'Problems with writing and spelling',
            'evidence_based_interventions': 'Evidence-Based Interventions',
            'select_intervention_area': 'Select Intervention Area',
            'recommended_interventions': 'Recommended Interventions:',
            'research_statistics': 'Research Statistics',
            'prevalence_learning_difficulties': 'Prevalence of Learning Difficulties (%)',
            'key_research_findings': 'Key Research Findings:',
            'early_intervention_improves': 'Early intervention improves outcomes by 70%',
            'multi_sensory_effective': 'Multi-sensory approaches are most effective',
            'regular_monitoring_essential': 'Regular progress monitoring is essential',
            'family_involvement_doubles': 'Family involvement doubles success rates',
            'cultural_adaptation_increases': 'Cultural adaptation increases intervention effectiveness',
            'attention_issues': 'Attention Issues', 
            'category': 'Category', 
            'percentage': 'Percentage', 

            # Common Rating options 
            'poor': 'Poor',
            'below_average': 'Below Average',
            'average': 'Average',
            'good': 'Good',
            'excellent': 'Excellent',
            'low': 'Low',
            'medium': 'Medium',
            'high': 'High',
        },
        'Somali': {
            # Navigation
            'dashboard': 'Xarunta Xogta',
            'prediction': 'Qiimayn',
            'assessment': 'Qiimayn',  
            'resources': 'Agabka',
            'tracker': 'Dabagal',
            'analytics': 'Falanqayn',
            'settings': 'Dejinta',
            'educational_content': 'Waxbarasho', 

            # Header & Global Status
            'app_title': 'EduScan Somalia',
            'app_subtitle': 'Barnaamijka Qiimaynta Barashada Xirfadlayaasha',
            'system_status': 'Xaaladda Nidaamka', 
            'online_mode': 'Hab Toos ah', 
            'offline_mode': 'Hab Offline ah', 
            'toggle_offline_mode': 'Beddel Habka Offline', 
            'new_assessment_button': 'Qiimayn Cusub', 

            # Dashboard - System Overview Stat Cards (Labels matching image text)
            'total_students_label': 'Wadarta Ardayda',
            'new_this_month_label': '↑ 12 cusub bishan', 
            'on_track_label': 'Waddada Saxda ah',
            'performing_well_label': '↑ 78% si fiican ayay u qabtaan', 
            'at_risk_label': 'Khatar',
            'need_support_label': '↑ 15% waxay u baahan yihiin taageero', 
            'intervention_label': 'Faragelin',
            'urgent_attention_label': '↑ 7% degdeg u baahan', 


            # Assessment Form
            'assessment_form': 'Foomka Qiimaynta',
            'empowering_student_success': 'Xoojinta Guulaha Ardayda',
            'student_information': 'Macluumaadka Ardayga',
            'grade_level': 'Heerka Fasalka',
            'teacher_name': 'Magaca Macallinka',
            'assessment_date': 'Taariikhda Qiimaynta',
            'academic_performance': 'Waxqabadka Tacliinta',
            'behavioral_social_indicators': 'Tilmaamaha Dhaqanka iyo Bulshada',
            'math_score': 'Dhibcaha Xisaabta (0-100)',
            'reading_score': 'Dhibcaha Akhriska (0-100)',  
            'writing_score': 'Dhibcaha Qorista (0-100)',
            'attendance': 'Soo Gaadhitaanka Dugsiga (%)',
            'behavior_rating': 'Qiimaynta Dhaqanka (1-5)', 
            'literacy_level': 'Heerka Aqrinta (1-10)', 
            'analyze_learning_risk': 'Falanqee Khatarta Barashada',
            'clear_form': 'Nadiifi Foomka',
            'assessment_results': 'Natiijada Qiimaynta AI',
            'comprehensive_assessment': 'Qiimayn dhamaystiran oo barasho ah ayaa loo dhammeeyay',
            'risk_level': 'Heerka Khatarta',
            'recommendations': 'Talooyinka',
            'low_risk': 'Khatar Yar',
            'medium_risk': 'Khatar Dhexdhexaad ah',
            'high_risk': 'Khatar Weyn',
            'confidence': 'Hubin',
            'teacher_notes': 'Xusuusta Macallinka',
            'prediction_saved_success': 'Qiimaynta si guul leh ayaa loo kaydiyay!',
            'prediction_save_error': 'Cilad ayaa ka timid kaydinta qiimaynta.',
            'model_not_available': 'Moodelka lama heli karo. Fadlan hubi faylasha moodelka.',
            'error_making_prediction': 'Cilad ayaa ka timid samaynta qiimaynta:',
            'is_performing_well': 'si fiican ayuu u qabanayaa. Sii wad hababka waxbarashada ee hadda jira.',
            'maintain_academic_support': 'Sii wad taageerada tacliinta ee hadda jirta',
            'consider_enrichment': 'Ka fiirso hawlaha kobcinta',
            'regular_monitoring': 'Kormeer joogto ah oo horumarka ah',
            'may_need_additional_support': 'waxaa laga yaabaa inuu u baahdo taageero dheeraad ah.',
            'provide_targeted_interventions': 'Bixi faragelin gaar ah',
            'increase_one_on_one': 'Kordhi taageerada qof-ka-qofka ah',
            'monitor_weekly': 'La soco horumarka toddobaadle',
            'requires_immediate_intervention': 'waxa uu u baahan yahay faragelin degdeg ah.',
            'implement_intensive_program': 'Hirgeli barnaamij taageero xooggan',
            'daily_monitoring': 'Kormeer maalinle ah oo horumarka ah',
            'consider_specialist': 'Ka fiirso qiimayn takhasusle',

            # Teacher Resources
            'teacher_resources': 'Agabka Macalliminta', 
            'supporting_every_teacher': 'Taageeridda Macallin kasta, Gaadhitaanka Arday Kasta',
            'inclusive_classroom_excellence': 'Fiicnaan Fasal oo Dhammaystiran',
            'professional_collaboration': 'Iskaashi Xirfadeed',
            'engaging_learning_strategies': 'Xeeladaha Barashada Soo Jiidashada leh',
            'assessment_innovation': 'Hal-abuurka Qiimaynta',
            'teaching_guides': 'Tilmaamaha iyo Xeeladaha Waxbarashada',
            'lesson_plans': 'Abuurista Qorshaha Casharrada',
            'educational_games': 'Ciyaaraha Waxbarasho',
            'real_life_activities': 'Dhaqdhaqaaqyada Nolosha Dhabta ah',
            'saved_resources': 'Agabka la Keydsaday',
            'excellence_in_education': 'Fiicnaanta Waxbarasho Soomaaliya',
            'empowering_teachers': 'Xoojinta Macalliminta iyada oo la adeegsanayo Xeeladaha Taageerada Barashada ee ku Salaysan Caddeyn',
            'professional_development': 'Agabka horumarinta xirfadeed ee loo qorsheeyay guulaha fasal dhammaystiran',
            'create_learning_environments': 'Samee deegaan barasho oo arday kasta ku kobco iyada oo la adeegsanayo tadris kala duwan',
            'build_strong_partnerships': 'Dhis iskaashi adag oo qoysaska iyo takhasusyada la sameeyo si loo helo taageero arday oo dhamaystiran',
            'implement_culturally_responsive': 'Hirgelinta hababka waxbarbarashada ee dhaqan-ogaanta leh ee la xidhiidha ardayda Soomaaliyeed',
            'use_multiple_assessment': 'Isticmaal hababka qiimayn ee kala duwan si si sax ah loogu cabbiro horumarka iyo baahiyaha ardayda',
            'teaching_excellence_showcase': 'Bandhigga Fiicnaanta Waxbarashada',
            'resource_categories': 'Qaybaha Agabka',
            'choose_resource_type': 'Dooro nooca agabka:',
            'differentiated_learning_strategies': 'Xeeladaha Barashada ee Kala Duwanaanta',
            'inclusive_classroom_tips': 'Talooyinka Fasal Dhammaystiran',
            'intervention_techniques': 'Farsamada Faragelinta',
            'assessment_strategies': 'Xeeladaha Qiimaynta',
            'activity_generator': 'Dhaliyaha Dhaqdhaqaaqa',
            'teaching_strategies': 'Xeeladaha Waxbarashada',
            'learning_activities': 'Dhaqdhaqaaqyada Barashada',
            'assessment_tools': 'Qalab Qiimayn',
            'classroom_management': 'Maamaynta Fasalka',
            'differentiation_techniques': 'Farsamada Kala-soocida',
            'technology_integration': 'Isku-dhafka Teknoolajiyada',
            'cultural_sensitivity': 'Dareen-ka Dhaqanka',
            'difficulty_focus': 'Diiradda Caqabadaha',
            'target_difficulty': 'Caqabadda bartilmaameedka ah:',
            'reading_language': 'Akhriska/Luqadda',
            'mathematics': 'Xisaabta',
            'writing': 'Qorista',
            'attention_focus': 'Diiradda/Feejignaan',
            'memory': 'Xusuusta',
            'processing_speed': 'Xawaaraha Farsamaynta',
            'social_skills': 'Xirfadaha Bulshada',
            'behavioral_issues': 'Arrimaha Dhaqanka',
            'generate_teaching_strategy': 'Soo saar Xeellad waxbarasho',
            'strategy_generated': 'Xeelladda waxbarashada waa la soo saaray!',
            'interactive_learning_activities': 'Hawlaha waxbarasho ee isdhexgalka',
            'generate_activity_ideas': 'Soo saar fikradaha hawlaha',
            'activity_ideas_generated': 'Fikradaha hawlaha waa la soo saaray!',
            'assessment_type': 'Nooca Qiimaynta',
            'create_assessment': 'Samee Qiimayn',
            'assessment_template_created': 'Qaabka qiimaynta waa la sameeyay!',
            'clear_learning_objectives': 'Ujeedooyinka waxbarashada oo cad la qeexay',
            'multiple_question_formats': 'Qaababka su\'aalaha kala duwan oo lagu daray',
            'rubric_provided': 'Habraaca qiimaynta oo la bixiyay',
            'differentiated_difficulty': 'Heerarka adag ee kala duwan oo la heli karo',
            'subject_area': 'Goobta Maaddada',

            # Parent Tracker
            'parent_tracker': 'Dabagalka Waalidka',
            'strengthening_connections': 'Xoojinta Xiriirka Guriga-Dugsiga',
            'daily_observation_log': 'Diiwaanka Indho-indhaynta Maalinta',
            'child_name': 'Magaca Ilmaha',
            'observation_date': 'Taariikhda Indho-indhaynta',
            'academic_observations': 'Indho-indhaynta Tacliinta',
            'homework_completion': 'Dhammaystirka Hawsha Guriga (%)',
            'reading_time': 'Waqtiga Akhriska (daqiiqado)',
            'focus_level': 'Heerka Diiradda',
            'subjects_struggled': 'Maadooyinka la Tacban yahay',
            'behavioral_observations': 'Indho-indhaynta Dhaqanka',
            'mood_rating': 'Qiimaynta Dareenka',
            'sleep_hours': 'Saacadaha Hurdada',
            'energy_level': 'Heerka Tamarta',
            'learning_wins': 'Guusha Barashada Maanta',
            'challenges_faced': 'Caqabadaha la Kulmay',
            'save_observation': 'Kaydi Indho-indhaynta',
            'progress_insights': 'Aragtiyo Horumarka',
            'supporting_childs_learning': 'Taageeridda Safarka Barashada Ilmahaaga',
            'family_centered_approach': 'Hab Qoys ku Aasaasan si loo Gaadho Guulaha Waxbarasho',
            'empowering_parents_tools': 'Xoojinta waalidka iyada oo la adeegsanayo qalab iyo aragtiyo si ay u taageeraan koboca tacliinta ilmahooda guriga',
            'monitor_child_progress': 'La-soco horumarka barashada ilmahaaga iyada oo la adeegsanayo qalab fudud oo waxtar leh',
            'parent_empowerment': 'Xoojinta Waalidka',
            'gain_insights_strategies': 'Hel aragtiyo iyo xeeladaho si aad ugu taageerto barashada guriga',
            'school_partnership': 'Iskaashiga Dugsiga',
            'build_communication_bridges': 'Dhis buundooyin wadahadal oo xooggan oo aad la samayso macalliminta ilmahaaga',
            'student_success': 'Guulaha Ardayga',
            'celebrate_achievements': 'U dabaal-deg guulaha oo wada xalli caqabadaha',
            'student_progress_stories': 'Sheekoooyinka Horumarka Ardayda',
            'child_selection': 'Doorashada Ilmaha',
            'tracking': 'Dabagal',
            'dashboard_options': 'Doorashooyinka Xarunta Xogta',
            'choose_view': 'Dooro aragtida:',
            'daily_entry': 'Gelinsa Maalinlaha ah',
            'progress_tracking': 'Dabagalka Horumarka',
            'weekly_summary': 'Soo-koobka Toddobaadlaha ah',
            'observations_log': 'Diiwaanka Indho-indhaynta',
            'observation_saved_success': 'Indho-indhaynta si guul leh ayaa loo kaydiyay!',
            'observation_save_error': 'Cilad ayaa ka timid kaydinta indho-indhaynta.',
            'no_observations_recorded': 'Weli lama diiwaan gelin wax indho-indhayn ah.',
            'error_loading_observations': 'Cilad ayaa ka timid soo dejinta indho-indhaynta:',
            'focus_level_trend': 'Isbeddelka Heerka Diiradda',
            'focus_level_over_time': 'Heerka Diiradda Waqtiyada kala duwan',
            'date': 'Taariikh', 
            'behavioral_emotional': 'Dhaqan & Dareen',

            # Educational Content
            'educational_content': 'Waxyaabaha Waxbarasho', 
            'building_educational_excellence': 'Dhisidda Fiicnaanta Waxbarasho iyada oo loo marayo Cilmi-baaris',
            'evidence_based_insights': 'Aragtiyo ku Salaysan Caddayn si loo Gaadho Guulaha Barashada',
            'comprehensive_educational_research': 'Cilmi-baaris dhamaystiran oo waxbarasho ah iyo agab taageerid ah si loo xoojijo faragelinta waxtar leh',
            'educational_excellence_in_action': 'Fiicnaanta Waxbarasho ee Ficilka ah',
            'global_best_practices': 'Hab-maamuuska Ugu Fiican Adduunka',
            'international_standards': 'Heerarka caalamiga ah iyo hababka loo waafajiyay jadada waxbarasho ee Soomaaliya',
            'learning_science': 'Sayniska Barashada',
            'neuroscience_cognitive_research': 'Cilmi-baarista maskaxda iyo fekerka oo ku saabsan sida caruurtu u bartaan si ugu waxtar badan',
            'intervention_studies': 'Daraasadaha Faragelinta',
            'evidence_based_strategies': 'Xeeladaha ku salaysan caddeyn si loo taageero ardayda leh caqabadaha barashada',
            'cultural_adaptation': 'La-qabsiga Dhaqanka',
            'implementing_inclusive_education': 'Cilmi-baaris ku saabsan hirgelinta waxbarasho dhammaystiran oo ku habboon jadad dhaqameed oo kala duwan',
            'educational_research_impact': 'Saameynta Cilmi-baarista Waxbarasho',
            'content_categories': 'Qaybaha Waxyaabaha',
            'choose_content_type': 'Dooro nooca waxyaabaha:',
            'research_overview': 'Dulmar Cilmi-baaris',
            'types_learning_difficulties': 'Noocyada Caqabadaha Barashada',
            'early_intervention': 'Faragelin Hore',
            'academic_resources': 'Agabka Tacliinta',
            'technology_tools': 'Qalab Teknoolajiyeed',
            'support_strategies': 'Xeeladaha Taageerada',
            'target_audience': 'Dadka Bartilmaameedka ah',
            'content_for': 'Waxyaabaha loogu talagalay:',
            'teachers': 'Macallimiin',
            'parents': 'Waalidiinta',
            'administrators': 'Maamuleyaasha',
            'all': 'Dhammaan',
            'understanding_learning_difficulties': 'Fahamka Caqabadaha Barashada',
            'learning_difficulties_affect_how': 'Caqabadaha barashadu waxay saameeyaan sida ardaydu u farsameeyaan oo u fahmaan macluumaadka. Aqoonsiga hore iyo faragelintu waa lama huraan guusha ardayga.',
            'common_types': 'Noocyada Caadiga ah:',
            'dyslexia': 'Diyseleksiya',
            'reading_difficulties': 'Caqabado akhris',
            'dyscalculia': 'Diysekalkuliya',
            'math_difficulties': 'Caqabado xisaab',
            'adhd': 'ADHD',
            'attention_difficulties': 'Caqabado feejignaan',
            'processing_disorders': 'Xanuunada farsamaynta',
            'information_processing_issues': 'Arrimaaha farsamaynta macluumaadka',
            'signs_to_watch_for': 'Calaamadaha la Fiirinayo:',
            'difficulty_following_instructions': 'Dhib ku qabashada tilmaamaha',
            'problems_reading_comprehension': 'Dhibaatooyinka fahamka akhriska',
            'trouble_math_concepts': 'Dhibaato la xiriirta fikradaha xisaabta',
            'difficulty_staying_focused': 'Dhib ku qabashada joogtaynta diiradda',
            'problems_writing_spelling': 'Dhibaatooyinka qorista iyo higgaadda',
            'evidence_based_interventions': 'Faragelin ku salaysan Caddeyn',
            'select_intervention_area': 'Dooro Goobta Faragelinta',
            'recommended_interventions': 'Faragelinta lagu Taliyay:',
            'research_statistics': 'Tirokoobka Cilmi-baarista',
            'prevalence_learning_difficulties': 'Faafitaanka Caqabadaha Barashada (%)',
            'key_research_findings': 'Natiijooyinka Muhiimka ah ee Cilmi-baarista:',
            'early_intervention_improves': 'Faragelinta hore waxay hagaajisaa natiijooyinka 70%',
            'multi_sensory_effective': 'Hababka dareenka badan ayaa ah kuwa ugu waxtarka badan',
            'regular_monitoring_essential': 'Kormeer joogto ah oo horumarka ah waa lama huraan',
            'family_involvement_doubles': 'Ka-qaybgalka qoysku wuxuu labanlaabaa heerarka guusha',
            'cultural_adaptation_increases': 'La-qabsiga dhaqanku wuxuu kordhiyaa waxtarka faragelinta',
            'attention_issues': 'Arrimaaha Feejignaan', 
            'category': 'Qayb', 
            'percentage': 'Boqolley', 

            # Common Rating options 
            'poor': 'Liita',
            'below_average': 'Ka hooseeya Celceliska',
            'average': 'Celcelis ah',
            'good': 'Fiican',
            'excellent': 'Aad u Fiican',
            'low': 'Hoose',
            'medium': 'Dhexdhexaad',
            'high': 'Sare',
        },
        'Arabic': {
            # Navigation
            'dashboard': 'لوحة التحكم',
            'prediction': 'التقييم',
            'assessment': 'التقييم',  
            'resources': 'الموارد',
            'tracker': 'المتتبع',
            'analytics': 'التحليلات',
            'settings': 'الإعدادات',
            'educational_content': 'محتوى تعليمي', 

            # Header & Global Status
            'app_title': 'EduScan Somalia',
            'app_subtitle': 'تطبيق التقييم التعليمي المهني',
            'system_status': 'حالة النظام', 
            'online_mode': 'وضع الاتصال', 
            'offline_mode': 'وضع عدم الاتصال', 
            'toggle_offline_mode': 'تبديل وضع عدم الاتصال', 
            'new_assessment_button': 'تقييم جديد', 

            # Dashboard - System Overview Stat Cards (Labels matching image text)
            'total_students_label': 'إجمالي الطلاب',
            'new_this_month_label': '↑ 12 جديد هذا الشهر', 
            'on_track_label': 'في المسار الصحيح',
            'performing_well_label': '↑ 78% أداء جيد', 
            'at_risk_label': 'معرض للخطر',
            'need_support_label': '↑ 15% بحاجة للدعم', 
            'intervention_label': 'تدخل',
            'urgent_attention_label': '↑ 7% اهتمام عاجل', 


            # Assessment Form
            'assessment_form': 'نموذج التقييم',
            'empowering_student_success': 'تمكين نجاح الطلاب',
            'student_information': 'معلومات الطالب',
            'grade_level': 'مستوى الصف',
            'teacher_name': 'اسم المعلم', 
            'assessment_date': 'تاريخ التقييم', 
            'academic_performance': 'الأداء الأكاديمي',
            'behavioral_social_indicators': 'المؤشرات السلوكية والاجتماعية',
            'math_score': 'درجة الرياضيات (0-100)',
            'reading_score': 'درجة القراءة (0-100)',  
            'writing_score': 'درجة الكتابة (0-100)',
            'attendance': 'حضور المدرسة (%)',
            'behavior_rating': 'تقييم السلوك (1-5)', 
            'literacy_level': 'مستوى محو الأمية (1-10)', 
            'analyze_learning_risk': 'تحليل مخاطر التعلم',
            'clear_form': 'مسح النموذج',
            'assessment_results': 'نتائج تقييم الذكاء الاصطناعي',
            'comprehensive_assessment': 'تم إكمال تقييم تعليمي شامل لـ',
            'risk_level': 'مستوى المخاطر',
            'recommendations': 'التوصيات',
            'low_risk': 'مخاطر منخفضة',
            'medium_risk': 'مخاطر متوسطة',
            'high_risk': 'مخاطر عالية',
            'confidence': 'ثقة',
            'teacher_notes': 'ملاحظات المعلم',
            'prediction_saved_success': 'تم حفظ التقييم بنجاح!',
            'prediction_save_error': 'خطأ في حفظ التقييم.',
            'model_not_available': 'النموذج غير متاح. يرجى التحقق من ملفات النموذج.',
            'error_making_prediction': 'خطأ في إجراء التقييم:',
            'is_performing_well': 'يقدم أداءً جيدًا. استمر في طرق التدريس الحالية.',
            'maintain_academic_support': 'الحفاظ على الدعم الأكاديمي الحالي',
            'consider_enrichment': 'النظر في الأنشطة الإثرائية',
            'regular_monitoring': 'المراقبة المنتظمة للتقدم',
            'may_need_additional_support': 'قد يحتاج إلى دعم إضافي.',
            'provide_targeted_interventions': 'تقديم تدخلات موجهة',
            'increase_one_on_one': 'زيادة الدعم الفردي',
            'monitor_weekly': 'مراقبة التقدم أسبوعيا',
            'requires_immediate_intervention': 'يتطلب تدخلاً فورياً.',
            'implement_intensive_program': 'تنفيذ برنامج دعم مكثف',
            'daily_monitoring': 'المراقبة اليومية للتقدم',
            'consider_specialist': 'النظر في تقييم متخصص',

            # Teacher Resources
            'teacher_resources': 'موارد المعلمين', 
            'supporting_every_teacher': 'دعم كل معلم، الوصول إلى كل طالب',
            'inclusive_classroom_excellence': 'التميز في الفصل الدراسي الشامل',
            'professional_collaboration': 'التعاون المهني',
            'engaging_learning_strategies': 'استراتيجيات التعلم الجذابة',
            'assessment_innovation': 'ابتكار التقييم',
            'teaching_guides': 'أدلة واستراتيجيات التدريس',
            'lesson_plans': 'إنشاء خطط الدروس',
            'educational_games': 'الألعاب التعليمية',
            'real_life_activities': 'أنشطة التعلم الواقعية',
            'saved_resources': 'الموارد المحفوظة',
            'excellence_in_education': 'التميز في التعليم الصومالي',
            'empowering_teachers': 'تمكين المعلمين باستراتيجيات دعم التعلم القائمة على الأدلة',
            'professional_development': 'موارد التطوير المهني المصممة لنجاح الفصول الدراسية الشاملة',
            'create_learning_environments': 'إنشاء بيئات تعليمية يزدهر فيها كل طالب من خلال التدريس المتمايز',
            'build_strong_partnerships': 'بناء شراكات قوية مع الأسر والمتخصصين لدعم الطلاب الشامل',
            'implement_culturally_responsive': 'تنفيذ أساليب تدريس مستجيبة ثقافياً تتواصل مع الطلاب الصوماليين',
            'use_multiple_assessment': 'استخدام أساليب تقييم متعددة لقياس تقدم الطلاب واحتياجاتهم بدقة',
            'teaching_excellence_showcase': 'معرض التميز في التدريس',
            'resource_categories': 'فئات الموارد',
            'choose_resource_type': 'اختر نوع المورد:',
            'differentiated_learning_strategies': 'استراتيجيات التعلم المتمايزة',
            'inclusive_classroom_tips': 'نصائح الفصل الدراسي الشامل',
            'intervention_techniques': 'تقنيات التدخل',
            'assessment_strategies': 'استراتيجيات التقييم',
            'activity_generator': 'مولد الأنشطة',
            'teaching_strategies': 'استراتيجيات التدريس',
            'learning_activities': 'أنشطة التعلم',
            'assessment_tools': 'أدوات التقييم',
            'classroom_management': 'إدارة الفصل الدراسي',
            'differentiation_techniques': 'تقنيات التمايز',
            'technology_integration': 'دمج التكنولوجيا',
            'cultural_sensitivity': 'الحساسية الثقافية',
            'difficulty_focus': 'تركيز الصعوبة',
            'target_difficulty': 'الصعوبة المستهدفة:',
            'reading_language': 'القراءة/اللغة',
            'mathematics': 'الرياضيات',
            'writing': 'الكتابة',
            'attention_focus': 'الانتباه/التركيز',
            'memory': 'الذاكرة',
            'processing_speed': 'سرعة المعالجة',
            'social_skills': 'المهارات الاجتماعية',
            'behavioral_issues': 'المشكلات السلوكية',
            'generate_teaching_strategy': 'توليد استراتيجية التدريس',
            'strategy_generated': 'تم توليد استراتيجية التدريس!',
            'interactive_learning_activities': 'أنشطة التعلم التفاعلية',
            'generate_activity_ideas': 'توليد أفكار النشاط',
            'activity_ideas_generated': 'تم توليد أفكار النشاط!',
            'assessment_type': 'نوع التقييم',
            'create_assessment': 'إنشاء تقييم',
            'assessment_template_created': 'تم إنشاء قالب التقييم!',
            'clear_learning_objectives': 'أهداف تعلم واضحة محددة',
            'multiple_question_formats': 'صيغ أسئلة متعددة متضمنة',
            'rubric_provided': 'تم توفير نموذج للتقييم',
            'differentiated_difficulty': 'مستويات صعوبة متمايزة متاحة',
            'subject_area': 'المادة الدراسية',

            # Parent Tracker
            'parent_tracker': 'متتبع الوالدين',
            'strengthening_connections': 'تعزيز الروابط بين المنزل والمدرسة',
            'daily_observation_log': 'سجل الملاحظة اليومية',
            'child_name': 'اسم الطفل',
            'observation_date': 'تاريخ الملاحظة',
            'academic_observations': 'الملاحظات الأكاديمية',
            'homework_completion': 'إنجاز الواجبات المنزلية (%)',
            'reading_time': 'وقت القراءة (دقائق)',
            'focus_level': 'مستوى التركيز',
            'subjects_struggled': 'المواد التي واجه صعوبة فيها',
            'behavioral_observations': 'الملاحظات السلوكية',
            'mood_rating': 'تقييم المزاج',
            'sleep_hours': 'ساعات النوم',
            'energy_level': 'مستوى الطاقة',
            'learning_wins': 'انتصارات التعلم اليوم',
            'challenges_faced': 'التحديات المواجهة',
            'save_observation': 'حفظ الملاحظة',
            'progress_insights': 'رؤى التقدم',
            'supporting_childs_learning': 'دعم رحلة تعلم طفلك',
            'family_centered_approach': 'نهج يركز على الأسرة لتحقيق النجاح التعليمي',
            'empowering_parents_tools': 'تمكين الآباء بالأدوات والرؤى لدعم النمو الأكاديمي لأطفالهم في المنزل',
            'monitor_child_progress': 'مراقبة تقدم تعلم طفلك باستخدام أدوات بسيطة وفعالة',
            'parent_empowerment': 'تمكين الوالدين',
            'gain_insights_strategies': 'اكتساب رؤى واستراتيجيات لدعم التعلم في المنزل',
            'school_partnership': 'الشراكة المدرسية',
            'build_communication_bridges': 'بناء جسور اتصال قوية مع معلمي طفلك',
            'student_success': 'نجاح الطالب',
            'celebrate_achievements': 'الاحتفال بالإنجازات ومعالجة التحديات معًا',
            'student_progress_stories': 'قصص تقدم الطلاب',
            'child_selection': 'اختيار الطفل',
            'tracking': 'التتبع',
            'dashboard_options': 'خيارات لوحة التحكم',
            'choose_view': 'اختر العرض:',
            'daily_entry': 'إدخال يومي',
            'progress_tracking': 'تتبع التقدم',
            'weekly_summary': 'ملخص أسبوعي',
            'observations_log': 'سجل الملاحظات',
            'observation_saved_success': 'تم حفظ الملاحظة بنجاح!',
            'observation_save_error': 'خطأ في حفظ الملاحظة.',
            'no_observations_recorded': 'لم يتم تسجيل أي ملاحظات بعد.',
            'error_loading_observations': 'خطأ في تحميل الملاحظات:',
            'focus_level_trend': 'اتجاه مستوى التركيز',
            'focus_level_over_time': 'مستوى التركيز بمرور الوقت',
            'date': 'التاريخ', 
            'behavioral_emotional': 'السلوكي والعاطفي',

            # Educational Content
            'educational_content': 'المحتوى التعليمي', 
            'building_educational_excellence': 'بناء التميز التعليمي من خلال البحث',
            'evidence_based_insights': 'رؤى قائمة على الأدلة لنجاح التعلم',
            'comprehensive_educational_research': 'بحث تعليمي شامل وموارد لدعم التدخلات التعليمية الفعالة',
            'educational_excellence_in_action': 'التميز التعليمي في العمل',
            'global_best_practices': 'أفضل الممارسات العالمية',
            'international_standards': 'المعايير الدولية والأساليب المكيفة للبيئات التعليمية الصومالية',
            'learning_science': 'علم التعلم',
            'neuroscience_cognitive_research': 'أبحاث علم الأعصاب والإدراك حول كيفية تعلم الأطفال بشكل أكثر فعالية',
            'intervention_studies': 'دراسات التدخل',
            'evidence_based_strategies': 'استراتيجيات قائمة على الأدلة لدعم الطلاب ذوي تحديات التعلم',
            'cultural_adaptation': 'التكيف الثقافي',
            'implementing_inclusive_education': 'بحث حول تنفيذ التعليم الشامل في سياقات ثقافية متنوعة',
            'educational_research_impact': 'أثر البحث التعليمي',
            'content_categories': 'فئات المحتوى',
            'choose_content_type': 'اختر نوع المحتوى:',
            'research_overview': 'نظرة عامة على البحث',
            'types_learning_difficulties': 'أنواع صعوبات التعلم',
            'early_intervention': 'التدخل المبكر',
            'academic_resources': 'الموارد الأكاديمية',
            'technology_tools': 'أدوات التكنولوجيا',
            'support_strategies': 'استراتيجيات الدعم',
            'target_audience': 'الجمهور المستهدف',
            'content_for': 'المحتوى لـ:',
            'teachers': 'المعلمين',
            'parents': 'الآباء',
            'administrators': 'الإداريين',
            'all': 'الجميع',
            'understanding_learning_difficulties': 'فهم صعوبات التعلم',
            'learning_difficulties_affect_how': 'تؤثر صعوبات التعلم على كيفية معالجة الطلاب للمعلومات وفهمها. التحديد المبكر والتدخل أمران حاسمان لنجاح الطالب.',
            'common_types': 'الأنواع الشائعة:',
            'dyslexia': 'عسر القراءة',
            'reading_difficulties': 'صعوبات القراءة',
            'dyscalculia': 'عسر الحساب',
            'math_difficulties': 'صعوبات الرياضيات',
            'adhd': 'اضطراب فرط الحركة ونقص الانتباه',
            'attention_difficulties': 'صعوبات الانتباه',
            'processing_disorders': 'اضطرابات المعالجة',
            'information_processing_issues': 'مشاكل معالجة المعلومات',
            'signs_to_watch_for': 'علامات يجب الانتباه إليها:',
            'difficulty_following_instructions': 'صعوبة في اتباع التعليمات',
            'problems_reading_comprehension': 'مشاكل في فهم القراءة',
            'trouble_math_concepts': 'مشكلة في مفاهيم الرياضيات',
            'difficulty_staying_focused': 'صعوبة في البقاء مركزاً',
            'problems_writing_spelling': 'مشاكل في الكتابة والتهجئة',
            'evidence_based_interventions': 'التدخلات القائمة على الأدلة',
            'select_intervention_area': 'اختر مجال التدخل',
            'recommended_interventions': 'التدخلات الموصى بها:',
            'research_statistics': 'إحصائيات البحث',
            'prevalence_learning_difficulties': 'انتشار صعوبات التعلم (%)',
            'key_research_findings': 'نتائج البحث الرئيسية:',
            'early_intervention_improves': 'التدخل المبكر يحسن النتائج بنسبة 70%',
            'multi_sensory_effective': 'النهج متعدد الحواس هو الأكثر فعالية',
            'regular_monitoring_essential': 'المراقبة المنتظمة للتقدم ضرورية',
            'family_involvement_doubles': 'مشاركة الأسرة تضاعف معدلات النجاح',
            'cultural_adaptation_increases': 'التكيف الثقافي يزيد من فعالية التدخل',
            'attention_issues': 'مشاكل الانتباه', 
            'category': 'الفئة', 
            'percentage': 'النسبة المئوية', 

            # Common Rating options 
            'poor': 'ضعيف',
            'below_average': 'أقل من المتوسط',
            'average': 'متوسط',
            'good': 'جيد',
            'excellent': 'ممتاز',
            'low': 'منخفض',
            'medium': 'متوسط',
            'high': 'عالي',
        }
    }
    
    return translations.get(language, translations['English']).get(key, key)
### FILE: utils/model_utils.py

import pickle
import numpy as np
import os
import sys
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

def get_model_path():
    """Get the correct path for the model file"""
    if getattr(sys, 'frozen', False):
        # Running as compiled executable
        base_path = sys._MEIPASS
    else:
        # Running as script
        base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    # Check for user's trained model first, then fall back to sample model
    user_model_path = os.path.join(base_path, 'data', 'learning_difficulty_detector.pkl')
    sample_model_path = os.path.join(base_path, 'data', 'sample_model.pkl')
    
    if os.path.exists(user_model_path) and os.path.getsize(user_model_path) > 100:
        return user_model_path
    else:
        return sample_model_path

def create_sample_model():
    """Create a sample model for demonstration purposes"""
    # Generate synthetic training data
    np.random.seed(42)
    n_samples = 1000
    
    # Features: math_score, reading_score, writing_score, attendance, behavior, literacy
    X = np.random.rand(n_samples, 6)
    
    # Scale features to realistic ranges
    X[:, 0] = X[:, 0] * 100  # math_score (0-100)
    X[:, 1] = X[:, 1] * 100  # reading_score (0-100)
    X[:, 2] = X[:, 2] * 100  # writing_score (0-100)
    X[:, 3] = X[:, 3] * 100  # attendance (0-100)
    X[:, 4] = X[:, 4] * 4 + 1  # behavior (1-5)
    X[:, 5] = X[:, 5] * 9 + 1  # literacy (1-10)
    
    # Create realistic target variable
    # Higher risk for lower academic scores, poor attendance, low behavior ratings
    risk_score = (
        (100 - X[:, 0]) * 0.25 +  # Lower math score increases risk
        (100 - X[:, 1]) * 0.25 +  # Lower reading score increases risk
        (100 - X[:, 2]) * 0.2 +   # Lower writing score increases risk
        (100 - X[:, 3]) * 0.2 +   # Lower attendance increases risk
        (5 - X[:, 4]) * 10 +      # Lower behavior rating increases risk
        (10 - X[:, 5]) * 5        # Lower literacy increases risk
    )
    
    # Add some noise
    risk_score += np.random.normal(0, 10, n_samples)
    
    # Convert to binary classification (1 = high risk, 0 = low risk)
    y = (risk_score > np.percentile(risk_score, 70)).astype(int)
    
    # Train the model
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # Test accuracy
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Sample model accuracy: {accuracy:.2f}")
    
    return model

def load_model():
    """Load the learning difficulty prediction model"""
    model_path = get_model_path()
    
    try:
        if os.path.exists(model_path):
            with open(model_path, 'rb') as f:
                model_package = pickle.load(f)
            
            # Handle both old format (just model) and new format (package with scaler)
            if isinstance(model_package, dict) and 'model' in model_package:
                print(f"User's trained model loaded from {model_path}")
                return model_package
            else:
                # Legacy format - wrap in package format
                return {
                    'model': model_package,
                    'scaler': None,
                    'feature_names': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy'],
                    'feature_order': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy']
                }
        else:
            # Create and save sample model if none exists
            print("No model found, creating sample model...")
            model = create_sample_model()
            
            # Ensure data directory exists
            os.makedirs(os.path.dirname(model_path), exist_ok=True)
            
            # Save the model
            with open(model_path, 'wb') as f:
                pickle.dump(model, f)
            
            return {
                'model': model,
                'scaler': None,
                'feature_names': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy'],
                'feature_order': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy']
            }
    
    except Exception as e:
        print(f"Error loading model: {e}")
        # Fall back to creating a new sample model
        sample_model = create_sample_model()
        return {
            'model': sample_model,
            'scaler': None,
            'feature_names': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy'],
            'feature_order': ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy']
        }

def make_prediction(student_data):
    """
    Make a prediction for a student based on their data
    
    Args:
        student_data (dict): Dictionary containing student metrics
            - math_score: Math performance score (0-100)
            - reading_score: Reading performance score (0-100)
            - writing_score: Writing performance score (0-100)
            - attendance: Attendance percentage (0-100)
            - behavior: Behavior rating (1-5)
            - literacy: Literacy level (1-10)
    
    Returns:
        tuple: (prediction, probability) where prediction is 0/1 and probability is float
    """
    try:
        model_package = load_model()
        model = model_package['model']
        scaler = model_package.get('scaler')
        
        # Prepare input features in the correct order
        features = np.array([[
            student_data['math_score'],
            student_data['reading_score'],
            student_data['writing_score'],
            student_data['attendance'],
            student_data['behavior'],
            student_data['literacy']
        ]])
        
        # Apply scaling if the model uses StandardScaler (from user's notebook)
        if scaler is not None:
            features = scaler.transform(features)
        
        # Make prediction
        prediction = model.predict(features)[0]
        prediction_proba = model.predict_proba(features)[0]
        
        # Get probability of positive class (learning difficulty risk)
        risk_probability = prediction_proba[1] if len(prediction_proba) > 1 else prediction_proba[0]
        
        return int(prediction), float(risk_probability)
    
    except Exception as e:
        print(f"Error making prediction: {e}")
        # Fallback prediction based on simple rules
        academic_avg = (student_data['math_score'] + student_data['reading_score'] + student_data['writing_score']) / 3
        
        # Simple risk calculation
        risk_factors = 0
        if academic_avg < 70:
            risk_factors += 2
        if student_data['attendance'] < 80:
            risk_factors += 1
        if student_data['behavior'] < 3:
            risk_factors += 1
        if student_data['literacy'] < 5:
            risk_factors += 1
        
        # Convert to probability
        risk_probability = min(risk_factors / 5.0, 1.0)
        prediction = 1 if risk_probability > 0.5 else 0
        
        return prediction, risk_probability

def get_feature_importance():
    """Get feature importance from the model"""
    try:
        model_package = load_model()
        model = model_package['model']
        
        if hasattr(model, 'feature_importances_'):
            feature_names = ['Math Score', 'Reading Score', 'Writing Score', 'Attendance', 'Behavior', 'Literacy']
            importance_dict = dict(zip(feature_names, model.feature_importances_))
            return importance_dict
        else:
            # Return default importance if model doesn't support it
            return {
                'Math Score': 0.20,
                'Reading Score': 0.25,
                'Writing Score': 0.15,
                'Attendance': 0.15,
                'Behavior': 0.15,
                'Literacy': 0.10
            }
    
    except Exception as e:
        print(f"Error getting feature importance: {e}")
        return {
            'Math Score': 0.20,
            'Reading Score': 0.25,
            'Writing Score': 0.15,
            'Attendance': 0.15,
            'Behavior': 0.15,
            'Literacy': 0.10
        }

def validate_student_data(student_data):
    """Validate student data before making prediction"""
    required_fields = ['math_score', 'reading_score', 'writing_score', 'attendance', 'behavior', 'literacy']
    
    # Check if all required fields are present
    for field in required_fields:
        if field not in student_data:
            raise ValueError(f"Missing required field: {field}")
    
    # Validate ranges
    if not (0 <= student_data['math_score'] <= 100):
        raise ValueError("Math score must be between 0 and 100")
    if not (0 <= student_data['reading_score'] <= 100):
        raise ValueError("Reading score must be between 0 and 100")
    if not (0 <= student_data['writing_score'] <= 100):
        raise ValueError("Writing score must be between 0 and 100")
    if not (0 <= student_data['attendance'] <= 100):
        raise ValueError("Attendance must be between 0 and 100")
    if not (1 <= student_data['behavior'] <= 5):
        raise ValueError("Behavior rating must be between 1 and 5")
    if not (1 <= student_data['literacy'] <= 10):
        raise ValueError("Literacy level must be between 1 and 10")
    
    return True

### FILE: data/app_settings.json

{
  "language": "English",
  "offline_mode": true,
  "theme": "System"
}
### FILE: data/parent_observations.json

[
  {
    "child_name": "Ahmed Farah",
    "date": "2024-06-05",
    "homework_completion": 90,
    "reading_time": 30,
    "focus_level": "Excellent",
    "subjects_struggled": [],
    "behavior_rating": 4,
    "mood_rating": 5,
    "sleep_hours": 9.0,
    "energy_level": "High",
    "social_interactions": "Played well with siblings, no conflicts.",
    "learning_wins": "Finished math homework quickly and accurately.",
    "challenges_faced": "None reported.",
    "strategies_used": "Used quiet study corner.",
    "screen_time": 1.5,
    "physical_activity": 60,
    "medication_taken": false,
    "special_events": "Family dinner with relatives.",
    "timestamp": "2024-06-05T18:00:00.000000"
  },
  {
    "child_name": "Ahmed Farah",
    "date": "2024-06-12",
    "homework_completion": 95,
    "reading_time": 40,
    "focus_level": "Excellent",
    "subjects_struggled": [],
    "behavior_rating": 5,
    "mood_rating": 5,
    "sleep_hours": 8.5,
    "energy_level": "Very High",
    "social_interactions": "Very cheerful, enjoyed playing outside with friends.",
    "learning_wins": "Excited about a science project he started.",
    "challenges_faced": "Brief moment of frustration with a reading passage, but overcame it.",
    "strategies_used": "Took a short break, then reread the difficult part.",
    "screen_time": 1.0,
    "physical_activity": 90,
    "medication_taken": false,
    "special_events": "School field trip."
  },
  {
    "child_name": "Ahmed Farah",
    "date": "2024-06-19",
    "homework_completion": 85,
    "reading_time": 25,
    "focus_level": "Good",
    "subjects_struggled": [],
    "behavior_rating": 4,
    "mood_rating": 4,
    "sleep_hours": 8.0,
    "energy_level": "Normal",
    "social_interactions": "Normal interactions, no issues.",
    "learning_wins": "Completed all assignments independently.",
    "challenges_faced": "Slightly less focused after dinner.",
    "strategies_used": "Reminded him about his study schedule.",
    "screen_time": 2.0,
    "physical_activity": 45,
    "medication_taken": false,
    "special_events": ""
  },
  {
    "child_name": "Fatima Ali",
    "date": "2024-06-07",
    "homework_completion": 70,
    "reading_time": 15,
    "focus_level": "Poor",
    "subjects_struggled": ["Math", "Reading"],
    "behavior_rating": 3,
    "mood_rating": 3,
    "sleep_hours": 8.0,
    "energy_level": "Normal",
    "social_interactions": "Quiet day, kept to herself.",
    "learning_wins": "Understood a new vocabulary word in reading.",
    "challenges_faced": "Struggled with multiplication problems, got frustrated easily.",
    "strategies_used": "Used manipulatives for math, short reading sessions.",
    "screen_time": 1.0,
    "physical_activity": 30,
    "medication_taken": false,
    "special_events": ""
  },
  {
    "child_name": "Fatima Ali",
    "date": "2024-06-14",
    "homework_completion": 75,
    "reading_time": 20,
    "focus_level": "Good",
    "subjects_struggled": ["Math"],
    "behavior_rating": 3,
    "mood_rating": 4,
    "sleep_hours": 8.5,
    "energy_level": "High",
    "social_interactions": "More engaged with family today.",
    "learning_wins": "Solved 2 out of 3 challenging math problems with guidance.",
    "challenges_faced": "Still finds long reading passages daunting.",
    "strategies_used": "Broke down math problems, encouraged reading aloud.",
    "screen_time": 1.5,
    "physical_activity": 40,
    "medication_taken": false,
    "special_events": ""
  },
  {
    "child_name": "Aisha Yusuf",
    "date": "2024-06-01",
    "homework_completion": 40,
    "reading_time": 10,
    "focus_level": "Very Poor",
    "subjects_struggled": ["Math", "Reading", "Writing"],
    "behavior_rating": 2,
    "mood_rating": 2,
    "sleep_hours": 7.0,
    "energy_level": "Low",
    "social_interactions": "Avoided interacting.",
    "learning_wins": "Identified first letter of her name.",
    "challenges_faced": "Refused to start homework, easily overwhelmed.",
    "strategies_used": "Used picture cards for reading, very short work sessions.",
    "screen_time": 2.0,
    "physical_activity": 15,
    "medication_taken": true,
    "special_events": "New medication started."
  },
  {
    "child_name": "Aisha Yusuf",
    "date": "2024-06-08",
    "homework_completion": 50,
    "reading_time": 15,
    "focus_level": "Poor",
    "subjects_struggled": ["Math", "Reading", "Writing"],
    "behavior_rating": 2,
    "mood_rating": 3,
    "sleep_hours": 7.5,
    "energy_level": "Normal",
    "social_interactions": "Slightly more responsive to questions.",
    "learning_wins": "Copied a short sentence correctly.",
    "challenges_faced": "Distracted easily, difficulty staying on task for more than 5 minutes.",
    "strategies_used": "Timer for focus, positive reinforcement for small achievements.",
    "screen_time": 1.5,
    "physical_activity": 20,
    "medication_taken": true,
    "special_events": ""
  },
  {
    "child_name": "Omar Hassan",
    "date": "2024-06-03",
    "homework_completion": 80,
    "reading_time": 25,
    "focus_level": "Good",
    "subjects_struggled": [],
    "behavior_rating": 4,
    "mood_rating": 4,
    "sleep_hours": 8.0,
    "energy_level": "Normal",
    "social_interactions": "Normal, played well with friends.",
    "learning_wins": "Helped a younger sibling with their homework.",
    "challenges_faced": "None.",
    "strategies_used": "Regular study routine.",
    "screen_time": 2.0,
    "physical_activity": 60,
    "medication_taken": false,
    "special_events": ""
  },
  {
    "child_name": "Layla Mohamed",
    "date": "2024-06-28",
    "homework_completion": 85,
    "reading_time": 30,
    "focus_level": "Excellent",
    "subjects_struggled": [],
    "behavior_rating": 4,
    "mood_rating": 5,
    "sleep_hours": 9.0,
    "energy_level": "High",
    "social_interactions": "Very happy and interactive.",
    "learning_wins": "Read a new chapter book confidently.",
    "challenges_faced": "No significant challenges.",
    "strategies_used": "Enjoyed reading in her favorite spot.",
    "screen_time": 1.0,
    "physical_activity": 70,
    "medication_taken": false,
    "special_events": ""
  }
]
### FILE: data/student_data.json

[
  {
    "timestamp": "2024-01-10T09:00:00.000000",
    "student_name": "Ahmed Farah",
    "grade_level": "Grade 5",
    "teacher_name": "Ms. Amina",
    "assessment_date": "2024-01-10",
    "math_score": 85,
    "reading_score": 88,
    "writing_score": 80,
    "attendance": 98,
    "behavior": 5,
    "literacy": 9,
    "prediction": 0,
    "probability": 0.15,
    "risk_level": "Low Risk",
    "notes": "Consistently strong academic performance. Engaged and proactive."
  },
  {
    "timestamp": "2024-02-12T10:30:00.000000",
    "student_name": "Ahmed Farah",
    "grade_level": "Grade 5",
    "teacher_name": "Ms. Amina",
    "assessment_date": "2024-02-12",
    "math_score": 88,
    "reading_score": 90,
    "writing_score": 85,
    "attendance": 97,
    "behavior": 5,
    "literacy": 9,
    "prediction": 0,
    "probability": 0.12,
    "risk_level": "Low Risk",
    "notes": "Excellent progress, mastering new concepts quickly."
  },
  {
    "timestamp": "2024-03-05T11:45:00.000000",
    "student_name": "Fatima Ali",
    "grade_level": "Grade 4",
    "teacher_name": "Mr. Omar",
    "assessment_date": "2024-03-05",
    "math_score": 60,
    "reading_score": 65,
    "writing_score": 55,
    "attendance": 85,
    "behavior": 3,
    "literacy": 5,
    "prediction": 1,
    "probability": 0.48,
    "risk_level": "Medium Risk",
    "notes": "Struggles with comprehension and word problems. Needs targeted intervention."
  },
  {
    "timestamp": "2024-04-01T14:00:00.000000",
    "student_name": "Omar Hassan",
    "grade_level": "Grade 6",
    "teacher_name": "Ms. Amina",
    "assessment_date": "2024-04-01",
    "math_score": 72,
    "reading_score": 70,
    "writing_score": 75,
    "attendance": 90,
    "behavior": 4,
    "literacy": 7,
    "prediction": 0,
    "probability": 0.25,
    "risk_level": "Low Risk",
    "notes": "Steady performance, occasionally needs prompting."
  },
  {
    "timestamp": "2024-05-20T09:15:00.000000",
    "student_name": "Aisha Yusuf",
    "grade_level": "Grade 3",
    "teacher_name": "Mr. Omar",
    "assessment_date": "2024-05-20",
    "math_score": 40,
    "reading_score": 35,
    "writing_score": 45,
    "attendance": 70,
    "behavior": 2,
    "literacy": 3,
    "prediction": 1,
    "probability": 0.85,
    "risk_level": "High Risk",
    "notes": "Significant difficulties across all core subjects. Requires immediate specialist assessment."
  },
  {
    "timestamp": "2024-06-01T10:00:00.000000",
    "student_name": "Ahmed Farah",
    "grade_level": "Grade 5",
    "teacher_name": "Ms. Amina",
    "assessment_date": "2024-06-01",
    "math_score": 89,
    "reading_score": 92,
    "writing_score": 87,
    "attendance": 99,
    "behavior": 5,
    "literacy": 9,
    "prediction": 0,
    "probability": 0.10,
    "risk_level": "Low Risk",
    "notes": "Continues to excel. No concerns."
  },
  {
    "timestamp": "2024-06-10T11:00:00.000000",
    "student_name": "Fatima Ali",
    "grade_level": "Grade 4",
    "teacher_name": "Mr. Omar",
    "assessment_date": "2024-06-10",
    "math_score": 68,
    "reading_score": 70,
    "writing_score": 62,
    "attendance": 88,
    "behavior": 3,
    "literacy": 6,
    "prediction": 0,
    "probability": 0.38,
    "risk_level": "Medium Risk",
    "notes": "Small improvements with interventions. Still needs consistent support."
  },
  {
    "timestamp": "2024-06-25T13:00:00.000000",
    "student_name": "Layla Mohamed",
    "grade_level": "Grade 2",
    "teacher_name": "Ms. Sofia",
    "assessment_date": "2024-06-25",
    "math_score": 78,
    "reading_score": 75,
    "writing_score": 72,
    "attendance": 93,
    "behavior": 4,
    "literacy": 7,
    "prediction": 0,
    "probability": 0.20,
    "risk_level": "Low Risk",
    "notes": "Adapting well to new concepts. Good social skills."
  },
  {
    "timestamp": "2024-07-01T09:00:00.000000",
    "student_name": "Aisha Yusuf",
    "grade_level": "Grade 3",
    "teacher_name": "Mr. Omar",
    "assessment_date": "2024-07-01",
    "math_score": 45,
    "reading_score": 40,
    "writing_score": 50,
    "attendance": 75,
    "behavior": 2,
    "literacy": 3,
    "prediction": 1,
    "probability": 0.78,
    "risk_level": "High Risk",
    "notes": "Interventions showing slow progress. Continued close monitoring needed."
  },
  {
    "timestamp": "2024-07-05T10:00:00.000000",
    "student_name": "Zakaria Abdi",
    "grade_level": "Grade 1",
    "teacher_name": "Ms. Sofia",
    "assessment_date": "2024-07-05",
    "math_score": 55,
    "reading_score": 50,
    "writing_score": 58,
    "attendance": 80,
    "behavior": 3,
    "literacy": 4,
    "prediction": 1,
    "probability": 0.60,
    "risk_level": "Medium Risk",
    "notes": "Shows potential but easily distracted. Needs engaging activities."
  },
  {
    "timestamp": "2024-07-08T14:30:00.000000",
    "student_name": "Ahmed Farah",
    "grade_level": "Grade 5",
    "teacher_name": "Ms. Amina",
    "assessment_date": "2024-07-08",
    "math_score": 90,
    "reading_score": 93,
    "writing_score": 88,
    "attendance": 98,
    "behavior": 5,
    "literacy": 9,
    "prediction": 0,
    "probability": 0.08,
    "risk_level": "Low Risk",
    "notes": "Outstanding results across the board."
  }
]
### FILE: data/users.json

[
  {
    "username": "teacher1",
    "password": "password123",
    "role": "teacher"
  },
  {
    "username": "parent1",
    "password": "password123",
    "role": "parent"
  },
  {
    "username": "admin",
    "password": "adminpassword",
    "role": "admin"
  }
]